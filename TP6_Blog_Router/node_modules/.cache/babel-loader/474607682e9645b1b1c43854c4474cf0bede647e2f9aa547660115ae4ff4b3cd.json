{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"home\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_PostList = _resolveComponent(\"PostList\");\n  var _component_TagCloud = _resolveComponent(\"TagCloud\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"Liste des Articles\", -1 /* HOISTED */)), _createCommentVNode(\" Afficher la liste des articles \"), _createVNode(_component_PostList, {\n    posts: $setup.posts\n  }, null, 8 /* PROPS */, [\"posts\"]), _createCommentVNode(\" Afficher la liste des tags \"), _createVNode(_component_TagCloud, {\n    tags: $setup.tags\n  }, null, 8 /* PROPS */, [\"tags\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","_createVNode","_component_PostList","posts","$setup","_component_TagCloud","tags"],"sources":["/workspaces/Mini_Projects_Js/tp5/src/views/HomePage.vue"],"sourcesContent":["<template>\n<div class=\"home\">\n<h1>Liste des Articles</h1>\n  <!-- Afficher la liste des articles -->\n    <PostList :posts=\"posts\" />\n\n    <!-- Afficher la liste des tags -->\n    <TagCloud :tags=\"tags\" />\n</div>\n\n\n</template>\n<script>\nimport { ref, onMounted } from 'vue';\nimport { getPosts } from '../composables/getPosts'; // Importer la fonction pour récupérer les posts\nimport PostList from '../components/PostList.vue'; // Importer le composant PostList\nimport TagCloud from '../components/TagCloud.vue'; // Importer le composant TagCloud\n\nexport default {\n  name: 'Home',\n  components: { PostList, TagCloud }, // Enregistrer les composants\n  setup() {\n    const posts = ref([]); // Liste des posts\n    const tags = ref([]); // Liste des tags uniques\n    const loading = ref(true); // État de chargement\n\n    // Fonction pour charger les posts et extraire les tags\n    const fetchPosts = async () => {\n      try {\n        posts.value = await getPosts(); // Récupérer les posts depuis l'API\n        tags.value = extractUniqueTags(posts.value); // Extraire les tags uniques\n      } catch (err) {\n        console.error('Erreur lors du chargement des posts:', err);\n      } finally {\n        loading.value = false; // Désactiver l'état de chargement\n      }\n    };\n\n    // Fonction pour extraire les tags uniques des posts\n    const extractUniqueTags = (posts) => {\n      const allTags = posts.flatMap(post => post.tags || []); // Rassembler tous les tags\n      return [...new Set(allTags)]; // Retourner les tags uniques\n    };\n\n    // Charger les posts au montage du composant\n    onMounted(fetchPosts);\n\n    return { posts, tags, loading };\n  }\n};\n</script>\n"],"mappings":";;EACK,SAAM;AAAM;;;;uBAAjBA,mBAAA,CAOM,OAPNC,UAOM,G,0BANNC,mBAAA,CAA2B,YAAvB,oBAAkB,sBACpBC,mBAAA,oCAAuC,EACrCC,YAAA,CAA2BC,mBAAA;IAAhBC,KAAK,EAAEC,MAAA,CAAAD;EAAK,oCAEvBH,mBAAA,gCAAmC,EACnCC,YAAA,CAAyBI,mBAAA;IAAdC,IAAI,EAAEF,MAAA,CAAAE;EAAI,kC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}