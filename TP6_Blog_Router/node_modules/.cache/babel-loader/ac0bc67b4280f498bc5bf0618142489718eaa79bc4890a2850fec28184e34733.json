{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/Mini_Projects_Js/tp5/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/workspaces/Mini_Projects_Js/tp5/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { getPost } from '../composables/getPost'; // Importer la fonction pour récupérer un post\nimport TagCloud from '../components/TagCloud.vue'; // Importer le composant TagCloud\n\nexport default {\n  name: 'PostDetailView',\n  components: {\n    TagCloud: TagCloud\n  },\n  // Enregistrer le composant TagCloud\n  setup: function setup() {\n    var route = useRoute();\n    var post = ref(null); // Stocker les détails du post\n    var loading = ref(true); // État de chargement\n\n    // Fonction pour charger les détails du post\n    var fetchPost = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var postId;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              postId = route.params.id; // Récupérer l'ID du post depuis l'URL\n              _context.next = 4;\n              return getPost(postId);\n            case 4:\n              post.value = _context.sent;\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Erreur lors du chargement du post:', _context.t0);\n            case 10:\n              _context.prev = 10;\n              loading.value = false; // Désactiver l'état de chargement\n              return _context.finish(10);\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 7, 10, 13]]);\n      }));\n      return function fetchPost() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    // Charger les détails du post au montage du composant\n    onMounted(fetchPost);\n    return {\n      post: post,\n      loading: loading\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","getPost","TagCloud","name","components","setup","route","post","loading","fetchPost","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","postId","wrap","_callee$","_context","prev","next","params","id","value","sent","t0","console","error","finish","stop","apply","arguments"],"sources":["/workspaces/Mini_Projects_Js/tp5/src/views/PostDetailView.vue"],"sourcesContent":["<template>\n  <div class=\"post-detail\">\n    <div v-if=\"loading\">Chargement en cours...</div>\n    <div v-else>\n      <!-- Afficher les détails du post -->\n      <h1>{{ post.title }}</h1>\n      <p>{{ post.body }}</p>\n      <p><strong>Salaire:</strong> {{ post.salaire }}</p>\n      <p><strong>Date de création:</strong> {{ post['date de création'] }}</p>\n\n      <!-- Afficher les tags associés au post -->\n      <TagCloud :tags=\"post.tags || []\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { getPost } from '../composables/getPost'; // Importer la fonction pour récupérer un post\nimport TagCloud from '../components/TagCloud.vue'; // Importer le composant TagCloud\n\nexport default {\n  name: 'PostDetailView',\n  components: { TagCloud }, // Enregistrer le composant TagCloud\n  setup() {\n    const route = useRoute();\n    const post = ref(null); // Stocker les détails du post\n    const loading = ref(true); // État de chargement\n\n    // Fonction pour charger les détails du post\n    const fetchPost = async () => {\n      try {\n        const postId = route.params.id; // Récupérer l'ID du post depuis l'URL\n        post.value = await getPost(postId); // Récupérer le post par son ID\n      } catch (err) {\n        console.error('Erreur lors du chargement du post:', err);\n      } finally {\n        loading.value = false; // Désactiver l'état de chargement\n      }\n    };\n\n    // Charger les détails du post au montage du composant\n    onMounted(fetchPost);\n\n    return { post, loading };\n  }\n};\n</script>\n\n<style scoped>\n.post-detail {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\nh1 {\n  margin-bottom: 20px;\n}\n\np {\n  margin-bottom: 10px;\n}\n</style>"],"mappings":";;AAiBA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,SAASC,QAAO,QAAS,YAAY;AACrC,SAASC,OAAM,QAAS,wBAAwB,EAAE;AAClD,OAAOC,QAAO,MAAO,4BAA4B,EAAE;;AAEnD,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,UAAU,EAAE;IAAEF,QAAO,EAAPA;EAAS,CAAC;EAAE;EAC1BG,KAAK,WAALA,KAAKA,CAAA,EAAG;IACN,IAAMC,KAAI,GAAIN,QAAQ,CAAC,CAAC;IACxB,IAAMO,IAAG,GAAIT,GAAG,CAAC,IAAI,CAAC,EAAE;IACxB,IAAMU,OAAM,GAAIV,GAAG,CAAC,IAAI,CAAC,EAAE;;IAE3B;IACA,IAAMW,SAAQ;MAAA,IAAAC,IAAA,GAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAI,SAAAC,QAAA;QAAA,IAAAC,MAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAERJ,MAAK,GAAIT,KAAK,CAACe,MAAM,CAACC,EAAE,EAAE;cAAAJ,QAAA,CAAAE,IAAA;cAAA,OACbnB,OAAO,CAACc,MAAM,CAAC;YAAA;cAAlCR,IAAI,CAACgB,KAAI,GAAAL,QAAA,CAAAM,IAAA;cAAAN,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAO,EAAA,GAAAP,QAAA;cAETQ,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAAT,QAAA,CAAAO,EAAK,CAAC;YAAA;cAAAP,QAAA,CAAAC,IAAA;cAExDX,OAAO,CAACe,KAAI,GAAI,KAAK,EAAE;cAAA,OAAAL,QAAA,CAAAU,MAAA;YAAA;YAAA;cAAA,OAAAV,QAAA,CAAAW,IAAA;UAAA;QAAA,GAAAf,OAAA;MAAA,CAE1B;MAAA,gBATKL,SAAQA,CAAA;QAAA,OAAAC,IAAA,CAAAoB,KAAA,OAAAC,SAAA;MAAA;IAAA,GASb;;IAED;IACAhC,SAAS,CAACU,SAAS,CAAC;IAEpB,OAAO;MAAEF,IAAI,EAAJA,IAAI;MAAEC,OAAM,EAANA;IAAQ,CAAC;EAC1B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}