{"ast":null,"code":"import _toConsumableArray from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass, vModelText as _vModelText, withModifiers as _withModifiers, withKeys as _withKeys, withDirectives as _withDirectives, normalizeStyle as _normalizeStyle } from \"vue\";\nvar _hoisted_1 = {\n  key: 0\n};\nvar _hoisted_2 = {\n  key: 0,\n  \"class\": \"chat-container\"\n};\nvar _hoisted_3 = {\n  \"class\": \"discussion-header\"\n};\nvar _hoisted_4 = {\n  key: 0\n};\nvar _hoisted_5 = {\n  \"class\": \"participants-bar\"\n};\nvar _hoisted_6 = {\n  \"class\": \"participants-list\"\n};\nvar _hoisted_7 = {\n  \"class\": \"participant-avatar\"\n};\nvar _hoisted_8 = [\"src\"];\nvar _hoisted_9 = {\n  key: 1,\n  \"class\": \"user-initials\"\n};\nvar _hoisted_10 = {\n  \"class\": \"participant-name\"\n};\nvar _hoisted_11 = {\n  key: 0,\n  \"class\": \"no-messages\"\n};\nvar _hoisted_12 = [\"data-message-id\"];\nvar _hoisted_13 = {\n  \"class\": \"message-avatar\"\n};\nvar _hoisted_14 = {\n  \"class\": \"user-avatar\"\n};\nvar _hoisted_15 = [\"src\"];\nvar _hoisted_16 = {\n  key: 1,\n  \"class\": \"avatar-placeholder\"\n};\nvar _hoisted_17 = {\n  \"class\": \"message-bubble\"\n};\nvar _hoisted_18 = {\n  key: 0,\n  \"class\": \"edit-message-container\"\n};\nvar _hoisted_19 = [\"onKeyup\"];\nvar _hoisted_20 = {\n  \"class\": \"edit-actions\"\n};\nvar _hoisted_21 = [\"onClick\"];\nvar _hoisted_22 = {\n  key: 1,\n  \"class\": \"message-content\"\n};\nvar _hoisted_23 = {\n  key: 0,\n  \"class\": \"edited-indicator\"\n};\nvar _hoisted_24 = {\n  \"class\": \"message-reactions\"\n};\nvar _hoisted_25 = {\n  key: 0,\n  \"class\": \"reactions-list\"\n};\nvar _hoisted_26 = [\"onClick\"];\nvar _hoisted_27 = {\n  \"class\": \"reaction-emoji\"\n};\nvar _hoisted_28 = {\n  \"class\": \"reaction-count\"\n};\nvar _hoisted_29 = {\n  \"class\": \"message-meta\"\n};\nvar _hoisted_30 = {\n  \"class\": \"user-info\"\n};\nvar _hoisted_31 = {\n  \"class\": \"user-name\"\n};\nvar _hoisted_32 = {\n  key: 0,\n  \"class\": \"timestamp\"\n};\nvar _hoisted_33 = {\n  key: 0,\n  \"class\": \"message-actions\"\n};\nvar _hoisted_34 = [\"onClick\"];\nvar _hoisted_35 = [\"onClick\"];\nvar _hoisted_36 = [\"onClick\"];\nvar _hoisted_37 = [\"onMouseenter\"];\nvar _hoisted_38 = {\n  key: 0,\n  \"class\": \"read-count\"\n};\nvar _hoisted_39 = {\n  \"class\": \"read-receipts-content\"\n};\nvar _hoisted_40 = {\n  key: 0\n};\nvar _hoisted_41 = {\n  \"class\": \"read-users-list\"\n};\nvar _hoisted_42 = {\n  \"class\": \"read-user-name\"\n};\nvar _hoisted_43 = {\n  \"class\": \"read-timestamp\"\n};\nvar _hoisted_44 = {\n  key: 1\n};\nvar _hoisted_45 = {\n  \"class\": \"unread-users-list\"\n};\nvar _hoisted_46 = {\n  key: 2\n};\nvar _hoisted_47 = {\n  \"class\": \"reaction-picker-content\"\n};\nvar _hoisted_48 = [\"onClick\"];\nvar _hoisted_49 = {\n  key: 3,\n  \"class\": \"delete-confirmation-modal\"\n};\nvar _hoisted_50 = {\n  \"class\": \"delete-modal-content\"\n};\nvar _hoisted_51 = {\n  \"class\": \"delete-modal-actions\"\n};\nvar _hoisted_52 = {\n  \"class\": \"message-input-container\"\n};\nvar _hoisted_53 = {\n  key: 1,\n  \"class\": \"loading\"\n};\nvar _hoisted_54 = {\n  key: 1,\n  \"class\": \"no-discussion-selected\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $props.discussionId ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $setup.Hide && $setup.Hide.apply($setup, arguments);\n    }),\n    \"class\": \"back-button\"\n  }, _cache[10] || (_cache[10] = [_createElementVNode(\"span\", {\n    \"class\": \"back-icon\"\n  }, \"←\", -1 /* HOISTED */), _createTextVNode(\" Retour aux discussions \")])), $setup.discussion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createCommentVNode(\" Updated discussion info and participants section \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"h2\", null, _toDisplayString($setup.discussion.title), 1 /* TEXT */), $setup.discussion.description ? (_openBlock(), _createElementBlock(\"p\", _hoisted_4, _toDisplayString($setup.discussion.description), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Condensed participants display \"), _createElementVNode(\"div\", _hoisted_5, [_cache[11] || (_cache[11] = _createElementVNode(\"div\", {\n    \"class\": \"participants-label\"\n  }, \"Participants\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.discussion.participants, function (userId) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: userId,\n      \"class\": \"participant-item\"\n    }, [_createElementVNode(\"div\", _hoisted_7, [$setup.userAvatars[userId] ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      src: $setup.userAvatars[userId],\n      alt: \"Avatar\",\n      \"class\": \"avatar-img\"\n    }, null, 8 /* PROPS */, _hoisted_8)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_9, _toDisplayString($setup.getUserInitials(userId)), 1 /* TEXT */)), _createElementVNode(\"div\", {\n      \"class\": _normalizeClass([\"status-indicator\", {\n        'online': $setup.isUserOnline(userId),\n        'offline': !$setup.isUserOnline(userId)\n      }])\n    }, null, 2 /* CLASS */)]), _createElementVNode(\"div\", _hoisted_10, _toDisplayString($setup.isCurrentUser(userId) ? 'Vous' : $setup.userNames[userId] || 'Utilisateur'), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", {\n    \"class\": \"messages-container\",\n    ref: \"messagesContainer\",\n    onScroll: _cache[7] || (_cache[7] = function () {\n      return $setup.handleScroll && $setup.handleScroll.apply($setup, arguments);\n    })\n  }, [$setup.responses.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, \" Aucun message dans cette discussion. Soyez le premier à écrire ! \")) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.responses, function (message) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id,\n      \"class\": _normalizeClass([{\n        'sender-message': $setup.isCurrentUserMessage(message),\n        'receiver-message': !$setup.isCurrentUserMessage(message)\n      }, \"message\"]),\n      \"data-message-id\": message.id,\n      ref_for: true,\n      ref: \"messageElements\"\n    }, [_createCommentVNode(\" User profile picture \"), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [$setup.userAvatars[message.senderId] ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      src: $setup.userAvatars[message.senderId],\n      alt: \"Avatar\",\n      \"class\": \"avatar-img\"\n    }, null, 8 /* PROPS */, _hoisted_15)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_16, _toDisplayString($setup.getUserInitials(message.senderId)), 1 /* TEXT */))])]), _createElementVNode(\"div\", _hoisted_17, [_createCommentVNode(\" Message content - show edit interface if editing this message \"), $setup.editingMessageId === message.id ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_withDirectives(_createElementVNode(\"textarea\", {\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n        return $setup.editMessageContent = $event;\n      }),\n      \"class\": \"edit-message-input\",\n      ref_for: true,\n      ref: \"editTextarea\",\n      onKeyup: [_withKeys(_withModifiers(function ($event) {\n        return $setup.saveMessageEdit(message.id);\n      }, [\"exact\"]), [\"enter\"]), _cache[2] || (_cache[2] = _withKeys(function () {\n        return $setup.cancelMessageEdit && $setup.cancelMessageEdit.apply($setup, arguments);\n      }, [\"escape\"]))]\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_19), [[_vModelText, $setup.editMessageContent]]), _createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"button\", {\n      onClick: function onClick($event) {\n        return $setup.saveMessageEdit(message.id);\n      },\n      \"class\": \"edit-save-btn\"\n    }, \"Enregistrer\", 8 /* PROPS */, _hoisted_21), _createElementVNode(\"button\", {\n      onClick: _cache[3] || (_cache[3] = function () {\n        return $setup.cancelMessageEdit && $setup.cancelMessageEdit.apply($setup, arguments);\n      }),\n      \"class\": \"edit-cancel-btn\"\n    }, \"Annuler\")])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [_createTextVNode(_toDisplayString(message.content) + \" \", 1 /* TEXT */), message.edited ? (_openBlock(), _createElementBlock(\"span\", _hoisted_23, \"(modifié)\")) : _createCommentVNode(\"v-if\", true)])), _createCommentVNode(\" Message reactions \"), _createElementVNode(\"div\", _hoisted_24, [_createCommentVNode(\" Display existing reactions \"), message.reactions && Object.keys(message.reactions).length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_25, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(message.reactions, function (users, emoji) {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: emoji,\n        \"class\": _normalizeClass([\"reaction-badge\", {\n          'user-reacted': $setup.hasUserReacted(message, emoji)\n        }]),\n        onClick: function onClick($event) {\n          return $setup.toggleReaction(message.id, emoji);\n        }\n      }, [_createElementVNode(\"span\", _hoisted_27, _toDisplayString(emoji), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_28, _toDisplayString(Object.keys(users).length), 1 /* TEXT */)], 10 /* CLASS, PROPS */, _hoisted_26);\n    }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_29, [_createElementVNode(\"div\", _hoisted_30, [_createElementVNode(\"span\", _hoisted_31, _toDisplayString($setup.isCurrentUserMessage(message) ? 'Vous' : $setup.getUserDisplayName(message.senderId)), 1 /* TEXT */), message.createdAt ? (_openBlock(), _createElementBlock(\"span\", _hoisted_32, _toDisplayString($setup.formatDate(message.createdAt)), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), !$setup.editingMessageId ? (_openBlock(), _createElementBlock(\"div\", _hoisted_33, [_createCommentVNode(\" Edit option for own messages \"), $setup.isCurrentUserMessage(message) ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      onClick: function onClick($event) {\n        return $setup.startEditMessage(message);\n      },\n      \"class\": \"action-btn\",\n      title: \"Modifier ce message\"\n    }, _toConsumableArray(_cache[12] || (_cache[12] = [_createElementVNode(\"span\", {\n      \"class\": \"edit-icon\"\n    }, \"✎\", -1 /* HOISTED */)])), 8 /* PROPS */, _hoisted_34)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Delete option for own messages \"), $setup.isCurrentUserMessage(message) ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 1,\n      onClick: function onClick($event) {\n        return $setup.confirmDeleteMessage(message.id);\n      },\n      \"class\": \"action-btn delete-btn\",\n      title: \"Supprimer ce message\"\n    }, _toConsumableArray(_cache[13] || (_cache[13] = [_createElementVNode(\"span\", {\n      \"class\": \"delete-icon\"\n    }, \"🗑️\", -1 /* HOISTED */)])), 8 /* PROPS */, _hoisted_35)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Reaction button for all messages \"), _createElementVNode(\"button\", {\n      onClick: function onClick($event) {\n        return $setup.showReactionPicker(message.id);\n      },\n      \"class\": \"action-btn\",\n      title: \"Réagir à ce message\"\n    }, _toConsumableArray(_cache[14] || (_cache[14] = [_createElementVNode(\"span\", {\n      \"class\": \"reaction-icon\"\n    }, \"😀\", -1 /* HOISTED */)])), 8 /* PROPS */, _hoisted_36), _createCommentVNode(\" Read status information for sent messages - Now always visible \"), $setup.isCurrentUserMessage(message) ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 2,\n      \"class\": \"read-status\",\n      onMouseenter: function onMouseenter($event) {\n        return $setup.showReadReceipts(message);\n      },\n      onMouseleave: _cache[4] || (_cache[4] = function ($event) {\n        return $setup.hideReadReceipts();\n      })\n    }, [_createElementVNode(\"span\", {\n      \"class\": _normalizeClass([\"read-status-icon\", $setup.getReadStatusClass(message)])\n    }, [$setup.getReadCount(message) > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_38, _toDisplayString($setup.getReadCount(message)), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */)], 40 /* PROPS, NEED_HYDRATION */, _hoisted_37)) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)])])], 10 /* CLASS, PROPS */, _hoisted_12);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" Read receipts tooltip \"), $setup.showingReadReceiptsFor ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 1,\n    \"class\": \"read-receipts-tooltip\",\n    style: _normalizeStyle($setup.readReceiptsTooltipStyle)\n  }, [_createElementVNode(\"div\", _hoisted_39, [$setup.getReadUsersList($setup.showingReadReceiptsFor).length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_40, [_cache[15] || (_cache[15] = _createElementVNode(\"strong\", null, \"Lu par:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", _hoisted_41, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.getReadUsersList($setup.showingReadReceiptsFor), function (info, index) {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      \"class\": \"read-user-item\"\n    }, [_createElementVNode(\"span\", _hoisted_42, _toDisplayString(info.name), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_43, _toDisplayString($setup.formatDate(info.timestamp)), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), $setup.getUnreadUsersList($setup.showingReadReceiptsFor).length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_44, [_cache[16] || (_cache[16] = _createElementVNode(\"strong\", null, \"Pas encore lu par:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", _hoisted_45, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.getUnreadUsersList($setup.showingReadReceiptsFor), function (name, index) {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      \"class\": \"unread-user-item\"\n    }, _toDisplayString(name), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), $setup.getReadUsersList($setup.showingReadReceiptsFor).length === 0 && $setup.getUnreadUsersList($setup.showingReadReceiptsFor).length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_46, \" Aucune information de lecture disponible. \")) : _createCommentVNode(\"v-if\", true)])], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Reaction picker overlay \"), $setup.showingReactionsFor ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 2,\n    \"class\": \"reaction-picker\",\n    style: _normalizeStyle($setup.reactionPickerStyle)\n  }, [_createElementVNode(\"div\", _hoisted_47, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.availableReactions, function (emoji) {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: emoji,\n      \"class\": \"reaction-btn\",\n      onClick: function onClick($event) {\n        return $setup.addReaction($setup.showingReactionsFor, emoji);\n      }\n    }, _toDisplayString(emoji), 9 /* TEXT, PROPS */, _hoisted_48);\n  }), 128 /* KEYED_FRAGMENT */))])], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Delete confirmation modal \"), $setup.showDeleteConfirmation ? (_openBlock(), _createElementBlock(\"div\", _hoisted_49, [_createElementVNode(\"div\", _hoisted_50, [_cache[17] || (_cache[17] = _createElementVNode(\"h3\", null, \"Confirmer la suppression\", -1 /* HOISTED */)), _cache[18] || (_cache[18] = _createElementVNode(\"p\", null, \"Êtes-vous sûr de vouloir supprimer ce message ?\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_51, [_createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = function () {\n      return $setup.deleteMessage && $setup.deleteMessage.apply($setup, arguments);\n    }),\n    \"class\": \"delete-confirm-btn\"\n  }, \"Supprimer\"), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = function () {\n      return $setup.cancelDeleteConfirmation && $setup.cancelDeleteConfirmation.apply($setup, arguments);\n    }),\n    \"class\": \"delete-cancel-btn\"\n  }, \"Annuler\")])])])) : _createCommentVNode(\"v-if\", true)], 544 /* NEED_HYDRATION, NEED_PATCH */), _createElementVNode(\"div\", _hoisted_52, [_createElementVNode(\"form\", {\n    onSubmit: _cache[9] || (_cache[9] = _withModifiers(function () {\n      return $setup.sendMessage && $setup.sendMessage.apply($setup, arguments);\n    }, [\"prevent\"])),\n    \"class\": \"message-form\"\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = function ($event) {\n      return $setup.newMessage = $event;\n    }),\n    type: \"text\",\n    placeholder: \"Écrivez votre message ici...\",\n    \"class\": \"message-input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newMessage]]), _cache[19] || (_cache[19] = _createElementVNode(\"button\", {\n    type: \"submit\",\n    \"class\": \"send-button\"\n  }, \"Envoyer\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_53, \" Chargement de la discussion... \"))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_54, \" Sélectionnez une discussion pour voir les messages \"));\n}","map":{"version":3,"names":["key","$props","discussionId","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","$setup","Hide","apply","arguments","_createTextVNode","discussion","_hoisted_2","_createCommentVNode","_hoisted_3","_toDisplayString","title","description","_hoisted_4","_hoisted_5","_hoisted_6","_Fragment","_renderList","participants","userId","_hoisted_7","userAvatars","src","alt","_hoisted_8","_hoisted_9","getUserInitials","_normalizeClass","isUserOnline","_hoisted_10","isCurrentUser","userNames","ref","onScroll","handleScroll","responses","length","_hoisted_11","message","id","isCurrentUserMessage","ref_for","_hoisted_13","_hoisted_14","senderId","_hoisted_15","_hoisted_16","_hoisted_17","editingMessageId","_hoisted_18","$event","editMessageContent","onKeyup","_withKeys","_withModifiers","saveMessageEdit","cancelMessageEdit","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","content","edited","_hoisted_23","_hoisted_24","reactions","Object","keys","_hoisted_25","users","emoji","hasUserReacted","toggleReaction","_hoisted_27","_hoisted_28","_hoisted_26","_hoisted_29","_hoisted_30","_hoisted_31","getUserDisplayName","createdAt","_hoisted_32","formatDate","_hoisted_33","startEditMessage","_hoisted_34","confirmDeleteMessage","_hoisted_35","showReactionPicker","_hoisted_36","onMouseenter","showReadReceipts","onMouseleave","hideReadReceipts","getReadStatusClass","getReadCount","_hoisted_38","_hoisted_37","_hoisted_12","showingReadReceiptsFor","style","_normalizeStyle","readReceiptsTooltipStyle","_hoisted_39","getReadUsersList","_hoisted_40","_hoisted_41","info","index","_hoisted_42","name","_hoisted_43","timestamp","getUnreadUsersList","_hoisted_44","_hoisted_45","_hoisted_46","showingReactionsFor","reactionPickerStyle","_hoisted_47","availableReactions","addReaction","_hoisted_48","showDeleteConfirmation","_hoisted_49","_hoisted_50","_hoisted_51","deleteMessage","cancelDeleteConfirmation","_hoisted_52","onSubmit","sendMessage","newMessage","type","placeholder","_hoisted_53","_hoisted_54"],"sources":["/workspaces/Mini_Projects_Js/ChatAPP/src/components/Responses.vue"],"sourcesContent":["<template>\r\n  <div v-if=\"discussionId\">\r\n    <button @click=\"Hide\" class=\"back-button\">\r\n      <span class=\"back-icon\">←</span> Retour aux discussions\r\n    </button>\r\n    <div v-if=\"discussion\" class=\"chat-container\">\r\n      <!-- Updated discussion info and participants section -->\r\n      <div class=\"discussion-header\">\r\n        <h2>{{ discussion.title }}</h2>\r\n        <p v-if=\"discussion.description\">{{ discussion.description }}</p>\r\n      </div>\r\n      \r\n      <!-- Condensed participants display -->\r\n      <div class=\"participants-bar\">\r\n        <div class=\"participants-label\">Participants</div>\r\n        <div class=\"participants-list\">\r\n          <div v-for=\"userId in discussion.participants\" :key=\"userId\" \r\n               class=\"participant-item\">\r\n            <div class=\"participant-avatar\">\r\n              <img v-if=\"userAvatars[userId]\" :src=\"userAvatars[userId]\" alt=\"Avatar\" class=\"avatar-img\">\r\n              <div v-else class=\"user-initials\">{{ getUserInitials(userId) }}</div>\r\n              <div class=\"status-indicator\" :class=\"{ 'online': isUserOnline(userId), 'offline': !isUserOnline(userId) }\"></div>\r\n            </div>\r\n            <div class=\"participant-name\">\r\n              {{ isCurrentUser(userId) ? 'Vous' : (userNames[userId] || 'Utilisateur') }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"messages-container\" ref=\"messagesContainer\" @scroll=\"handleScroll\">\r\n        <div v-if=\"responses.length === 0\" class=\"no-messages\">\r\n          Aucun message dans cette discussion. Soyez le premier à écrire !\r\n        </div>\r\n        \r\n        <div v-for=\"message in responses\" :key=\"message.id\"\r\n              :class=\"{'sender-message': isCurrentUserMessage(message), 'receiver-message': !isCurrentUserMessage(message)}\"\r\n              class=\"message\"\r\n              :data-message-id=\"message.id\"\r\n              ref=\"messageElements\">\r\n          <!-- User profile picture -->\r\n          <div class=\"message-avatar\">\r\n            <div class=\"user-avatar\">\r\n              <img v-if=\"userAvatars[message.senderId]\" :src=\"userAvatars[message.senderId]\" alt=\"Avatar\" class=\"avatar-img\">\r\n              <div v-else class=\"avatar-placeholder\">{{ getUserInitials(message.senderId) }}</div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"message-bubble\">\r\n            <!-- Message content - show edit interface if editing this message -->\r\n            <div v-if=\"editingMessageId === message.id\" class=\"edit-message-container\">\r\n              <textarea \r\n                v-model=\"editMessageContent\" \r\n                class=\"edit-message-input\"\r\n                ref=\"editTextarea\"\r\n                @keyup.enter.exact=\"saveMessageEdit(message.id)\"\r\n                @keyup.escape=\"cancelMessageEdit\"\r\n              ></textarea>\r\n              <div class=\"edit-actions\">\r\n                <button @click=\"saveMessageEdit(message.id)\" class=\"edit-save-btn\">Enregistrer</button>\r\n                <button @click=\"cancelMessageEdit\" class=\"edit-cancel-btn\">Annuler</button>\r\n              </div>\r\n            </div>\r\n            <div v-else class=\"message-content\">\r\n              {{message.content}}\r\n              <span v-if=\"message.edited\" class=\"edited-indicator\">(modifié)</span>\r\n            </div>\r\n            \r\n            <!-- Message reactions -->\r\n            <div class=\"message-reactions\">\r\n              <!-- Display existing reactions -->\r\n              <div v-if=\"message.reactions && Object.keys(message.reactions).length > 0\" class=\"reactions-list\">\r\n                <div v-for=\"(users, emoji) in message.reactions\" :key=\"emoji\" \r\n                     class=\"reaction-badge\" \r\n                     :class=\"{ 'user-reacted': hasUserReacted(message, emoji) }\"\r\n                     @click=\"toggleReaction(message.id, emoji)\">\r\n                  <span class=\"reaction-emoji\">{{ emoji }}</span>\r\n                  <span class=\"reaction-count\">{{ Object.keys(users).length }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"message-meta\">\r\n              <div class=\"user-info\">\r\n                <span class=\"user-name\">{{ isCurrentUserMessage(message) ? 'Vous' : getUserDisplayName(message.senderId) }}</span>\r\n                <span class=\"timestamp\" v-if=\"message.createdAt\">{{ formatDate(message.createdAt) }}</span>\r\n              </div>\r\n              \r\n              <div class=\"message-actions\" v-if=\"!editingMessageId\">\r\n                <!-- Edit option for own messages -->\r\n                <button v-if=\"isCurrentUserMessage(message)\" @click=\"startEditMessage(message)\" class=\"action-btn\" title=\"Modifier ce message\">\r\n                  <span class=\"edit-icon\">✎</span>\r\n                </button>\r\n                \r\n                <!-- Delete option for own messages -->\r\n                <button v-if=\"isCurrentUserMessage(message)\" @click=\"confirmDeleteMessage(message.id)\" class=\"action-btn delete-btn\" title=\"Supprimer ce message\">\r\n                  <span class=\"delete-icon\">🗑️</span>\r\n                </button>\r\n                \r\n                <!-- Reaction button for all messages -->\r\n                <button @click=\"showReactionPicker(message.id)\" class=\"action-btn\" title=\"Réagir à ce message\">\r\n                  <span class=\"reaction-icon\">😀</span>\r\n                </button>\r\n                \r\n                <!-- Read status information for sent messages - Now always visible -->\r\n                <div v-if=\"isCurrentUserMessage(message)\" class=\"read-status\" @mouseenter=\"showReadReceipts(message)\" @mouseleave=\"hideReadReceipts()\">\r\n                  <span class=\"read-status-icon\" :class=\"getReadStatusClass(message)\">\r\n                    <span v-if=\"getReadCount(message) > 0\" class=\"read-count\">{{ getReadCount(message) }}</span>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Read receipts tooltip -->\r\n        <div v-if=\"showingReadReceiptsFor\" class=\"read-receipts-tooltip\" :style=\"readReceiptsTooltipStyle\">\r\n          <div class=\"read-receipts-content\">\r\n            <div v-if=\"getReadUsersList(showingReadReceiptsFor).length > 0\">\r\n              <strong>Lu par:</strong>\r\n              <ul class=\"read-users-list\">\r\n                <li v-for=\"(info, index) in getReadUsersList(showingReadReceiptsFor)\" :key=\"index\" class=\"read-user-item\">\r\n                  <span class=\"read-user-name\">{{ info.name }}</span>\r\n                  <span class=\"read-timestamp\">{{ formatDate(info.timestamp) }}</span>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div v-if=\"getUnreadUsersList(showingReadReceiptsFor).length > 0\">\r\n              <strong>Pas encore lu par:</strong>\r\n              <ul class=\"unread-users-list\">\r\n                <li v-for=\"(name, index) in getUnreadUsersList(showingReadReceiptsFor)\" :key=\"index\" class=\"unread-user-item\">\r\n                  {{ name }}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div v-if=\"getReadUsersList(showingReadReceiptsFor).length === 0 && getUnreadUsersList(showingReadReceiptsFor).length === 0\">\r\n              Aucune information de lecture disponible.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Reaction picker overlay -->\r\n        <div v-if=\"showingReactionsFor\" class=\"reaction-picker\" :style=\"reactionPickerStyle\">\r\n          <div class=\"reaction-picker-content\">\r\n            <button v-for=\"emoji in availableReactions\" :key=\"emoji\" \r\n                    class=\"reaction-btn\" \r\n                    @click=\"addReaction(showingReactionsFor, emoji)\">\r\n              {{ emoji }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Delete confirmation modal -->\r\n        <div v-if=\"showDeleteConfirmation\" class=\"delete-confirmation-modal\">\r\n          <div class=\"delete-modal-content\">\r\n            <h3>Confirmer la suppression</h3>\r\n            <p>Êtes-vous sûr de vouloir supprimer ce message ?</p>\r\n            <div class=\"delete-modal-actions\">\r\n              <button @click=\"deleteMessage\" class=\"delete-confirm-btn\">Supprimer</button>\r\n              <button @click=\"cancelDeleteConfirmation\" class=\"delete-cancel-btn\">Annuler</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"message-input-container\">\r\n        <form @submit.prevent=\"sendMessage\" class=\"message-form\">\r\n          <input \r\n            v-model=\"newMessage\" \r\n            type=\"text\" \r\n            placeholder=\"Écrivez votre message ici...\" \r\n            class=\"message-input\"\r\n          />\r\n          <button type=\"submit\" class=\"send-button\">Envoyer</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <div v-else class=\"loading\">\r\n      Chargement de la discussion...\r\n    </div>\r\n  </div>\r\n  <div v-else class=\"no-discussion-selected\">\r\n    Sélectionnez une discussion pour voir les messages\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, watch, nextTick, onUnmounted, computed } from 'vue';\r\nimport { \r\n  getFirestore, \r\n  collection, \r\n  doc, \r\n  getDoc, \r\n  updateDoc, \r\n  onSnapshot, \r\n  query, \r\n  orderBy, \r\n  serverTimestamp, \r\n  addDoc, \r\n  setDoc,\r\n  arrayUnion,\r\n  arrayRemove,\r\n  deleteField,\r\n  deleteDoc\r\n} from 'firebase/firestore';\r\nimport { getAuth } from 'firebase/auth';\r\n\r\nexport default {\r\n  props: {\r\n    discussionId: {\r\n      type: String,\r\n      default: null\r\n    }\r\n  },\r\n  emits: ['hide-discussion'],\r\n  setup(props, { emit }) {\r\n    const discussion = ref(null);\r\n    const responses = ref([]);\r\n    const userNames = ref({});\r\n    const userAvatars = ref({}); \r\n    const userStatuses = ref({});\r\n    const newMessage = ref('');\r\n    const messagesContainer = ref(null);\r\n    const messageElements = ref([]);\r\n    const isScrolledToBottom = ref(true);\r\n    \r\n    // Variables for tracking seen status\r\n    const unreadMessages = ref(new Set());\r\n    const lastVisibleMessageId = ref(null);\r\n    \r\n    // Pour message editing\r\n    const editingMessageId = ref(null);\r\n    const editMessageContent = ref('');\r\n    const editTextarea = ref(null);\r\n    \r\n    // Pour reactions\r\n    const availableReactions = ref(['👍', '❤️', '😂', '😮', '😢', '👏', '🎉', '🤔']);\r\n    const showingReactionsFor = ref(null);\r\n    const reactionPickerPosition = ref({ top: 0, left: 0 });\r\n    \r\n    // Pour read receipts tooltip\r\n    const showingReadReceiptsFor = ref(null);\r\n    const readReceiptsTooltipPosition = ref({ top: 0, left: 0 });\r\n    \r\n    // Pour presence system\r\n    const presenceUnsubscribe = ref(null);\r\n    const userStatusInterval = ref(null);\r\n    const messagesUnsubscribe = ref(null);\r\n    \r\n    // Pour la suppression de message\r\n    const showDeleteConfirmation = ref(false);\r\n    const messageToDelete = ref(null);\r\n    \r\n    // Computed style for reaction picker positioning\r\n    const reactionPickerStyle = computed(() => {\r\n      return {\r\n        top: `${reactionPickerPosition.value.top}px`,\r\n        left: `${reactionPickerPosition.value.left}px`\r\n      };\r\n    });\r\n    \r\n    // Computed style for read receipts tooltip positioning\r\n    const readReceiptsTooltipStyle = computed(() => {\r\n      return {\r\n        top: `${readReceiptsTooltipPosition.value.top}px`,\r\n        left: `${readReceiptsTooltipPosition.value.left}px`\r\n      };\r\n    });\r\n    \r\n    const Hide = () => {\r\n      emit('hide-discussion');\r\n    };\r\n\r\n    const isCurrentUser = (userId) => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      return currentUser && currentUser.uid === userId;\r\n    };\r\n\r\n    const isCurrentUserMessage = (message) => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      return currentUser && currentUser.uid === message.senderId;\r\n    };\r\n    \r\n    // Generate user initials for avatar placeholder\r\n    const getUserInitials = (userId) => {\r\n      // If it's current user and we don't have their name yet\r\n      if (isCurrentUser(userId)) {\r\n        const auth = getAuth();\r\n        const currentUser = auth.currentUser;\r\n        \r\n        if (currentUser && currentUser.displayName) {\r\n          const nameParts = currentUser.displayName.split(' ');\r\n          if (nameParts.length >= 2) {\r\n            return (nameParts[0][0] + nameParts[1][0]).toUpperCase();\r\n          } else if (nameParts.length === 1) {\r\n            return nameParts[0][0].toUpperCase();\r\n          }\r\n        }\r\n        return 'V'; // Vous (default for current user)\r\n      }\r\n      \r\n      // For other users, use their name if we have it\r\n      if (userNames.value[userId]) {\r\n        const nameParts = userNames.value[userId].split(' ');\r\n        if (nameParts.length >= 2) {\r\n          return (nameParts[0][0] + nameParts[1][0]).toUpperCase();\r\n        } else if (nameParts.length === 1) {\r\n          return nameParts[0][0].toUpperCase();\r\n        }\r\n      }\r\n      \r\n      return 'U'; // Unknown (default)\r\n    };\r\n    const isUserOnline = (userId) => {\r\n  return userStatuses.value[userId]?.isOnline || false;\r\n};\r\n    const formatDate = (timestamp) => {\r\n      if (!timestamp) return '';\r\n      \r\n      try {\r\n        const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);\r\n        \r\n        const today = new Date();\r\n        const isToday = date.getDate() === today.getDate() && \r\n                         date.getMonth() === today.getMonth() && \r\n                         date.getFullYear() === today.getFullYear();\r\n        \r\n        const timeOptions = { hour: '2-digit', minute: '2-digit' };\r\n        const dateOptions = { day: '2-digit', month: '2-digit', year: 'numeric' };\r\n        \r\n        if (isToday) {\r\n          return `Aujourd'hui, ${date.toLocaleTimeString(undefined, timeOptions)}`;\r\n        } else {\r\n          return date.toLocaleDateString(undefined, dateOptions) + ', ' + \r\n                 date.toLocaleTimeString(undefined, timeOptions);\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error formatting date:\", e);\r\n        return '';\r\n      }\r\n    };\r\n    \r\n    // Handle scroll to track when user is viewing messages\r\n    const handleScroll = () => {\r\n      if (!messagesContainer.value) return;\r\n      \r\n      const { scrollTop, scrollHeight, clientHeight } = messagesContainer.value;\r\n      isScrolledToBottom.value = Math.abs(scrollHeight - clientHeight - scrollTop) < 20;\r\n      \r\n      // Mark messages as read when they appear in viewport\r\n      markVisibleMessagesAsRead();\r\n    };\r\n    \r\n    // Scroll to bottom with optional force parameter\r\n    const scrollToBottom = async (force = false) => {\r\n      await nextTick();\r\n      if (messagesContainer.value && (isScrolledToBottom.value || force)) {\r\n        messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\r\n      }\r\n    };\r\n    \r\n    // Function to mark visible messages as read\r\n    const markVisibleMessagesAsRead = () => {\r\n      if (!messagesContainer.value || responses.value.length === 0) return;\r\n      \r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) return;\r\n       const containerRect = messagesContainer.value.getBoundingClientRect();\r\n      // Get all message elements\r\n      if (!messageElements.value) return;\r\n      let messagesElements = Array.isArray(messageElements.value) \r\n        ? messageElements.value \r\n        : [messageElements.value];\r\n      \r\n      let messageIds = [];\r\n      \r\n      // Check which messages are visible\r\n      messagesElements.forEach(el => {\r\n        if (!el) return;\r\n        \r\n        const rect = el.getBoundingClientRect();\r\n        // Check if element is at least partially visible in container\r\n        if (rect.top < containerRect.bottom && rect.bottom > containerRect.top) {\r\n          const messageId = el.getAttribute('data-message-id');\r\n          if (messageId) {\r\n            messageIds.push(messageId);\r\n          }\r\n        }\r\n      });\r\n      // Mark all visible messages as read\r\n      if (messageIds.length > 0) {\r\n        messageIds.forEach(messageId => {\r\n          const message = responses.value.find(msg => msg.id === messageId);\r\n          // Only mark others' messages as read\r\n          if (message && message.senderId !== currentUser.uid) {\r\n            markMessageAsRead(messageId);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    // Function to mark a message as read\r\n    const markMessageAsRead = async (messageId) => {\r\n      if (!messageId || !props.discussionId) return;\r\n      \r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) return;\r\n      \r\n      try {\r\n        const message = responses.value.find(msg => msg.id === messageId);\r\n        \r\n        // Skip if message is from current user or already read by current user\r\n        if (!message || \r\n            message.senderId === currentUser.uid || \r\n            (message.readBy && message.readBy.includes(currentUser.uid))) {\r\n          return;\r\n        }\r\n        \r\n        const db = getFirestore();\r\n        const messageRef = doc(db, 'discussions', props.discussionId, 'messages', messageId);\r\n        \r\n        // Update both readBy array and lastReadAt map\r\n        await updateDoc(messageRef, {\r\n          readBy: arrayUnion(currentUser.uid),\r\n          [`lastReadAt.${currentUser.uid}`]: serverTimestamp()\r\n        });\r\n        \r\n        // Update locally if needed\r\n        if (message && !message.readBy) {\r\n          message.readBy = [currentUser.uid];\r\n        } else if (message && !message.readBy.includes(currentUser.uid)) {\r\n          message.readBy.push(currentUser.uid);\r\n        }\r\n        \r\n        if (!message.lastReadAt) {\r\n          message.lastReadAt = {};\r\n        }\r\n        message.lastReadAt[currentUser.uid] = new Date();\r\n        \r\n      } catch (error) {\r\n        console.error(\"Error marking message as read:\", error);\r\n      }\r\n    };\r\n    \r\n    // Get read status class for message indicators\r\n    const getReadStatusClass = (message) => {\r\n      if (!message.readBy) return 'not-read';\r\n      \r\n      // If sent by current user, check if others have read it\r\n      if (isCurrentUserMessage(message)) {\r\n        const readCount = getReadCount(message);\r\n        if (readCount === 0) return 'not-read';\r\n        if (readCount < (discussion.value.participants.length - 1)) return 'partially-read';\r\n        return 'all-read';\r\n      }\r\n      \r\n      // If received, check if current user has read it\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (currentUser && message.readBy.includes(currentUser.uid)) {\r\n        return 'read';\r\n      }\r\n      \r\n      return 'not-read';\r\n    };\r\n    \r\n    // Get number of users who've read a message (excluding sender)\r\n    const getReadCount = (message) => {\r\n      if (!message.readBy || !Array.isArray(message.readBy)) return 0;\r\n      \r\n      // Count users who have read the message (excluding the sender)\r\n      return message.readBy.filter(userId => userId !== message.senderId).length;\r\n    };\r\n    \r\n    // Get list of users who have read the message with timestamps\r\n    const getReadUsersList = (message) => {\r\n      if (!message || !message.readBy || !Array.isArray(message.readBy) || !message.lastReadAt) {\r\n        return [];\r\n      }\r\n      \r\n      return message.readBy\r\n        .filter(userId => userId !== message.senderId) // Exclude sender\r\n        .map(userId => ({\r\n          userId,\r\n          name: isCurrentUser(userId) ? 'Vous' : (userNames.value[userId] || 'Utilisateur'),\r\n          timestamp: message.lastReadAt[userId]\r\n        }))\r\n        .sort((a, b) => {\r\n          // Sort by timestamp if available\r\n          if (a.timestamp && b.timestamp) {\r\n            const timeA = a.timestamp.toDate ? a.timestamp.toDate() : new Date(a.timestamp);\r\n            const timeB = b.timestamp.toDate ? b.timestamp.toDate() : new Date(b.timestamp);\r\n            return timeA - timeB;\r\n          }\r\n          return 0;\r\n        });\r\n    };\r\n    \r\n    // Get list of users who haven't read the message yet\r\n    const getUnreadUsersList = (message) => {\r\n      if (!message || !discussion.value || !discussion.value.participants) {\r\n        return [];\r\n      }\r\n      \r\n      // Create a set of user IDs who have read the message\r\n      const readBySet = new Set(message.readBy || []);\r\n      \r\n      // Return names of users who haven't read the message (excluding the sender)\r\n      return discussion.value.participants\r\n        .filter(userId => userId !== message.senderId && !readBySet.has(userId))\r\n        .map(userId => isCurrentUser(userId) ? 'Vous' : (userNames.value[userId] || 'Utilisateur'));\r\n    };\r\n    \r\n    // Show read receipts tooltip\r\n    const showReadReceipts = (message) => {\r\n      showingReadReceiptsFor.value = message;\r\n      \r\n      // Position the tooltip\r\n      nextTick(() => {\r\n        const messageElement = document.querySelector(`[data-message-id=\"${message.id}\"]`);\r\n        if (messageElement && messagesContainer.value) {\r\n          const rect = messageElement.getBoundingClientRect();\r\n          const containerRect = messagesContainer.value.getBoundingClientRect();\r\n          \r\n          readReceiptsTooltipPosition.value = {\r\n            top: rect.bottom - containerRect.top + 5,\r\n            left: rect.right - containerRect.left - 150 // Position from right side\r\n          };\r\n        }\r\n      });\r\n    };\r\n    \r\n    // Hide read receipts tooltip\r\n    const hideReadReceipts = () => {\r\n      showingReadReceiptsFor.value = null;\r\n    };\r\n    \r\n    // Improved function to get user's full name and profile picture from Firestore\r\n    const fetchUserInfo = async (userId) => {\r\n      try {\r\n        const auth = getAuth();\r\n        const currentUser = auth.currentUser;\r\n        \r\n        if (currentUser && currentUser.uid === userId) {\r\n          let profilePicture = currentUser.photoURL;\r\n          let fullName = currentUser.displayName || '';\r\n          const db = getFirestore();\r\n          const userRef = doc(db, 'users', userId);\r\n          const userSnap = await getDoc(userRef);\r\n          \r\n          if (userSnap.exists()) {\r\n            const userData = userSnap.data();\r\n            \r\n            // Get full name if not already available\r\n            if (!fullName) {\r\n              fullName = `${userData.firstName || ''} ${userData.lastName || ''}`.trim();\r\n            }\r\n            \r\n            // Profile picture - use profileImageUrl attribute\r\n            if (userData.profileImageUrl) {\r\n              profilePicture = userData.profileImageUrl;\r\n            }\r\n          }\r\n          \r\n          return { fullName, profilePicture };\r\n        } else {\r\n          // For other users, check Firestore\r\n          const db = getFirestore();\r\n          const userRef = doc(db, 'users', userId);\r\n          const userSnap = await getDoc(userRef);\r\n          \r\n          if (userSnap.exists()) {\r\n            const userData = userSnap.data();\r\n            \r\n            // Get full name\r\n            const fullName = `${userData.firstName || ''} ${userData.lastName || ''}`.trim();\r\n            \r\n            // Get profile picture URL - use profileImageUrl attribute\r\n            const profilePicture = userData.profileImageUrl || null;\r\n            \r\n            return { fullName, profilePicture };\r\n          }\r\n        }\r\n        return { fullName: null, profilePicture: null };\r\n      } catch (error) {\r\n        console.error(`Error fetching user info for ${userId}:`, error);\r\n        return { fullName: null, profilePicture: null };\r\n      }\r\n    };\r\n    \r\n    // Get user display name with caching\r\n    const getUserDisplayName = (userId) => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (currentUser && currentUser.uid === userId) {\r\n        return 'Vous';\r\n      }\r\n      \r\n      if (userNames.value[userId]) {\r\n        return userNames.value[userId];\r\n      }\r\n      \r\n      // Otherwise fetch it and update cache\r\n      fetchUserInfo(userId).then(userInfo => {\r\n        if (userInfo.fullName) {\r\n          userNames.value[userId] = userInfo.fullName;\r\n        } else {\r\n          userNames.value[userId] = userId;\r\n        }\r\n        \r\n        // Also update avatar if available\r\n        if (userInfo.profilePicture) {\r\n          userAvatars.value[userId] = userInfo.profilePicture;\r\n        }\r\n      }).catch(() => {\r\n        userNames.value[userId] = userId; \r\n      });\r\n      \r\n      return userNames.value[userId] || 'Chargement...';\r\n    };\r\n    \r\n    // Load all user info for participants with refreshed data\r\n    const loadAllUserInfo = async (userIds) => {\r\n      const uniqueIds = [...new Set(userIds)];\r\n      for (const userId of uniqueIds) {\r\n        const userInfo = await fetchUserInfo(userId);\r\n        \r\n        if (userInfo.fullName) {\r\n          userNames.value[userId] = userInfo.fullName;\r\n        } else {\r\n          userNames.value[userId] = userId;\r\n        }\r\n        \r\n        if (userInfo.profilePicture) {\r\n          userAvatars.value[userId] = userInfo.profilePicture;\r\n        }\r\n      }\r\n\r\n      // Make sure current user's info is up to date\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (currentUser) {\r\n        const userInfo = await fetchUserInfo(currentUser.uid);\r\n        if (userInfo.profilePicture) {\r\n          userAvatars.value[currentUser.uid] = userInfo.profilePicture;\r\n        } else if (currentUser.photoURL) {\r\n          userAvatars.value[currentUser.uid] = currentUser.photoURL;\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Message editing functions\r\n    const startEditMessage = async (message) => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser || currentUser.uid !== message.senderId) {\r\n        return; \r\n      }\r\n      editingMessageId.value = message.id;\r\n      editMessageContent.value = message.content;\r\n      \r\n      // Focus the edit textarea after it renders\r\n      await nextTick();\r\n      if (editTextarea.value) {\r\n        if (Array.isArray(editTextarea.value)) {\r\n          if (editTextarea.value[0]) {\r\n            editTextarea.value[0].focus();\r\n          }\r\n        } else {\r\n          editTextarea.value.focus();\r\n        }\r\n      }\r\n    };\r\n    \r\n    const saveMessageEdit = async (messageId) => {\r\n      if (!editMessageContent.value.trim()) {\r\n        return; // Don't save empty messages\r\n      }\r\n      \r\n      try {\r\n        const auth = getAuth();\r\n        const currentUser = auth.currentUser;\r\n        \r\n        if (!currentUser) {\r\n          alert(\"Vous devez être connecté pour modifier un message\");\r\n          return;\r\n        }\r\n        \r\n        const db = getFirestore();\r\n        const messageRef = doc(db, 'discussions', props.discussionId, 'messages', messageId);\r\n        \r\n        await updateDoc(messageRef, {\r\n          content: editMessageContent.value.trim(),\r\n          edited: true,\r\n          editedAt: serverTimestamp()\r\n        });\r\n        \r\n        // Reset editing state\r\n        editingMessageId.value = null;\r\n        editMessageContent.value = '';\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la modification du message:\", error);\r\n        alert(\"Une erreur s'est produite lors de la modification du message\");\r\n      }\r\n    };\r\n    \r\n    const cancelMessageEdit = () => {\r\n      editingMessageId.value = null;\r\n      editMessageContent.value = '';\r\n    };\r\n    \r\n    // Message deletion functions\r\n    const confirmDeleteMessage = (messageId) => {\r\n      messageToDelete.value = messageId;\r\n      showDeleteConfirmation.value = true;\r\n    };\r\n    \r\n    const cancelDeleteConfirmation = () => {\r\n      messageToDelete.value = null;\r\n      showDeleteConfirmation.value = false;\r\n    };\r\n    \r\n    const deleteMessage = async () => {\r\n      if (!messageToDelete.value) return;\r\n      \r\n      try {\r\n        const auth = getAuth();\r\n        const currentUser = auth.currentUser;\r\n        \r\n        if (!currentUser) {\r\n          alert(\"Vous devez être connecté pour supprimer un message\");\r\n          return;\r\n        }\r\n        \r\n        const message = responses.value.find(msg => msg.id === messageToDelete.value);\r\n        \r\n        // Verify user owns this message\r\n        if (!message || message.senderId !== currentUser.uid) {\r\n          alert(\"Vous ne pouvez supprimer que vos propres messages\");\r\n          cancelDeleteConfirmation();\r\n          return;\r\n        }\r\n        \r\n        const db = getFirestore();\r\n        const messageRef = doc(db, 'discussions', props.discussionId, 'messages', messageToDelete.value);\r\n        \r\n        // Delete the message document\r\n        await deleteDoc(messageRef);\r\n        \r\n        // If this was the last message in the discussion, update the discussion's lastActivity\r\n        const lastMessage = responses.value[responses.value.length - 1];\r\n        if (lastMessage && lastMessage.id === messageToDelete.value) {\r\n          // Find the new last message\r\n          const newLastMessage = responses.value[responses.value.length - 2];\r\n          \r\n          if (newLastMessage) {\r\n            // Update discussion with info from the new last message\r\n            await updateDoc(doc(db, 'discussions', props.discussionId), {\r\n              lastActivity: newLastMessage.createdAt,\r\n              lastMessageSenderId: newLastMessage.senderId,\r\n              lastMessageText: newLastMessage.content.substring(0, 100)\r\n            });\r\n          } else {\r\n            // No messages left in the discussion\r\n            await updateDoc(doc(db, 'discussions', props.discussionId), {\r\n              lastActivity: serverTimestamp(),\r\n              lastMessageSenderId: null,\r\n              lastMessageText: null\r\n            });\r\n          }\r\n        }\r\n        // Close confirmation modal and clear state\r\n        cancelDeleteConfirmation();\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la suppression du message:\", error);\r\n        alert(\"Une erreur s'est produite lors de la suppression du message\");\r\n        cancelDeleteConfirmation();\r\n      }\r\n    };\r\n    \r\n    // Message reaction functions\r\n    const showReactionPicker = (messageId) => {\r\n      showingReactionsFor.value = messageId;\r\n      \r\n      // Position the picker\r\n      nextTick(() => {\r\n        const messageElement = document.querySelector(`[data-message-id=\"${messageId}\"]`);\r\n        if (messageElement && messagesContainer.value) {\r\n          const rect = messageElement.getBoundingClientRect();\r\n          const containerRect = messagesContainer.value.getBoundingClientRect();\r\n          \r\n          reactionPickerPosition.value = {\r\n            top: rect.bottom - containerRect.top + 5,\r\n            left: rect.left - containerRect.left\r\n          };\r\n        }\r\n      });\r\n    };\r\n    \r\n    const addReaction = async (messageId, emoji) => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser) {\r\n        alert(\"Vous devez être connecté pour réagir à un message\");\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const db = getFirestore();\r\n        const messageRef = doc(db, 'discussions', props.discussionId, 'messages', messageId);\r\n        \r\n        // Toggle reaction (add if not present, remove if already added)\r\n        const message = responses.value.find(msg => msg.id === messageId);\r\n        const hasReacted = hasUserReacted(message, emoji);\r\n        \r\n        if (hasReacted) {\r\n          // Remove the reaction\r\n          await updateDoc(messageRef, {\r\n            [`reactions.${emoji}.${currentUser.uid}`]: deleteField()\r\n          });\r\n          \r\n          // If there are no other users with this reaction, delete the entire emoji entry\r\n          if (message && message.reactions && message.reactions[emoji]) {\r\n            const usersWithReaction = Object.keys(message.reactions[emoji]).filter(id => id !== currentUser.uid);\r\n            if (usersWithReaction.length === 0) {\r\n              await updateDoc(messageRef, {\r\n                [`reactions.${emoji}`]: deleteField()\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          // Add the reaction with timestamp\r\n          await updateDoc(messageRef, {\r\n            [`reactions.${emoji}.${currentUser.uid}`]: serverTimestamp()\r\n          });\r\n        }\r\n        \r\n        // Close reaction picker\r\n        showingReactionsFor.value = null;\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de l'ajout d'une réaction:\", error);\r\n      }\r\n    };\r\n    \r\n    const toggleReaction = (messageId, emoji) => {\r\n      addReaction(messageId, emoji);\r\n    };\r\n    \r\n    const hasUserReacted = (message, emoji) => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser || !message || !message.reactions || !message.reactions[emoji]) {\r\n        return false;\r\n      }\r\n      \r\n      return !!message.reactions[emoji][currentUser.uid];\r\n    };\r\n    \r\n    // Send message\r\n    const sendMessage = async () => {\r\n      if (!newMessage.value.trim()) {\r\n        return; // Don't send empty messages\r\n      }\r\n      \r\n      try {\r\n        const auth = getAuth();\r\n        const currentUser = auth.currentUser;\r\n        \r\n        if (!currentUser) {\r\n          alert(\"Vous devez être connecté pour envoyer un message\");\r\n          return;\r\n        }\r\n        \r\n        const db = getFirestore();\r\n        \r\n        // Add message to the discussion\r\n        const messageRef = await addDoc(collection(db, 'discussions', props.discussionId, 'messages'), {\r\n          content: newMessage.value.trim(),\r\n          senderId: currentUser.uid,\r\n          createdAt: serverTimestamp(),\r\n          readBy: [currentUser.uid], // Mark as read by sender\r\n          lastReadAt: {\r\n            [currentUser.uid]: serverTimestamp()\r\n          }\r\n        });\r\n        \r\n        // Update discussion with new last activity\r\n        await updateDoc(doc(db, 'discussions', props.discussionId), {\r\n          lastActivity: serverTimestamp(),\r\n          lastMessageSenderId: currentUser.uid,\r\n          lastMessageText: newMessage.value.trim().substring(0, 100)\r\n        });\r\n        \r\n        // Clear input\r\n        newMessage.value = '';\r\n        \r\n        // Force scroll to bottom for new messages\r\n        scrollToBottom(true);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de l'envoi du message:\", error);\r\n        alert(\"Une erreur s'est produite lors de l'envoi du message\");\r\n      }\r\n    };\r\n    \r\n    // User presence handling\r\n    const updateUserPresence = async () => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser || !props.discussionId) return;\r\n      \r\n      try {\r\n        const db = getFirestore();\r\n        const presenceRef = doc(db, 'presence', currentUser.uid);\r\n        \r\n        // Update user's online status\r\n        await setDoc(presenceRef, {\r\n          userId: currentUser.uid,\r\n          online: true,\r\n          lastActive: serverTimestamp(),\r\n          currentDiscussion: props.discussionId\r\n        }, { merge: true });\r\n      } catch (error) {\r\n        console.error(\"Error updating presence:\", error);\r\n      }\r\n    };\r\n    \r\n    // Listen for presence changes of all participants\r\n    const listenToPresence = () => {\r\n      if (!discussion.value || !discussion.value.participants) return;\r\n      \r\n      const db = getFirestore();\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      // Clear previous listener if any\r\n      if (presenceUnsubscribe.value) {\r\n        presenceUnsubscribe.value();\r\n        presenceUnsubscribe.value = null;\r\n      }\r\n      \r\n      // Set up listeners for all participants\r\n      const listeners = discussion.value.participants.map(userId => {\r\n        const presenceRef = doc(db, 'presence', userId);\r\n        \r\n        return onSnapshot(presenceRef, (doc) => {\r\n          if (doc.exists()) {\r\n            const presenceData = doc.data();\r\n            // Update user status\r\n            userStatuses.value[userId] = {\r\n              isOnline: presenceData.online || false,\r\n              lastActive: presenceData.lastActive,\r\n              currentDiscussion: presenceData.currentDiscussion\r\n            };\r\n          } else {\r\n            // User has no presence record\r\n            userStatuses.value[userId] = {\r\n              isOnline: false,\r\n              lastActive: null,\r\n              currentDiscussion: null\r\n            };\r\n          }\r\n        }, (error) => {\r\n          console.error(`Error listening to presence for ${userId}:`, error);\r\n        });\r\n      });\r\n      \r\n      // Combine unsubscribe functions\r\n      presenceUnsubscribe.value = () => {\r\n        listeners.forEach(unsubscribe => unsubscribe());\r\n      };\r\n      \r\n      // Set current user as online immediately\r\n      if (currentUser) {\r\n        userStatuses.value[currentUser.uid] = {\r\n          isOnline: true,\r\n          lastActive: new Date(),\r\n          currentDiscussion: props.discussionId\r\n        };\r\n      }\r\n    };\r\n    \r\n    // Load discussion data\r\n    const loadDiscussion = async () => {\r\n      if (!props.discussionId) return;\r\n      \r\n      try {\r\n        const db = getFirestore();\r\n        const discussionDoc = await getDoc(doc(db, 'discussions', props.discussionId));\r\n        \r\n        if (discussionDoc.exists()) {\r\n          discussion.value = { id: discussionDoc.id, ...discussionDoc.data() };\r\n          \r\n          // Load profile info for all participants\r\n          if (discussion.value.participants && discussion.value.participants.length > 0) {\r\n            await loadAllUserInfo(discussion.value.participants);\r\n          }\r\n          \r\n          // Set up presence tracking\r\n          listenToPresence();\r\n          \r\n          // Load messages\r\n          loadMessages();\r\n        } else {\r\n          console.error(\"Discussion not found\");\r\n          discussion.value = null;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading discussion:\", error);\r\n        discussion.value = null;\r\n      }\r\n    };\r\n    \r\n    // Load messages with real-time updates\r\n    const loadMessages = () => {\r\n      if (!props.discussionId) return;\r\n      \r\n      // Clean up existing listener if any\r\n      if (messagesUnsubscribe.value) {\r\n        messagesUnsubscribe.value();\r\n        messagesUnsubscribe.value = null;\r\n      }\r\n      \r\n      const db = getFirestore();\r\n      const messagesQuery = query(\r\n        collection(db, 'discussions', props.discussionId, 'messages'), \r\n        orderBy('createdAt', 'asc')\r\n      );\r\n      \r\n      // Set up the listener\r\n      messagesUnsubscribe.value = onSnapshot(messagesQuery, (snapshot) => {\r\n        // Check if we got results\r\n        if (snapshot.empty) {\r\n          responses.value = [];\r\n          return;\r\n        }\r\n        \r\n        let newMessages = [];\r\n        let userIdsToLoad = new Set();\r\n        \r\n        snapshot.forEach(doc => {\r\n          const messageData = { id: doc.id, ...doc.data() };\r\n          newMessages.push(messageData);\r\n          \r\n          // Collect user IDs we need to load info for\r\n          if (messageData.senderId) {\r\n            userIdsToLoad.add(messageData.senderId);\r\n          }\r\n        });\r\n        \r\n        // Update messages array\r\n        responses.value = newMessages;\r\n        \r\n        // Load missing user info for message senders\r\n        loadAllUserInfo([...userIdsToLoad]);\r\n        \r\n        // Scroll to bottom if we're already at the bottom or for first load\r\n        scrollToBottom();\r\n        \r\n        // Mark visible messages as read after a short delay\r\n        setTimeout(() => {\r\n          markVisibleMessagesAsRead();\r\n        }, 1000);\r\n      }, (error) => {\r\n        console.error(\"Error loading messages:\", error);\r\n      });\r\n    };\r\n    \r\n    // Watch for discussion ID changes\r\n    watch(() => props.discussionId, (newDiscussionId, oldDiscussionId) => {\r\n      if (newDiscussionId && newDiscussionId !== oldDiscussionId) {\r\n        // Clear old data\r\n        discussion.value = null;\r\n        responses.value = [];\r\n        \r\n        // Load new discussion\r\n        loadDiscussion();\r\n      } else if (!newDiscussionId) {\r\n        // Clear data if no discussion is selected\r\n        discussion.value = null;\r\n        responses.value = [];\r\n      }\r\n    }, { immediate: true });\r\n    \r\n    // Set up regular presence updates\r\n    onMounted(() => {\r\n      // Update presence immediately\r\n      updateUserPresence();\r\n      \r\n      // Set up interval for regular updates\r\n      userStatusInterval.value = setInterval(() => {\r\n        updateUserPresence();\r\n      }, 60000); // Update every minute\r\n    });\r\n    \r\n    // Clean up when unmounting\r\n    onUnmounted(() => {\r\n      // Clear presence update interval\r\n      if (userStatusInterval.value) {\r\n        clearInterval(userStatusInterval.value);\r\n        userStatusInterval.value = null;\r\n      }\r\n      \r\n      // Clean up presence listener\r\n      if (presenceUnsubscribe.value) {\r\n        presenceUnsubscribe.value();\r\n        presenceUnsubscribe.value = null;\r\n      }\r\n      \r\n      // Clean up messages listener\r\n      if (messagesUnsubscribe.value) {\r\n        messagesUnsubscribe.value();\r\n        messagesUnsubscribe.value = null;\r\n      }\r\n      \r\n      // Set user as offline when leaving\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (currentUser) {\r\n        try {\r\n          const db = getFirestore();\r\n          const presenceRef = doc(db, 'presence', currentUser.uid);\r\n          setDoc(presenceRef, {\r\n            online: false,\r\n            lastActive: serverTimestamp(),\r\n            currentDiscussion: null\r\n          }, { merge: true });\r\n        } catch (error) {\r\n          console.error(\"Error updating offline status:\", error);\r\n        }\r\n      }\r\n    });\r\n    \r\n    return {\r\n      discussion,\r\n      responses,\r\n      userNames,\r\n      userAvatars,\r\n      userStatuses,\r\n      newMessage,\r\n      messagesContainer,\r\n      messageElements,\r\n      isScrolledToBottom,\r\n      editingMessageId,\r\n      editMessageContent,\r\n      editTextarea,\r\n      availableReactions,\r\n      showingReactionsFor,\r\n      reactionPickerStyle,\r\n      showingReadReceiptsFor,\r\n      readReceiptsTooltipStyle,\r\n      showDeleteConfirmation,\r\n      Hide,\r\n      handleScroll,\r\n      sendMessage,\r\n      formatDate,\r\n      isCurrentUser,\r\n      isCurrentUserMessage,\r\n      getUserInitials,\r\n      startEditMessage,\r\n      saveMessageEdit,\r\n      cancelMessageEdit,\r\n      confirmDeleteMessage,\r\n      cancelDeleteConfirmation,\r\n      deleteMessage,\r\n      showReactionPicker,\r\n      addReaction,\r\n      toggleReaction,\r\n      hasUserReacted,\r\n      getReadStatusClass,\r\n      getReadCount,\r\n      getReadUsersList,\r\n      getUnreadUsersList,\r\n      showReadReceipts,\r\n      hideReadReceipts,\r\n      getUserDisplayName,\r\n      isUserOnline\r\n\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.back-button {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 8px 16px;\r\n  margin-bottom: 16px;\r\n  background-color: #f5f5f5;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.back-button:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.back-icon {\r\n  margin-right: 8px;\r\n  font-size: 16px;\r\n}\r\n\r\n.chat-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: calc(100vh - 120px);\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  background-color: #fff;\r\n}\r\n\r\n.discussion-header {\r\n  padding: 16px;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.discussion-header h2 {\r\n  margin: 0 0 8px 0;\r\n  font-size: 18px;\r\n  color: #333;\r\n}\r\n\r\n.discussion-header p {\r\n  margin: 0;\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n/* Stylish participants bar */\r\n.participants-bar {\r\n  display: flex;\r\n  padding: 10px 16px;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  background-color: #f5f5f5;\r\n  align-items: center;\r\n}\r\n\r\n.participants-label {\r\n  font-weight: 500;\r\n  margin-right: 16px;\r\n  color: #555;\r\n  font-size: 14px;\r\n  white-space: nowrap;\r\n}\r\n\r\n.participants-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 12px;\r\n  overflow-x: auto;\r\n  max-width: calc(100% - 100px);\r\n  padding-bottom: 4px;\r\n}\r\n\r\n.participant-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  max-width: 80px;\r\n}\r\n\r\n.participant-avatar {\r\n  position: relative;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  margin-bottom: 4px;\r\n  background-color: #e0e0e0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.avatar-img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.user-initials {\r\n  font-weight: bold;\r\n  color: #555;\r\n  font-size: 16px;\r\n}\r\n\r\n.participant-name {\r\n  font-size: 12px;\r\n  color: #666;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  max-width: 100%;\r\n  text-align: center;\r\n}\r\n\r\n.status-indicator {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  border: 2px solid #f5f5f5;\r\n}\r\n\r\n.status-indicator.online {\r\n  background-color: #4caf50;\r\n}\r\n\r\n.status-indicator.offline {\r\n  background-color: #9e9e9e;\r\n}\r\n\r\n.messages-container {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 16px;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.no-messages {\r\n  text-align: center;\r\n  color: #888;\r\n  margin-top: 40px;\r\n  font-style: italic;\r\n}\r\n\r\n.message {\r\n  display: flex;\r\n  margin-bottom: 16px;\r\n  position: relative;\r\n}\r\n\r\n.message-avatar {\r\n  margin-right: 12px;\r\n  align-self: flex-start;\r\n}\r\n\r\n.user-avatar {\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  background-color: #e0e0e0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.avatar-img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.avatar-placeholder {\r\n  font-weight: bold;\r\n  color: #555;\r\n  font-size: 14px;\r\n}\r\n\r\n.message-bubble {\r\n  flex: 1;\r\n  position: relative;\r\n  padding: 12px 16px;\r\n  background-color: #fff;\r\n  border-radius: 16px;\r\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\r\n  max-width: 80%;\r\n}\r\n\r\n.sender-message .message-bubble {\r\n  background-color: #e3f2fd;\r\n  margin-left: auto;\r\n}\r\n\r\n.message-content {\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  word-break: break-word;\r\n}\r\n\r\n.edited-indicator {\r\n  font-size: 11px;\r\n  color: #888;\r\n  margin-left: 4px;\r\n}\r\n\r\n.message-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 6px;\r\n  font-size: 12px;\r\n  color: #888;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-name {\r\n  font-weight: 500;\r\n  margin-right: 8px;\r\n}\r\n\r\n.timestamp {\r\n  color: #aaa;\r\n}\r\n\r\n.message-actions {\r\n  display: flex;\r\n  gap: 6px;\r\n  opacity: 0;\r\n  transition: opacity 0.2s;\r\n}\r\n\r\n.message:hover .message-actions {\r\n  opacity: 1;\r\n}\r\n\r\n.action-btn {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 2px 4px;\r\n  color: #757575;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.action-btn:hover {\r\n  background-color: rgba(0, 0, 0, 0.05);\r\n  color: #424242;\r\n}\r\n\r\n.delete-btn:hover {\r\n  color: #f44336;\r\n}\r\n\r\n/* Message reactions */\r\n.message-reactions {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 6px;\r\n  margin-top: 6px;\r\n}\r\n\r\n.reactions-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 4px;\r\n}\r\n\r\n.reaction-badge {\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: #f0f0f0;\r\n  border-radius: 12px;\r\n  padding: 2px 6px;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.reaction-badge:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.reaction-badge.user-reacted {\r\n  background-color: #e3f2fd;\r\n}\r\n\r\n.reaction-emoji {\r\n  margin-right: 4px;\r\n}\r\n\r\n.reaction-count {\r\n  color: #666;\r\n}\r\n\r\n/* Reaction picker */\r\n.reaction-picker {\r\n  position: absolute;\r\n  z-index: 10;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.reaction-picker-content {\r\n  display: flex;\r\n  padding: 6px;\r\n  gap: 8px;\r\n}\r\n\r\n.reaction-btn {\r\n  background: none;\r\n  border: none;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n  padding: 4px;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.reaction-btn:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n/* Read status indicators */\r\n.read-status {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 8px;\r\n  position: relative;\r\n}\r\n\r\n.read-status-icon {\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 10px;\r\n  position: relative;\r\n}\r\n\r\n.not-read {\r\n  border: 1px solid #bdbdbd;\r\n}\r\n\r\n.read {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.partially-read {\r\n  background-color: #bbdefb;\r\n}\r\n\r\n.all-read {\r\n  background-color: #4caf50;\r\n  color: white;\r\n}\r\n\r\n.read-count {\r\n  font-size: 10px;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Read receipts tooltip */\r\n.read-receipts-tooltip {\r\n  position: absolute;\r\n  z-index: 10;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);\r\n  width: 220px;\r\n}\r\n\r\n.read-receipts-content {\r\n  padding: 12px;\r\n  font-size: 12px;\r\n}\r\n\r\n.read-users-list, .unread-users-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 6px 0 12px 0;\r\n}\r\n\r\n.read-user-item, .unread-user-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.read-user-name {\r\n  font-weight: 500;\r\n}\r\n\r\n.read-timestamp {\r\n  color: #888;\r\n}\r\n\r\n/* Edit message interface */\r\n.edit-message-container {\r\n  width: 100%;\r\n}\r\n\r\n.edit-message-input {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  resize: vertical;\r\n  min-height: 60px;\r\n  font-family: inherit;\r\n}\r\n\r\n.edit-actions {\r\n  display: flex;\r\n  gap: 8px;\r\n  margin-top: 8px;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.edit-save-btn, .edit-cancel-btn {\r\n  padding: 4px 12px;\r\n  border-radius: 4px;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n}\r\n\r\n.edit-save-btn {\r\n  background-color: #2196f3;\r\n  color: white;\r\n}\r\n\r\n.edit-cancel-btn {\r\n  background-color: #f5f5f5;\r\n  color: #333;\r\n}\r\n\r\n/* Delete confirmation modal */\r\n.delete-confirmation-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 100;\r\n}\r\n\r\n.delete-modal-content {\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  padding: 24px;\r\n  width: 100%;\r\n  max-width: 400px;\r\n}\r\n\r\n.delete-modal-content h3 {\r\n  margin-top: 0;\r\n  color: #f44336;\r\n}\r\n\r\n.delete-modal-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 12px;\r\n  margin-top: 24px;\r\n}\r\n\r\n.delete-confirm-btn, .delete-cancel-btn {\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.delete-confirm-btn {\r\n  background-color: #f44336;\r\n  color: white;\r\n}\r\n\r\n.delete-cancel-btn {\r\n  background-color: #f5f5f5;\r\n  color: #333;\r\n}\r\n\r\n/* Message input */\r\n.message-input-container {\r\n  padding: 16px;\r\n  border-top: 1px solid #e0e0e0;\r\n  background-color: #fff;\r\n}\r\n\r\n.message-form {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  padding: 10px 16px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 24px;\r\n  font-size: 14px;\r\n  outline: none;\r\n  transition: border-color 0.2s;\r\n}\r\n\r\n.message-input:focus {\r\n  border-color: #2196f3;\r\n}\r\n\r\n.send-button {\r\n  background-color: #2196f3;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 24px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.send-button:hover {\r\n  background-color: #1976d2;\r\n}\r\n\r\n.loading, .no-discussion-selected {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 300px;\r\n  color: #666;\r\n  font-style: italic;\r\n}\r\n</style>\r\n<style scoped>\r\n.chat-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\r\n  background-color: #ffffff;\r\n}\r\n\r\n.back-button {\r\n  margin: 16px;\r\n  padding: 8px 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: #f2f2f2;\r\n  border: none;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #333;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.back-button:hover {\r\n  background-color: #e5e5e5;\r\n}\r\n\r\n.back-icon {\r\n  margin-right: 8px;\r\n  font-size: 16px;\r\n}\r\n\r\n.discussion-header {\r\n  padding: 16px 20px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  background-color: #ffffff;\r\n}\r\n\r\n.discussion-header h2 {\r\n  margin: 0 0 8px 0;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n.discussion-header p {\r\n  margin: 0;\r\n  font-size: 14px;\r\n  color: #666;\r\n}\r\n\r\n.participants-bar {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px 20px;\r\n  background-color: #f9f9f9;\r\n  border-bottom: 1px solid #eaeaea;\r\n}\r\n\r\n.participants-label {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #555;\r\n  margin-right: 16px;\r\n}\r\n\r\n.participants-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 12px;\r\n}\r\n\r\n.participant-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.participant-avatar {\r\n  position: relative;\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  background-color: #e1e1f9;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  color: #5a5ad2;\r\n}\r\n\r\n.status-indicator {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 10px;\r\n  height: 10px;\r\n  border-radius: 50%;\r\n  border: 2px solid #f9f9f9;\r\n}\r\n\r\n.status-indicator.online {\r\n  background-color: #4caf50;\r\n}\r\n\r\n.status-indicator.offline {\r\n  background-color: #bdbdbd;\r\n}\r\n\r\n.participant-name {\r\n  font-size: 14px;\r\n  color: #444;\r\n}\r\n\r\n.messages-container {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 16px;\r\n  background-color: #f9f9fb;\r\n  scrollbar-width: thin;\r\n  scrollbar-color: #d4d4d4 #f9f9fb;\r\n}\r\n\r\n.messages-container::-webkit-scrollbar {\r\n  width: 6px;\r\n}\r\n\r\n.messages-container::-webkit-scrollbar-track {\r\n  background: #f9f9fb;\r\n}\r\n\r\n.messages-container::-webkit-scrollbar-thumb {\r\n  background-color: #d4d4d4;\r\n  border-radius: 10px;\r\n}\r\n\r\n.no-messages {\r\n  text-align: center;\r\n  margin: 40px 0;\r\n  color: #888;\r\n  font-style: italic;\r\n}\r\n\r\n.message {\r\n  display: flex;\r\n  margin-bottom: 16px;\r\n  max-width: 85%;\r\n}\r\n\r\n.sender-message {\r\n  margin-left: auto;\r\n  flex-direction: row-reverse;\r\n}\r\n\r\n.receiver-message {\r\n  margin-right: auto;\r\n}\r\n\r\n.message-avatar {\r\n  margin: 0 8px;\r\n  align-self: flex-end;\r\n}\r\n\r\n.user-avatar {\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #e1e1f9;\r\n  color: #5a5ad2;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n}\r\n\r\n.avatar-img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.avatar-placeholder {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.message-bubble {\r\n  padding: 12px 16px;\r\n  border-radius: 18px;\r\n  position: relative;\r\n  max-width: calc(100% - 60px);\r\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.sender-message .message-bubble {\r\n  background-color: #e7f3ff;\r\n  color: #333;\r\n  border-bottom-right-radius: 4px;\r\n}\r\n\r\n.receiver-message .message-bubble {\r\n  background-color: #ffffff;\r\n  color: #333;\r\n  border-bottom-left-radius: 4px;\r\n}\r\n\r\n.message-content {\r\n  margin-bottom: 6px;\r\n  word-wrap: break-word;\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.edited-indicator {\r\n  font-size: 12px;\r\n  color: #a0a0a0;\r\n  margin-left: 6px;\r\n}\r\n\r\n.message-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 6px;\r\n}\r\n\r\n.user-info {\r\n  font-size: 12px;\r\n  color: #888;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-name {\r\n  margin-right: 8px;\r\n  font-weight: 500;\r\n}\r\n\r\n.timestamp {\r\n  font-size: 11px;\r\n}\r\n\r\n.message-actions {\r\n  display: flex;\r\n  opacity: 0;\r\n  transition: opacity 0.2s;\r\n}\r\n\r\n.message:hover .message-actions {\r\n  opacity: 1;\r\n}\r\n\r\n.action-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #999;\r\n  cursor: pointer;\r\n  margin-left: 6px;\r\n  padding: 4px;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.action-btn:hover {\r\n  background-color: rgba(0, 0, 0, 0.05);\r\n  color: #666;\r\n}\r\n\r\n.delete-btn:hover {\r\n  color: #ff4d4f;\r\n}\r\n\r\n.read-status {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 6px;\r\n  cursor: pointer;\r\n}\r\n\r\n.read-status-icon {\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 10px;\r\n  position: relative;\r\n}\r\n\r\n.read-status-icon.not-read {\r\n  border: 1px solid #ddd;\r\n}\r\n\r\n.read-status-icon.partially-read {\r\n  background-color: #e6f7ff;\r\n  border: 1px solid #91d5ff;\r\n}\r\n\r\n.read-status-icon.all-read {\r\n  background-color: #52c41a;\r\n  color: white;\r\n}\r\n\r\n.read-count {\r\n  font-size: 10px;\r\n  font-weight: bold;\r\n}\r\n\r\n.message-reactions {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-top: 4px;\r\n}\r\n\r\n.reactions-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 4px;\r\n}\r\n\r\n.reaction-badge {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 2px 6px;\r\n  border-radius: 12px;\r\n  background-color: #f0f0f0;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.reaction-badge:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.reaction-badge.user-reacted {\r\n  background-color: #e6f7ff;\r\n  border: 1px solid #91d5ff;\r\n}\r\n\r\n.reaction-emoji {\r\n  margin-right: 4px;\r\n}\r\n\r\n.reaction-count {\r\n  font-size: 11px;\r\n  font-weight: 500;\r\n}\r\n\r\n.reaction-picker {\r\n  position: absolute;\r\n  z-index: 10;\r\n  background-color: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n  padding: 8px;\r\n}\r\n\r\n.reaction-picker-content {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 8px;\r\n}\r\n\r\n.reaction-btn {\r\n  background: none;\r\n  border: none;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n  padding: 6px;\r\n  border-radius: 6px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.reaction-btn:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.read-receipts-tooltip {\r\n  position: absolute;\r\n  z-index: 10;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n  padding: 12px;\r\n  width: 220px;\r\n  font-size: 13px;\r\n}\r\n\r\n.read-receipts-content {\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.read-users-list, .unread-users-list {\r\n  margin: 8px 0;\r\n  padding-left: 16px;\r\n}\r\n\r\n.read-user-item, .unread-user-item {\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.read-user-name {\r\n  font-weight: 500;\r\n  margin-right: 8px;\r\n}\r\n\r\n.read-timestamp {\r\n  color: #999;\r\n  font-size: 11px;\r\n}\r\n\r\n.edit-message-container {\r\n  width: 100%;\r\n}\r\n\r\n.edit-message-input {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #d9d9d9;\r\n  border-radius: 8px;\r\n  resize: vertical;\r\n  min-height: 60px;\r\n  font-family: inherit;\r\n  font-size: 14px;\r\n}\r\n\r\n.edit-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 8px;\r\n  gap: 8px;\r\n}\r\n\r\n.edit-save-btn, .edit-cancel-btn {\r\n  padding: 4px 12px;\r\n  border-radius: 4px;\r\n  font-size: 13px;\r\n  cursor: pointer;\r\n}\r\n\r\n.edit-save-btn {\r\n  background-color: #1890ff;\r\n  color: white;\r\n  border: none;\r\n}\r\n\r\n.edit-cancel-btn {\r\n  background-color: #f5f5f5;\r\n  border: 1px solid #d9d9d9;\r\n  color: #333;\r\n}\r\n\r\n.delete-confirmation-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 20;\r\n}\r\n\r\n.delete-modal-content {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  width: 320px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.delete-modal-content h3 {\r\n  margin-top: 0;\r\n  font-size: 18px;\r\n}\r\n\r\n.delete-modal-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 20px;\r\n  gap: 12px;\r\n}\r\n\r\n.delete-confirm-btn, .delete-cancel-btn {\r\n  padding: 6px 14px;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n}\r\n\r\n.delete-confirm-btn {\r\n  background-color: #ff4d4f;\r\n  color: white;\r\n  border: none;\r\n}\r\n\r\n.delete-cancel-btn {\r\n  background-color: #f5f5f5;\r\n  border: 1px solid #d9d9d9;\r\n  color: #333;\r\n}\r\n\r\n.message-input-container {\r\n  padding: 16px;\r\n  background-color: #ffffff;\r\n  border-top: 1px solid #f0f0f0;\r\n}\r\n\r\n.message-form {\r\n  display: flex;\r\n  gap: 12px;\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  padding: 12px 16px;\r\n  border: 1px solid #e8e8e8;\r\n  border-radius: 24px;\r\n  font-size: 14px;\r\n  outline: none;\r\n  transition: border-color 0.2s;\r\n}\r\n\r\n.message-input:focus {\r\n  border-color: #1890ff;\r\n}\r\n\r\n.send-button {\r\n  background-color: #1890ff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 24px;\r\n  padding: 0 18px;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.send-button:hover {\r\n  background-color: #40a9ff;\r\n}\r\n\r\n.no-discussion-selected {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  color: #999;\r\n  font-size: 16px;\r\n  font-style: italic;\r\n}\r\n\r\n.loading {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 300px;\r\n  color: #888;\r\n}\r\n</style>\r\n<style scoped>\r\n/* Base styles */\r\n.chat-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: calc(100vh - 120px);\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n  margin: 10px;\r\n  position: relative;\r\n}\r\n\r\n.discussion-info {\r\n  padding: 15px;\r\n  background-color: #ffffff;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\nh2 {\r\n  margin: 0 0 5px 0;\r\n  font-size: 1.5rem;\r\n  color: #333;\r\n}\r\n\r\n.messages-container {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 15px;\r\n  position: relative;\r\n}\r\n\r\n.message-input-container {\r\n  padding: 15px;\r\n  background-color: #ffffff;\r\n  border-top: 1px solid #e0e0e0;\r\n}\r\n\r\n.message-form {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  padding: 12px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 20px;\r\n  font-size: 14px;\r\n  outline: none;\r\n  transition: border 0.3s;\r\n}\r\n\r\n.message-input:focus {\r\n  border-color: #4a90e2;\r\n}\r\n\r\n.send-button {\r\n  background-color: #4a90e2;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 20px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.send-button:hover {\r\n  background-color: #3a7fcb;\r\n}\r\n\r\n/* Message styles */\r\n.message {\r\n  display: flex;\r\n  margin-bottom: 15px;\r\n  position: relative;\r\n}\r\n\r\n.sender-message {\r\n  flex-direction: row-reverse;\r\n}\r\n\r\n.message-bubble {\r\n  max-width: 70%;\r\n  padding: 12px 15px;\r\n  border-radius: 18px;\r\n  position: relative;\r\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.sender-message .message-bubble {\r\n  background-color: #d1e7ff;\r\n  border-top-right-radius: 2px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.receiver-message .message-bubble {\r\n  background-color: #ffffff;\r\n  border-top-left-radius: 2px;\r\n  margin-left: 10px;\r\n}\r\n\r\n.message-content {\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  word-break: break-word;\r\n}\r\n\r\n.message-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 5px;\r\n  font-size: 11px;\r\n  color: #888;\r\n}\r\n\r\n.user-name {\r\n  font-weight: 500;\r\n  margin-right: 5px;\r\n}\r\n\r\n.timestamp {\r\n  color: #aaa;\r\n}\r\n\r\n.no-messages {\r\n  text-align: center;\r\n  color: #888;\r\n  margin-top: 40px;\r\n}\r\n\r\n.back-button {\r\n  display: flex;\r\n  align-items: center;\r\n  background: none;\r\n  border: none;\r\n  color: #4a90e2;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  padding: 10px;\r\n  margin: 5px;\r\n}\r\n\r\n.back-icon {\r\n  margin-right: 5px;\r\n  font-size: 16px;\r\n}\r\n\r\n.no-discussion-selected {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 200px;\r\n  color: #666;\r\n  font-size: 16px;\r\n}\r\n\r\n.loading {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 200px;\r\n  color: #666;\r\n}\r\n\r\n/* User avatar styles */\r\n.message-avatar {\r\n  margin: 0 8px;\r\n}\r\n\r\n.user-avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  background-color: #e0e0e0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  overflow: hidden;\r\n}\r\n\r\n.user-avatar.small {\r\n  width: 30px;\r\n  height: 30px;\r\n}\r\n\r\n.avatar-img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.avatar-placeholder {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #666;\r\n}\r\n\r\n.user-avatar.small .avatar-placeholder {\r\n  font-size: 12px;\r\n}\r\n\r\n/* Message actions */\r\n.message-actions {\r\n  display: flex;\r\n  opacity: 0;\r\n  transition: opacity 0.2s;\r\n}\r\n\r\n.message:hover .message-actions {\r\n  opacity: 1;\r\n}\r\n\r\n.action-btn {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  margin-left: 8px;\r\n  color: #888;\r\n  font-size: 14px;\r\n}\r\n\r\n.action-btn:hover {\r\n  color: #4a90e2;\r\n}\r\n\r\n/* Edit message styles */\r\n.edit-message-container {\r\n  width: 100%;\r\n}\r\n\r\n.edit-message-input {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  resize: vertical;\r\n  min-height: 60px;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.edit-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 8px;\r\n}\r\n\r\n.edit-save-btn, .edit-cancel-btn {\r\n  padding: 4px 10px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n}\r\n\r\n.edit-save-btn {\r\n  background-color: #4a90e2;\r\n  color: white;\r\n  border: none;\r\n}\r\n\r\n.edit-cancel-btn {\r\n  background-color: transparent;\r\n  border: 1px solid #ccc;\r\n  color: #666;\r\n}\r\n\r\n.edited-indicator {\r\n  font-size: 11px;\r\n  color: #888;\r\n  margin-left: 5px;\r\n  font-style: italic;\r\n}\r\n\r\n/* Reaction styles */\r\n.reaction-picker {\r\n  position: absolute;\r\n  z-index: 100;\r\n  background-color: white;\r\n  border-radius: 24px;\r\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);\r\n  padding: 8px;\r\n}\r\n\r\n.reaction-picker-content {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n}\r\n\r\n.reaction-btn {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 18px;\r\n  padding: 5px;\r\n  border-radius: 50%;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.reaction-btn:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.message-reactions {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-top: 5px;\r\n}\r\n\r\n.reactions-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 5px;\r\n}\r\n\r\n.reaction-badge {\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: #f1f1f1;\r\n  border-radius: 12px;\r\n  padding: 3px 6px;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.reaction-badge.user-reacted {\r\n  background-color: #e1f0ff;\r\n}\r\n\r\n.reaction-badge:hover {\r\n  background-color: #e5e5e5;\r\n}\r\n\r\n.reaction-badge.user-reacted:hover {\r\n  background-color: #d1e6ff;\r\n}\r\n\r\n.reaction-emoji {\r\n  font-size: 14px;\r\n  margin-right: 3px;\r\n}\r\n\r\n.reaction-count {\r\n  font-size: 11px;\r\n  color: #666;\r\n}\r\n\r\n/* User status section */\r\n.active-users {\r\n  margin-top: 15px;\r\n  padding-top: 10px;\r\n  border-top: 1px solid #f0f0f0;\r\n}\r\n\r\n.status-heading {\r\n  font-size: 14px;\r\n  color: #666;\r\n  margin: 0 0 8px 0;\r\n}\r\n\r\n.user-status {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.status-indicator {\r\n  width: 8px;\r\n  height: 8px;\r\n  border-radius: 50%;\r\n  margin: 0 8px;\r\n}\r\n\r\n.status-indicator.online {\r\n  background-color: #4caf50;\r\n}\r\n\r\n.status-indicator.offline {\r\n  background-color: #ccc;\r\n}\r\n\r\n.status-name {\r\n  font-size: 13px;\r\n  color: #333;\r\n}\r\n\r\n.status-activity {\r\n  font-size: 12px;\r\n  color: #888;\r\n  font-style: italic;\r\n  margin-left: 5px;\r\n}\r\n/* Participants display styling */\r\n.discussion-header {\r\n  padding: 15px 15px 5px 15px;\r\n}\r\n\r\n.participants-bar {\r\n  padding: 5px 15px 15px 15px;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  background-color: #ffffff;\r\n}\r\n\r\n.participants-label {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #333;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.participants-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n}\r\n\r\n.participant-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 60px;\r\n}\r\n\r\n.participant-avatar {\r\n  position: relative;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  background-color: #e5e5e5;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.user-initials {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #555;\r\n}\r\n\r\n.participant-name {\r\n  font-size: 12px;\r\n  color: #666;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  width: 100%;\r\n}\r\n\r\n.status-indicator {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 10px;\r\n  height: 10px;\r\n  border-radius: 50%;\r\n  border: 2px solid #fff;\r\n}\r\n\r\n.status-indicator.online {\r\n  background-color: #4caf50;\r\n}\r\n\r\n.status-indicator.offline {\r\n  background-color: #ccc;\r\n}\r\n\r\n/* You can add additional responsive adjustments if needed */\r\n@media (max-width: 640px) {\r\n  .participants-list {\r\n    gap: 5px;\r\n  }\r\n  \r\n  .participant-item {\r\n    width: 50px;\r\n  }\r\n  \r\n  .participant-avatar {\r\n    width: 35px;\r\n    height: 35px;\r\n  }\r\n  \r\n  .user-initials {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .participant-name {\r\n    font-size: 11px;\r\n  }\r\n}\r\n\r\n</style>"],"mappings":";;;;;;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;EAK2B,SAAM;;;EAEtB,SAAM;AAAmB;;EAPpCA,GAAA;AAAA;;EAaW,SAAM;AAAkB;;EAEtB,SAAM;AAAmB;;EAGrB,SAAM;AAAoB;iBAlB3C;;EAAAA,GAAA;EAoB0B,SAAM;;;EAGf,SAAM;AAAkB;;EAvBzCA,GAAA;EA+B2C,SAAM;;kBA/BjD;;EAyCe,SAAM;AAAgB;;EACpB,SAAM;AAAa;kBA1CpC;;EAAAA,GAAA;EA4C0B,SAAM;;;EAIjB,SAAM;AAAgB;;EAhDrCA,GAAA;EAkDwD,SAAM;;kBAlD9D;;EA0DmB,SAAM;AAAc;kBA1DvC;;EAAAA,GAAA;EA+DwB,SAAM;;;EA/D9BA,GAAA;EAiE0C,SAAM;;;EAI/B,SAAM;AAAmB;;EArE1CA,GAAA;EAuEyF,SAAM;;kBAvE/F;;EA4EwB,SAAM;AAAgB;;EACtB,SAAM;AAAgB;;EAK7B,SAAM;AAAc;;EAClB,SAAM;AAAW;;EACd,SAAM;AAAW;;EApFvCA,GAAA;EAqFsB,SAAM;;;EArF5BA,GAAA;EAwFmB,SAAM;;kBAxFzB;kBAAA;kBAAA;kBAAA;;EAAAA,GAAA;EA2G2D,SAAM;;;EAUlD,SAAM;AAAuB;;EArH5CA,GAAA;AAAA;;EAwHkB,SAAM;AAAiB;;EAEjB,SAAM;AAAgB;;EACtB,SAAM;AAAgB;;EA3H9CA,GAAA;AAAA;;EAiIkB,SAAM;AAAmB;;EAjI3CA,GAAA;AAAA;;EA+Ie,SAAM;AAAyB;kBA/I9C;;EAAAA,GAAA;EAyJ2C,SAAM;;;EAClC,SAAM;AAAsB;;EAG1B,SAAM;AAAsB;;EAQlC,SAAM;AAAyB;;EArK1CA,GAAA;EAiLgB,SAAM;;;EAjLtBA,GAAA;EAqLc,SAAM;;;SApLPC,MAAA,CAAAC,YAAY,I,cAAvBC,mBAAA,CAmLM,OApLRC,UAAA,GAEIC,mBAAA,CAES;IAFAC,OAAK,EAAAC,MAAA,QAAAA,MAAA;MAAA,OAAEC,MAAA,CAAAC,IAAA,IAAAD,MAAA,CAAAC,IAAA,CAAAC,KAAA,CAAAF,MAAA,EAAAG,SAAA,CAAI;IAAA;IAAE,SAAM;kCAC1BN,mBAAA,CAAgC;IAA1B,SAAM;EAAW,GAAC,GAAC,qBAH/BO,gBAAA,CAGsC,0BAClC,E,IACWJ,MAAA,CAAAK,UAAU,I,cAArBV,mBAAA,CA2KM,OA3KNW,UA2KM,GA1KJC,mBAAA,sDAAyD,EACzDV,mBAAA,CAGM,OAHNW,UAGM,GAFJX,mBAAA,CAA+B,YAAAY,gBAAA,CAAxBT,MAAA,CAAAK,UAAU,CAACK,KAAK,kBACdV,MAAA,CAAAK,UAAU,CAACM,WAAW,I,cAA/BhB,mBAAA,CAAiE,KATzEiB,UAAA,EAAAH,gBAAA,CAS4CT,MAAA,CAAAK,UAAU,CAACM,WAAW,oBATlEJ,mBAAA,e,GAYMA,mBAAA,oCAAuC,EACvCV,mBAAA,CAeM,OAfNgB,UAeM,G,4BAdJhB,mBAAA,CAAkD;IAA7C,SAAM;EAAoB,GAAC,cAAY,sBAC5CA,mBAAA,CAYM,OAZNiB,UAYM,I,kBAXJnB,mBAAA,CAUMoB,SAAA,QA1BhBC,WAAA,CAgBgChB,MAAA,CAAAK,UAAU,CAACY,YAAY,EAhBvD,UAgBsBC,MAAM;yBAAlBvB,mBAAA,CAUM;MAV0CH,GAAG,EAAE0B,MAAM;MACtD,SAAM;QACTrB,mBAAA,CAIM,OAJNsB,UAIM,GAHOnB,MAAA,CAAAoB,WAAW,CAACF,MAAM,K,cAA7BvB,mBAAA,CAA2F;MAnBzGH,GAAA;MAmB+C6B,GAAG,EAAErB,MAAA,CAAAoB,WAAW,CAACF,MAAM;MAAGI,GAAG,EAAC,QAAQ;MAAC,SAAM;4BAnB5FC,UAAA,M,cAoBc5B,mBAAA,CAAqE,OAArE6B,UAAqE,EAAAf,gBAAA,CAAhCT,MAAA,CAAAyB,eAAe,CAACP,MAAM,oBAC3DrB,mBAAA,CAAkH;MAA7G,SArBnB6B,eAAA,EAqByB,kBAAkB;QAAA,UAAqB1B,MAAA,CAAA2B,YAAY,CAACT,MAAM;QAAA,YAAelB,MAAA,CAAA2B,YAAY,CAACT,MAAM;MAAA;+BAEzGrB,mBAAA,CAEM,OAFN+B,WAEM,EAAAnB,gBAAA,CADDT,MAAA,CAAA6B,aAAa,CAACX,MAAM,aAAclB,MAAA,CAAA8B,SAAS,CAACZ,MAAM,mC;sCAM7DrB,mBAAA,CAqIM;IArID,SAAM,oBAAoB;IAACkC,GAAG,EAAC,mBAAmB;IAAEC,QAAM,EAAAjC,MAAA,QAAAA,MAAA;MAAA,OAAEC,MAAA,CAAAiC,YAAA,IAAAjC,MAAA,CAAAiC,YAAA,CAAA/B,KAAA,CAAAF,MAAA,EAAAG,SAAA,CAAY;IAAA;MAChEH,MAAA,CAAAkC,SAAS,CAACC,MAAM,U,cAA3BxC,mBAAA,CAEM,OAFNyC,WAEM,EAFiD,oEAEvD,KAjCR7B,mBAAA,iB,kBAmCQZ,mBAAA,CA8EMoB,SAAA,QAjHdC,WAAA,CAmC+BhB,MAAA,CAAAkC,SAAS,EAnCxC,UAmCoBG,OAAO;yBAAnB1C,mBAAA,CA8EM;MA9E6BH,GAAG,EAAE6C,OAAO,CAACC,EAAE;MAC3C,SApCfZ,eAAA;QAAA,kBAoCyC1B,MAAA,CAAAuC,oBAAoB,CAACF,OAAO;QAAA,qBAAwBrC,MAAA,CAAAuC,oBAAoB,CAACF,OAAO;MAAA,GACrG,SAAS;MACd,iBAAe,EAAEA,OAAO,CAACC,EAAE;MAtC1CE,OAAA;MAuCcT,GAAG,EAAC;QACRxB,mBAAA,0BAA6B,EAC7BV,mBAAA,CAKM,OALN4C,WAKM,GAJJ5C,mBAAA,CAGM,OAHN6C,WAGM,GAFO1C,MAAA,CAAAoB,WAAW,CAACiB,OAAO,CAACM,QAAQ,K,cAAvChD,mBAAA,CAA+G;MA3C7HH,GAAA;MA2CyD6B,GAAG,EAAErB,MAAA,CAAAoB,WAAW,CAACiB,OAAO,CAACM,QAAQ;MAAGrB,GAAG,EAAC,QAAQ;MAAC,SAAM;4BA3ChHsB,WAAA,M,cA4CcjD,mBAAA,CAAoF,OAApFkD,WAAoF,EAAApC,gBAAA,CAA1CT,MAAA,CAAAyB,eAAe,CAACY,OAAO,CAACM,QAAQ,mB,KAI9E9C,mBAAA,CAgEM,OAhENiD,WAgEM,GA/DJvC,mBAAA,mEAAsE,EAC3DP,MAAA,CAAA+C,gBAAgB,KAAKV,OAAO,CAACC,EAAE,I,cAA1C3C,mBAAA,CAYM,OAZNqD,WAYM,G,gBAXJnD,mBAAA,CAMY;MAzD1B,uBAAAE,MAAA,QAAAA,MAAA,gBAAAkD,MAAA;QAAA,OAoDyBjD,MAAA,CAAAkD,kBAAkB,GAAAD,MAAA;MAAA;MAC3B,SAAM,oBAAoB;MArD1CT,OAAA;MAsDgBT,GAAG,EAAC,cAAc;MACjBoB,OAAK,GAvDtBC,SAAA,CAAAC,cAAA,WAAAJ,MAAA;QAAA,OAuDoCjD,MAAA,CAAAsD,eAAe,CAACjB,OAAO,CAACC,EAAE;MAAA,2B,0BAvD9Dc,SAAA;QAAA,OAwD+BpD,MAAA,CAAAuD,iBAAA,IAAAvD,MAAA,CAAAuD,iBAAA,CAAArD,KAAA,CAAAF,MAAA,EAAAG,SAAA,CAAiB;MAAA;6CAxDhDqD,WAAA,I,cAoDyBxD,MAAA,CAAAkD,kBAAkB,E,GAM7BrD,mBAAA,CAGM,OAHN4D,WAGM,GAFJ5D,mBAAA,CAAuF;MAA9EC,OAAK,WAALA,OAAKA,CAAAmD,MAAA;QAAA,OAAEjD,MAAA,CAAAsD,eAAe,CAACjB,OAAO,CAACC,EAAE;MAAA;MAAG,SAAM;OAAgB,aAAW,iBA3D9FoB,WAAA,GA4DgB7D,mBAAA,CAA2E;MAAlEC,OAAK,EAAAC,MAAA,QAAAA,MAAA;QAAA,OAAEC,MAAA,CAAAuD,iBAAA,IAAAvD,MAAA,CAAAuD,iBAAA,CAAArD,KAAA,CAAAF,MAAA,EAAAG,SAAA,CAAiB;MAAA;MAAE,SAAM;OAAkB,SAAO,E,sBAGtER,mBAAA,CAGM,OAHNgE,WAGM,GAlElBvD,gBAAA,CAAAK,gBAAA,CAgEgB4B,OAAO,CAACuB,OAAO,IAAE,GACnB,iBAAYvB,OAAO,CAACwB,MAAM,I,cAA1BlE,mBAAA,CAAqE,QAArEmE,WAAqE,EAAhB,WAAS,KAjE5EvD,mBAAA,e,IAoEYA,mBAAA,uBAA0B,EAC1BV,mBAAA,CAWM,OAXNkE,WAWM,GAVJxD,mBAAA,gCAAmC,EACxB8B,OAAO,CAAC2B,SAAS,IAAIC,MAAM,CAACC,IAAI,CAAC7B,OAAO,CAAC2B,SAAS,EAAE7B,MAAM,Q,cAArExC,mBAAA,CAQM,OARNwE,WAQM,I,kBAPJxE,mBAAA,CAMMoB,SAAA,QA9EtBC,WAAA,CAwE8CqB,OAAO,CAAC2B,SAAS,EAxE/D,UAwE6BI,KAAK,EAAEC,KAAK;2BAAzB1E,mBAAA,CAMM;QAN4CH,GAAG,EAAE6E,KAAK;QACvD,SAzErB3C,eAAA,EAyE2B,gBAAgB;UAAA,gBACI1B,MAAA,CAAAsE,cAAc,CAACjC,OAAO,EAAEgC,KAAK;QAAA;QACtDvE,OAAK,WAALA,OAAKA,CAAAmD,MAAA;UAAA,OAAEjD,MAAA,CAAAuE,cAAc,CAAClC,OAAO,CAACC,EAAE,EAAE+B,KAAK;QAAA;UAC3CxE,mBAAA,CAA+C,QAA/C2E,WAA+C,EAAA/D,gBAAA,CAAf4D,KAAK,kBACrCxE,mBAAA,CAAmE,QAAnE4E,WAAmE,EAAAhE,gBAAA,CAAnCwD,MAAM,CAACC,IAAI,CAACE,KAAK,EAAEjC,MAAM,iB,yBA7E3EuC,WAAA;wCAAAnE,mBAAA,e,GAkFYV,mBAAA,CA6BM,OA7BN8E,WA6BM,GA5BJ9E,mBAAA,CAGM,OAHN+E,WAGM,GAFJ/E,mBAAA,CAAkH,QAAlHgF,WAAkH,EAAApE,gBAAA,CAAvFT,MAAA,CAAAuC,oBAAoB,CAACF,OAAO,aAAarC,MAAA,CAAA8E,kBAAkB,CAACzC,OAAO,CAACM,QAAQ,mBACzEN,OAAO,CAAC0C,SAAS,I,cAA/CpF,mBAAA,CAA2F,QAA3FqF,WAA2F,EAAAvE,gBAAA,CAAvCT,MAAA,CAAAiF,UAAU,CAAC5C,OAAO,CAAC0C,SAAS,qBArFhGxE,mBAAA,e,IAwFkDP,MAAA,CAAA+C,gBAAgB,I,cAApDpD,mBAAA,CAsBM,OAtBNuF,WAsBM,GArBJ3E,mBAAA,kCAAqC,EACvBP,MAAA,CAAAuC,oBAAoB,CAACF,OAAO,K,cAA1C1C,mBAAA,CAES;MA5FzBH,GAAA;MA0F8DM,OAAK,WAALA,OAAKA,CAAAmD,MAAA;QAAA,OAAEjD,MAAA,CAAAmF,gBAAgB,CAAC9C,OAAO;MAAA;MAAG,SAAM,YAAY;MAAC3B,KAAK,EAAC;uDACvGb,mBAAA,CAAgC;MAA1B,SAAM;IAAW,GAAC,GAAC,oB,mBA3F3CuF,WAAA,KAAA7E,mBAAA,gBA8FgBA,mBAAA,oCAAuC,EACzBP,MAAA,CAAAuC,oBAAoB,CAACF,OAAO,K,cAA1C1C,mBAAA,CAES;MAjGzBH,GAAA;MA+F8DM,OAAK,WAALA,OAAKA,CAAAmD,MAAA;QAAA,OAAEjD,MAAA,CAAAqF,oBAAoB,CAAChD,OAAO,CAACC,EAAE;MAAA;MAAG,SAAM,uBAAuB;MAAC5B,KAAK,EAAC;uDACzHb,mBAAA,CAAoC;MAA9B,SAAM;IAAa,GAAC,KAAG,oB,mBAhG/CyF,WAAA,KAAA/E,mBAAA,gBAmGgBA,mBAAA,sCAAyC,EACzCV,mBAAA,CAES;MAFAC,OAAK,WAALA,OAAKA,CAAAmD,MAAA;QAAA,OAAEjD,MAAA,CAAAuF,kBAAkB,CAAClD,OAAO,CAACC,EAAE;MAAA;MAAG,SAAM,YAAY;MAAC5B,KAAK,EAAC;uDACvEb,mBAAA,CAAqC;MAA/B,SAAM;IAAe,GAAC,IAAE,oB,mBArGhD2F,WAAA,GAwGgBjF,mBAAA,oEAAuE,EAC5DP,MAAA,CAAAuC,oBAAoB,CAACF,OAAO,K,cAAvC1C,mBAAA,CAIM;MA7GtBH,GAAA;MAyG0D,SAAM,aAAa;MAAEiG,YAAU,WAAVA,YAAUA,CAAAxC,MAAA;QAAA,OAAEjD,MAAA,CAAA0F,gBAAgB,CAACrD,OAAO;MAAA;MAAIsD,YAAU,EAAA5F,MAAA,QAAAA,MAAA,gBAAAkD,MAAA;QAAA,OAAEjD,MAAA,CAAA4F,gBAAgB;MAAA;QACjI/F,mBAAA,CAEO;MAFD,SA1GxB6B,eAAA,EA0G8B,kBAAkB,EAAS1B,MAAA,CAAA6F,kBAAkB,CAACxD,OAAO;QACnDrC,MAAA,CAAA8F,YAAY,CAACzD,OAAO,S,cAAhC1C,mBAAA,CAA4F,QAA5FoG,WAA4F,EAAAtF,gBAAA,CAA/BT,MAAA,CAAA8F,YAAY,CAACzD,OAAO,qBA3GrG9B,mBAAA,e,mDAAAyF,WAAA,KAAAzF,mBAAA,e,KAAAA,mBAAA,e,6BAAA0F,WAAA;kCAmHQ1F,mBAAA,2BAA8B,EACnBP,MAAA,CAAAkG,sBAAsB,I,cAAjCvG,mBAAA,CAuBM;IA3IdH,GAAA;IAoH2C,SAAM,uBAAuB;IAAE2G,KAAK,EApH/EC,eAAA,CAoHiFpG,MAAA,CAAAqG,wBAAwB;MAC/FxG,mBAAA,CAqBM,OArBNyG,WAqBM,GApBOtG,MAAA,CAAAuG,gBAAgB,CAACvG,MAAA,CAAAkG,sBAAsB,EAAE/D,MAAM,Q,cAA1DxC,mBAAA,CAQM,OA9HlB6G,WAAA,G,4BAuHc3G,mBAAA,CAAwB,gBAAhB,SAAO,sBACfA,mBAAA,CAKK,MALL4G,WAKK,I,kBAJH9G,mBAAA,CAGKoB,SAAA,QA5HrBC,WAAA,CAyH4ChB,MAAA,CAAAuG,gBAAgB,CAACvG,MAAA,CAAAkG,sBAAsB,GAzHnF,UAyH4BQ,IAAI,EAAEC,KAAK;yBAAvBhH,mBAAA,CAGK;MAHkEH,GAAG,EAAEmH,KAAK;MAAE,SAAM;QACvF9G,mBAAA,CAAmD,QAAnD+G,WAAmD,EAAAnG,gBAAA,CAAnBiG,IAAI,CAACG,IAAI,kBACzChH,mBAAA,CAAoE,QAApEiH,WAAoE,EAAArG,gBAAA,CAApCT,MAAA,CAAAiF,UAAU,CAACyB,IAAI,CAACK,SAAS,kB;wCA3H3ExG,mBAAA,gBA+HuBP,MAAA,CAAAgH,kBAAkB,CAAChH,MAAA,CAAAkG,sBAAsB,EAAE/D,MAAM,Q,cAA5DxC,mBAAA,CAOM,OAtIlBsH,WAAA,G,4BAgIcpH,mBAAA,CAAmC,gBAA3B,oBAAkB,sBAC1BA,mBAAA,CAIK,MAJLqH,WAIK,I,kBAHHvH,mBAAA,CAEKoB,SAAA,QApIrBC,WAAA,CAkI4ChB,MAAA,CAAAgH,kBAAkB,CAAChH,MAAA,CAAAkG,sBAAsB,GAlIrF,UAkI4BW,IAAI,EAAEF,KAAK;yBAAvBhH,mBAAA,CAEK;MAFoEH,GAAG,EAAEmH,KAAK;MAAE,SAAM;wBACtFE,IAAI;wCAnIzBtG,mBAAA,gBAuIuBP,MAAA,CAAAuG,gBAAgB,CAACvG,MAAA,CAAAkG,sBAAsB,EAAE/D,MAAM,UAAUnC,MAAA,CAAAgH,kBAAkB,CAAChH,MAAA,CAAAkG,sBAAsB,EAAE/D,MAAM,U,cAArHxC,mBAAA,CAEM,OAzIlBwH,WAAA,EAuIyI,6CAE7H,KAzIZ5G,mBAAA,e,sBAAAA,mBAAA,gBA6IQA,mBAAA,6BAAgC,EACrBP,MAAA,CAAAoH,mBAAmB,I,cAA9BzH,mBAAA,CAQM;IAtJdH,GAAA;IA8IwC,SAAM,iBAAiB;IAAE2G,KAAK,EA9ItEC,eAAA,CA8IwEpG,MAAA,CAAAqH,mBAAmB;MACjFxH,mBAAA,CAMM,OANNyH,WAMM,I,kBALJ3H,mBAAA,CAISoB,SAAA,QApJrBC,WAAA,CAgJoChB,MAAA,CAAAuH,kBAAkB,EAhJtD,UAgJ2BlD,KAAK;yBAApB1E,mBAAA,CAIS;MAJoCH,GAAG,EAAE6E,KAAK;MAC/C,SAAM,cAAc;MACnBvE,OAAK,WAALA,OAAKA,CAAAmD,MAAA;QAAA,OAAEjD,MAAA,CAAAwH,WAAW,CAACxH,MAAA,CAAAoH,mBAAmB,EAAE/C,KAAK;MAAA;wBACjDA,KAAK,wBAnJtBoD,WAAA;uDAAAlH,mBAAA,gBAwJQA,mBAAA,+BAAkC,EACvBP,MAAA,CAAA0H,sBAAsB,I,cAAjC/H,mBAAA,CASM,OATNgI,WASM,GARJ9H,mBAAA,CAOM,OAPN+H,WAOM,G,4BANJ/H,mBAAA,CAAiC,YAA7B,0BAAwB,sB,4BAC5BA,mBAAA,CAAsD,WAAnD,iDAA+C,sBAClDA,mBAAA,CAGM,OAHNgI,WAGM,GAFJhI,mBAAA,CAA4E;IAAnEC,OAAK,EAAAC,MAAA,QAAAA,MAAA;MAAA,OAAEC,MAAA,CAAA8H,aAAA,IAAA9H,MAAA,CAAA8H,aAAA,CAAA5H,KAAA,CAAAF,MAAA,EAAAG,SAAA,CAAa;IAAA;IAAE,SAAM;KAAqB,WAAS,GACnEN,mBAAA,CAAoF;IAA3EC,OAAK,EAAAC,MAAA,QAAAA,MAAA;MAAA,OAAEC,MAAA,CAAA+H,wBAAA,IAAA/H,MAAA,CAAA+H,wBAAA,CAAA7H,KAAA,CAAAF,MAAA,EAAAG,SAAA,CAAwB;IAAA;IAAE,SAAM;KAAoB,SAAO,E,SA/JzFI,mBAAA,e,yCAqKMV,mBAAA,CAUM,OAVNmI,WAUM,GATJnI,mBAAA,CAQO;IARAoI,QAAM,EAAAlI,MAAA,QAAAA,MAAA,MAtKrBsD,cAAA;MAAA,OAsK+BrD,MAAA,CAAAkI,WAAA,IAAAlI,MAAA,CAAAkI,WAAA,CAAAhI,KAAA,CAAAF,MAAA,EAAAG,SAAA,CAAW;IAAA;IAAE,SAAM;sBACxCN,mBAAA,CAKE;IA5KZ,uBAAAE,MAAA,QAAAA,MAAA,gBAAAkD,MAAA;MAAA,OAwKqBjD,MAAA,CAAAmI,UAAU,GAAAlF,MAAA;IAAA;IACnBmF,IAAI,EAAC,MAAM;IACXC,WAAW,EAAC,8BAA8B;IAC1C,SAAM;iDAHGrI,MAAA,CAAAmI,UAAU,E,+BAKrBtI,mBAAA,CAA0D;IAAlDuI,IAAI,EAAC,QAAQ;IAAC,SAAM;KAAc,SAAO,qB,iDAIvDzI,mBAAA,CAEM,OAFN2I,WAEM,EAFsB,kCAE5B,G,oBAEF3I,mBAAA,CAEM,OAFN4I,WAEM,EAFqC,sDAE3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}