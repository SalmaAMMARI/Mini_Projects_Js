{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, vModelText as _vModelText, withDirectives as _withDirectives, withKeys as _withKeys } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"forum-layout\"\n};\nvar _hoisted_2 = {\n  \"class\": \"top-nav\"\n};\nvar _hoisted_3 = {\n  \"class\": \"user-info\"\n};\nvar _hoisted_4 = [\"src\"];\nvar _hoisted_5 = {\n  \"class\": \"username\"\n};\nvar _hoisted_6 = {\n  \"class\": \"forum-content\"\n};\nvar _hoisted_7 = {\n  \"class\": \"left-panel\"\n};\nvar _hoisted_8 = {\n  \"class\": \"create-buttons\"\n};\nvar _hoisted_9 = {\n  \"class\": \"filter-buttons\"\n};\nvar _hoisted_10 = {\n  key: 0,\n  \"class\": \"right-panel\"\n};\nvar _hoisted_11 = {\n  key: 1,\n  \"class\": \"right-panel join-prompt\"\n};\nvar _hoisted_12 = {\n  key: 2,\n  \"class\": \"right-panel\"\n};\nvar _hoisted_13 = {\n  key: 0,\n  \"class\": \"modal\"\n};\nvar _hoisted_14 = {\n  \"class\": \"modal-content\"\n};\nvar _hoisted_15 = {\n  \"class\": \"modal-buttons\"\n};\nvar _hoisted_16 = {\n  key: 1,\n  \"class\": \"modal\"\n};\nvar _hoisted_17 = {\n  \"class\": \"modal-content\"\n};\nvar _hoisted_18 = {\n  key: 0,\n  \"class\": \"image-preview\"\n};\nvar _hoisted_19 = [\"src\"];\nvar _hoisted_20 = {\n  \"class\": \"participant-emails\"\n};\nvar _hoisted_21 = {\n  key: 1,\n  \"class\": \"email-list\"\n};\nvar _hoisted_22 = [\"onClick\"];\nvar _hoisted_23 = {\n  \"class\": \"modal-buttons\"\n};\nvar _hoisted_24 = {\n  key: 2,\n  \"class\": \"modal\"\n};\nvar _hoisted_25 = {\n  \"class\": \"modal-content\"\n};\nvar _hoisted_26 = {\n  \"class\": \"profile-pic-preview\"\n};\nvar _hoisted_27 = [\"src\"];\nvar _hoisted_28 = {\n  \"class\": \"modal-buttons\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_router_link = _resolveComponent(\"router-link\");\n  var _component_SingleDisc = _resolveComponent(\"SingleDisc\");\n  var _component_Responses = _resolveComponent(\"Responses\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Top Navigation Bar \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_router_link, {\n    to: \"/profile/\".concat($setup.userId),\n    \"class\": \"profile-link\"\n  }, {\n    \"default\": _withCtx(function () {\n      return [_createElementVNode(\"img\", {\n        src: $setup.profileImageUrl || '/api/placeholder/32/32',\n        alt: \"Profile\",\n        \"class\": \"profile-image\"\n      }, null, 8 /* PROPS */, _hoisted_4), _createElementVNode(\"span\", _hoisted_5, _toDisplayString($setup.FirstName) + \" \" + _toDisplayString($setup.LastName), 1 /* TEXT */), _createElementVNode(\"span\", {\n        \"class\": _normalizeClass([\"status-dot\", {\n          'online': $setup.isOnline\n        }])\n      }, null, 2 /* CLASS */)];\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"to\"])]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $setup.logout && $setup.logout.apply($setup, arguments);\n    }),\n    \"class\": \"logout-btn\"\n  }, \"Déconnexion\")]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createCommentVNode(\" Create Discussion Buttons \"), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $setup.openCreatePrivateDialog && $setup.openCreatePrivateDialog.apply($setup, arguments);\n    }),\n    \"class\": \"create-button private-btn\"\n  }, _cache[23] || (_cache[23] = [_createElementVNode(\"span\", {\n    \"class\": \"icon\"\n  }, \"+\", -1 /* HOISTED */), _createTextVNode(\" Créer une discussion privée \")])), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = function () {\n      return $setup.openCreatePublicDialog && $setup.openCreatePublicDialog.apply($setup, arguments);\n    }),\n    \"class\": \"create-button public-btn\"\n  }, _cache[24] || (_cache[24] = [_createElementVNode(\"span\", {\n    \"class\": \"icon\"\n  }, \"+\", -1 /* HOISTED */), _createTextVNode(\" Créer une discussion publique \")]))]), _createCommentVNode(\" Filter Buttons \"), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = function () {\n      return $setup.showAll && $setup.showAll.apply($setup, arguments);\n    }),\n    \"class\": _normalizeClass({\n      active: $setup.filterType === 'all'\n    })\n  }, \"Tous\", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = function () {\n      return $setup.showPrivate && $setup.showPrivate.apply($setup, arguments);\n    }),\n    \"class\": _normalizeClass({\n      active: $setup.filterType === 'private'\n    })\n  }, \"Privés\", 2 /* CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = function () {\n      return $setup.showPublic && $setup.showPublic.apply($setup, arguments);\n    }),\n    \"class\": _normalizeClass({\n      active: $setup.filterType === 'public'\n    })\n  }, \"Publics\", 2 /* CLASS */)]), _createCommentVNode(\" Discussions List \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredDiscussions, function (disc) {\n    return _openBlock(), _createBlock(_component_SingleDisc, {\n      key: disc.id,\n      \"discussion-id\": disc.id,\n      \"is-participant\": $setup.isParticipant(disc),\n      \"is-active\": $setup.currentDiscussionId === disc.id,\n      \"creator-pic\": disc.creatorPic,\n      onViewDiscussion: $setup.handleViewDiscussion,\n      onJoinDiscussion: $setup.joinDiscussion,\n      onLeaveDiscussion: $setup.leaveDiscussion\n    }, null, 8 /* PROPS */, [\"discussion-id\", \"is-participant\", \"is-active\", \"creator-pic\", \"onViewDiscussion\", \"onJoinDiscussion\", \"onLeaveDiscussion\"]);\n  }), 128 /* KEYED_FRAGMENT */))]), $setup.currentDiscussionId && $setup.canViewDiscussion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createVNode(_component_Responses, {\n    discussionId: $setup.currentDiscussionId,\n    onHideDiscussion: $setup.hideDiscussion\n  }, null, 8 /* PROPS */, [\"discussionId\", \"onHideDiscussion\"])])) : $setup.currentDiscussionId && !$setup.canViewDiscussion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_cache[25] || (_cache[25] = _createElementVNode(\"h3\", null, \"Vous n'êtes pas un participant de cette discussion\", -1 /* HOISTED */)), _cache[26] || (_cache[26] = _createElementVNode(\"p\", null, \"Pour voir les détails et participer, veuillez rejoindre la discussion.\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = function ($event) {\n      return $setup.joinDiscussion($setup.currentDiscussionId);\n    }),\n    \"class\": \"join-button\"\n  }, \"Rejoindre la discussion\")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_12, \" Sélectionnez une discussion pour voir les réponses \"))]), _createCommentVNode(\" Modal pour création de discussion privée \"), $setup.showPrivateDialog ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_cache[27] || (_cache[27] = _createElementVNode(\"h3\", null, \"Créer une discussion privée\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = function ($event) {\n      return $setup.newDiscPrivateTitle = $event;\n    }),\n    placeholder: \"Titre de la discussion\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newDiscPrivateTitle]]), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = function ($event) {\n      return $setup.newDiscPrivateDescription = $event;\n    }),\n    placeholder: \"Description\",\n    rows: \"3\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newDiscPrivateDescription]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = function ($event) {\n      return $setup.newDiscParticipantEmail = $event;\n    }),\n    placeholder: \"Email du participant\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newDiscParticipantEmail]]), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"button\", {\n    onClick: _cache[10] || (_cache[10] = function () {\n      return $setup.createPrivateDiscussion && $setup.createPrivateDiscussion.apply($setup, arguments);\n    })\n  }, \"Créer\"), _createElementVNode(\"button\", {\n    onClick: _cache[11] || (_cache[11] = function () {\n      return $setup.closeModals && $setup.closeModals.apply($setup, arguments);\n    })\n  }, \"Annuler\")])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Modal pour création de discussion publique \"), $setup.showPublicDialog ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [_createElementVNode(\"div\", _hoisted_17, [_cache[28] || (_cache[28] = _createElementVNode(\"h3\", null, \"Créer une discussion publique\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[12] || (_cache[12] = function ($event) {\n      return $setup.newDiscPublicTitle = $event;\n    }),\n    placeholder: \"Titre de la discussion\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newDiscPublicTitle]]), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[13] || (_cache[13] = function ($event) {\n      return $setup.newDiscPublicDescription = $event;\n    }),\n    placeholder: \"Description\",\n    rows: \"3\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newDiscPublicDescription]]), _createCommentVNode(\" New input field for discussion image URL \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[14] || (_cache[14] = function ($event) {\n      return $setup.newDiscPublicImageUrl = $event;\n    }),\n    placeholder: \"URL de l'image (https://...)\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newDiscPublicImageUrl]]), $setup.newDiscPublicImageUrl ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_createElementVNode(\"img\", {\n    src: $setup.newDiscPublicImageUrl || '/api/placeholder/100/100',\n    alt: \"Preview\",\n    \"class\": \"preview-image\"\n  }, null, 8 /* PROPS */, _hoisted_19)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_20, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[15] || (_cache[15] = function ($event) {\n      return $setup.newParticipantEmail = $event;\n    }),\n    placeholder: \"Email d'un participant (optionnel)\",\n    onKeyup: _cache[16] || (_cache[16] = _withKeys(function () {\n      return $setup.addParticipantEmail && $setup.addParticipantEmail.apply($setup, arguments);\n    }, [\"enter\"]))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $setup.newParticipantEmail]]), _createElementVNode(\"button\", {\n    onClick: _cache[17] || (_cache[17] = function () {\n      return $setup.addParticipantEmail && $setup.addParticipantEmail.apply($setup, arguments);\n    })\n  }, \"Ajouter\")]), $setup.participantEmails.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_21, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.participantEmails, function (email, index) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      \"class\": \"email-tag\"\n    }, [_createTextVNode(_toDisplayString(email) + \" \", 1 /* TEXT */), _createElementVNode(\"span\", {\n      \"class\": \"remove-email\",\n      onClick: function onClick($event) {\n        return $setup.removeParticipantEmail(index);\n      }\n    }, \"×\", 8 /* PROPS */, _hoisted_22)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_23, [_createElementVNode(\"button\", {\n    onClick: _cache[18] || (_cache[18] = function () {\n      return $setup.createPublicDiscussion && $setup.createPublicDiscussion.apply($setup, arguments);\n    })\n  }, \"Créer\"), _createElementVNode(\"button\", {\n    onClick: _cache[19] || (_cache[19] = function () {\n      return $setup.closeModals && $setup.closeModals.apply($setup, arguments);\n    })\n  }, \"Annuler\")])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Modal pour mettre à jour la photo de profil \"), $setup.showProfilePicDialog ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, [_createElementVNode(\"div\", _hoisted_25, [_cache[29] || (_cache[29] = _createElementVNode(\"h3\", null, \"Mettre à jour votre photo de profil\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[20] || (_cache[20] = function ($event) {\n      return $setup.profilePicInput = $event;\n    }),\n    placeholder: \"URL de l'image (https://...)\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.profilePicInput]]), _createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"img\", {\n    src: $setup.profilePicInput || $setup.profileImageUrl || '/api/placeholder/100/100',\n    alt: \"Preview\",\n    \"class\": \"preview-image\"\n  }, null, 8 /* PROPS */, _hoisted_27)]), _createElementVNode(\"div\", _hoisted_28, [_createElementVNode(\"button\", {\n    onClick: _cache[21] || (_cache[21] = function () {\n      return $setup.updateProfilePicture && $setup.updateProfilePicture.apply($setup, arguments);\n    })\n  }, \"Sauvegarder\"), _createElementVNode(\"button\", {\n    onClick: _cache[22] || (_cache[22] = function () {\n      return $setup.closeProfilePicDialog && $setup.closeProfilePicDialog.apply($setup, arguments);\n    })\n  }, \"Annuler\")])])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","_createVNode","_component_router_link","to","concat","$setup","userId","_withCtx","src","profileImageUrl","alt","_hoisted_4","_hoisted_5","_toDisplayString","FirstName","LastName","_normalizeClass","isOnline","_","onClick","_cache","logout","apply","arguments","_hoisted_6","_hoisted_7","_hoisted_8","openCreatePrivateDialog","_createTextVNode","openCreatePublicDialog","_hoisted_9","showAll","active","filterType","showPrivate","showPublic","_Fragment","_renderList","filteredDiscussions","disc","_createBlock","_component_SingleDisc","id","isParticipant","currentDiscussionId","creatorPic","onViewDiscussion","handleViewDiscussion","onJoinDiscussion","joinDiscussion","onLeaveDiscussion","leaveDiscussion","canViewDiscussion","_hoisted_10","_component_Responses","discussionId","onHideDiscussion","hideDiscussion","_hoisted_11","$event","_hoisted_12","showPrivateDialog","_hoisted_13","_hoisted_14","newDiscPrivateTitle","placeholder","newDiscPrivateDescription","rows","newDiscParticipantEmail","_hoisted_15","createPrivateDiscussion","closeModals","showPublicDialog","_hoisted_16","_hoisted_17","newDiscPublicTitle","newDiscPublicDescription","newDiscPublicImageUrl","_hoisted_18","_hoisted_19","_hoisted_20","newParticipantEmail","onKeyup","_withKeys","addParticipantEmail","participantEmails","length","_hoisted_21","email","index","removeParticipantEmail","_hoisted_22","_hoisted_23","createPublicDiscussion","showProfilePicDialog","_hoisted_24","_hoisted_25","profilePicInput","_hoisted_26","_hoisted_27","_hoisted_28","updateProfilePicture","closeProfilePicDialog"],"sources":["/workspaces/Mini_Projects_Js/ChatAPP/src/components/Forum.vue"],"sourcesContent":["<template>\n  <div class=\"forum-layout\">\n    <!-- Top Navigation Bar -->\n    <div class=\"top-nav\">\n      <div class=\"user-info\">\n        <router-link :to=\"`/profile/${userId}`\" class=\"profile-link\">\n          <img :src=\"profileImageUrl || '/api/placeholder/32/32'\" alt=\"Profile\" class=\"profile-image\" />\n          <span class=\"username\">{{ FirstName }} {{ LastName }}</span>\n          <span class=\"status-dot\" :class=\"{ 'online': isOnline }\"></span>\n        </router-link>\n      </div>\n      <button @click=\"logout\" class=\"logout-btn\">Déconnexion</button>\n    </div>\n    \n    <div class=\"forum-content\">\n      <div class=\"left-panel\">\n        <!-- Create Discussion Buttons -->\n        <div class=\"create-buttons\">\n          <button @click=\"openCreatePrivateDialog\" class=\"create-button private-btn\">\n            <span class=\"icon\">+</span> Créer une discussion privée\n          </button>\n          <button @click=\"openCreatePublicDialog\" class=\"create-button public-btn\">\n            <span class=\"icon\">+</span> Créer une discussion publique\n          </button>\n        </div>\n        \n        <!-- Filter Buttons -->\n        <div class=\"filter-buttons\">\n          <button @click=\"showAll\" :class=\"{ active: filterType === 'all' }\">Tous</button>\n          <button @click=\"showPrivate\" :class=\"{ active: filterType === 'private' }\">Privés</button>\n          <button @click=\"showPublic\" :class=\"{ active: filterType === 'public' }\">Publics</button>\n        </div>\n        \n        <!-- Discussions List -->\n        <SingleDisc\n          v-for=\"disc in filteredDiscussions\"\n          :key=\"disc.id\"\n          :discussion-id=\"disc.id\"\n          :is-participant=\"isParticipant(disc)\"\n          :is-active=\"currentDiscussionId === disc.id\"\n          :creator-pic=\"disc.creatorPic\"\n          @view-discussion=\"handleViewDiscussion\"\n          @join-discussion=\"joinDiscussion\"\n          @leave-discussion=\"leaveDiscussion\"\n        />\n      </div>\n      \n      <div class=\"right-panel\" v-if=\"currentDiscussionId && canViewDiscussion\">\n        <Responses \n          :discussionId=\"currentDiscussionId\"\n          @hide-discussion=\"hideDiscussion\"\n        />\n      </div>\n      <div v-else-if=\"currentDiscussionId && !canViewDiscussion\" class=\"right-panel join-prompt\">\n        <h3>Vous n'êtes pas un participant de cette discussion</h3>\n        <p>Pour voir les détails et participer, veuillez rejoindre la discussion.</p>\n        <button @click=\"joinDiscussion(currentDiscussionId)\" class=\"join-button\">Rejoindre la discussion</button>\n      </div>\n      <div class=\"right-panel\" v-else>\n        Sélectionnez une discussion pour voir les réponses\n      </div>\n    </div>\n    \n    <!-- Modal pour création de discussion privée -->\n    <div v-if=\"showPrivateDialog\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h3>Créer une discussion privée</h3>\n        <input v-model=\"newDiscPrivateTitle\" placeholder=\"Titre de la discussion\" />\n        <textarea v-model=\"newDiscPrivateDescription\" placeholder=\"Description\" rows=\"3\"></textarea>\n        <input v-model=\"newDiscParticipantEmail\" placeholder=\"Email du participant\" />\n        <div class=\"modal-buttons\">\n          <button @click=\"createPrivateDiscussion\">Créer</button>\n          <button @click=\"closeModals\">Annuler</button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Modal pour création de discussion publique -->\n    <div v-if=\"showPublicDialog\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h3>Créer une discussion publique</h3>\n        <input v-model=\"newDiscPublicTitle\" placeholder=\"Titre de la discussion\" />\n        <textarea v-model=\"newDiscPublicDescription\" placeholder=\"Description\" rows=\"3\"></textarea>\n        <!-- New input field for discussion image URL -->\n        <input v-model=\"newDiscPublicImageUrl\" placeholder=\"URL de l'image (https://...)\" />\n        <div class=\"image-preview\" v-if=\"newDiscPublicImageUrl\">\n          <img :src=\"newDiscPublicImageUrl || '/api/placeholder/100/100'\" alt=\"Preview\" class=\"preview-image\" />\n        </div>\n        <div class=\"participant-emails\">\n          <input \n            v-model=\"newParticipantEmail\" \n            placeholder=\"Email d'un participant (optionnel)\" \n            @keyup.enter=\"addParticipantEmail\"\n          />\n          <button @click=\"addParticipantEmail\">Ajouter</button>\n        </div>\n        <div class=\"email-list\" v-if=\"participantEmails.length > 0\">\n          <div v-for=\"(email, index) in participantEmails\" :key=\"index\" class=\"email-tag\">\n            {{ email }}\n            <span class=\"remove-email\" @click=\"removeParticipantEmail(index)\">×</span>\n          </div>\n        </div>\n        <div class=\"modal-buttons\">\n          <button @click=\"createPublicDiscussion\">Créer</button>\n          <button @click=\"closeModals\">Annuler</button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Modal pour mettre à jour la photo de profil -->\n    <div v-if=\"showProfilePicDialog\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h3>Mettre à jour votre photo de profil</h3>\n        <input v-model=\"profilePicInput\" placeholder=\"URL de l'image (https://...)\" />\n        <div class=\"profile-pic-preview\">\n          <img :src=\"profilePicInput || profileImageUrl || '/api/placeholder/100/100'\" alt=\"Preview\" class=\"preview-image\" />\n        </div>\n        <div class=\"modal-buttons\">\n          <button @click=\"updateProfilePicture\">Sauvegarder</button>\n          <button @click=\"closeProfilePicDialog\">Annuler</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getAuth, onAuthStateChanged, signOut } from \"firebase/auth\";\nimport { getFirestore, collection, getDocs, query, orderBy, doc, updateDoc, arrayUnion, arrayRemove, getDoc, addDoc, where, serverTimestamp } from \"firebase/firestore\";\nimport { ref, onMounted, computed } from 'vue';\nimport { useRouter } from 'vue-router';\nimport SingleDisc from \"../components/singleDisc.vue\";\nimport Responses from \"../components/Responses.vue\";\n\nexport default {\n  name: \"Forum\",\n  components: {\n    SingleDisc,\n    Responses\n  },\n  emits: ['select-discussion'],\n  setup(props, { emit }) {\n    const router = useRouter();\n    const userId = ref(null);\n    const userEmail = ref(null);\n    const FirstName = ref('');\n    const LastName = ref('');\n    const isOnline = ref(false);\n    const profileImageUrl = ref('');\n    const discussions = ref([]);\n    const loading = ref(true);\n    const error = ref(null);\n    const filterType = ref('all');\n    const currentDiscussionId = ref(null);\n    const canViewDiscussion = ref(false);\n    \n    // Pour la photo de profil\n    const showProfilePicDialog = ref(false);\n    const profilePicInput = ref('');\n    \n    // Pour créer une discussion privée\n    const showPrivateDialog = ref(false);\n    const newDiscPrivateTitle = ref('');\n    const newDiscPrivateDescription = ref('');\n    const newDiscParticipantEmail = ref('');\n    \n    // Pour créer une discussion publique\n    const showPublicDialog = ref(false);\n    const newDiscPublicTitle = ref('');\n    const newDiscPublicDescription = ref('');\n    const newDiscPublicImageUrl = ref(''); // New field for discussion image URL\n    const newParticipantEmail = ref('');\n    const participantEmails = ref([]);\n    \n    // Fetch user data including name, online status, and profile picture\n    const fetchUserData = async (uid) => {\n      try {\n        const db = getFirestore();\n        const userDoc = await getDoc(doc(db, \"users\", uid));\n        \n        if (userDoc.exists()) {\n          FirstName.value = userDoc.data().FirstName || '';\n          LastName.value = userDoc.data().LastName || '';\n          isOnline.value = userDoc.data().isOnline || false;\n          profileImageUrl.value = userDoc.data().profileImageUrl || '';\n        }\n      } catch (error) {\n        console.error(\"Error fetching user data:\", error);\n      }\n    };\n    \n    // Open profile picture update dialog\n    const openProfilePicDialog = () => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour modifier votre photo de profil.\");\n        return;\n      }\n      profilePicInput.value = profileImageUrl.value || '';\n      showProfilePicDialog.value = true;\n    };\n    \n    // Close profile picture dialog\n    const closeProfilePicDialog = () => {\n      showProfilePicDialog.value = false;\n      profilePicInput.value = '';\n    };\n    \n    // Update profile picture\n    const updateProfilePicture = async () => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour modifier votre photo de profil.\");\n        return;\n      }\n      \n      try {\n        const db = getFirestore();\n        await updateDoc(doc(db, \"users\", user.uid), {\n          profileImageUrl: profilePicInput.value\n        });\n        \n        profileImageUrl.value = profilePicInput.value;\n        closeProfilePicDialog();\n        alert(\"Photo de profil mise à jour avec succès!\");\n      } catch (error) {\n        console.error(\"Error updating profile picture:\", error);\n        alert(\"Erreur lors de la mise à jour de la photo de profil.\");\n      }\n    };\n    \n    // Logout function\n    const logout = async () => {\n      try {\n        const auth = getAuth();\n        const db = getFirestore();\n        \n        // Set the user's online status to false in Firestore\n        if (userId.value) {\n          await updateDoc(doc(db, \"users\", userId.value), {\n            isOnline: false\n          });\n        }\n        \n        // Sign out from Firebase Auth\n        await signOut(auth);\n        \n        // Redirect to home page\n        router.push('/');\n      } catch (error) {\n        console.error(\"Error logging out:\", error);\n        alert(\"Une erreur s'est produite lors de la déconnexion\");\n      }\n    };\n    \n    const fetchDiscussions = async () => {\n      try {\n        loading.value = true;\n        const db = getFirestore();\n        const discussionsQuery = query(\n          collection(db, \"discussions\"),\n          orderBy(\"createdAt\", \"desc\")\n        );\n        \n        const querySnapshot = await getDocs(discussionsQuery);\n        \n        // Get all user data to fetch creator profile pictures\n        const usersRef = collection(db, \"users\");\n        const usersSnapshot = await getDocs(usersRef);\n        const usersMap = {};\n        \n        usersSnapshot.forEach(doc => {\n          usersMap[doc.id] = doc.data();\n        });\n        \n        // Process discussion data\n        discussions.value = await Promise.all(querySnapshot.docs.map(async (doc) => {\n          const data = doc.data();\n          if (data.createdAt) {\n            data.createdAtTimestamp = data.createdAt.toDate ? \n              data.createdAt.toDate().getTime() : \n              new Date(data.createdAt).getTime();\n          }\n          \n          // Ensure participants is an array\n          if (!data.participants) {\n            data.participants = [];\n          }\n          \n          // Add creator's profile picture if available\n          if (data.createdBy && usersMap[data.createdBy]) {\n            data.creatorPic = usersMap[data.createdBy].profileImageUrl || '';\n          }\n          \n          return {\n            id: doc.id,\n            ...data\n          };\n        }));\n        \n        console.log(\"Fetched discussions:\", discussions.value);\n      } catch (err) {\n        console.error(\"Failed to load discussions:\", err);\n        error.value = \"Failed to load discussions: \" + err.message;\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    const isParticipant = (discussion) => {\n      return userId.value && discussion.participants && \n             Array.isArray(discussion.participants) && \n             discussion.participants.includes(userId.value);\n    };\n    \n    const filteredDiscussions = computed(() => {\n      if (!discussions.value.length) return [];\n      \n      // Filter out private discussions where user is not a participant\n      const accessibleDiscussions = discussions.value.filter(disc => {\n        // If private, only show if user is a participant\n        if (disc.isPrivate === true) {\n          return isParticipant(disc);\n        }\n        // If public, always show\n        return true;\n      });\n      \n      // Then apply type filter\n      if (filterType.value === 'all') {\n        return accessibleDiscussions;\n      } else if (filterType.value === 'private') {\n        return accessibleDiscussions.filter(disc => disc.isPrivate === true);\n      } else if (filterType.value === 'public') {\n        return accessibleDiscussions.filter(disc => disc.isPrivate === false);\n      }\n      \n      return accessibleDiscussions;\n    });\n    \n    const checkParticipantStatus = () => {\n      if (!currentDiscussionId.value || !userId.value) {\n        canViewDiscussion.value = false;\n        return;\n      }\n      \n      const currentDiscussion = discussions.value.find(d => d.id === currentDiscussionId.value);\n      if (currentDiscussion) {\n        canViewDiscussion.value = isParticipant(currentDiscussion);\n      } else {\n        canViewDiscussion.value = false;\n      }\n    };\n    \n    const joinDiscussion = async (discussionId) => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour rejoindre une discussion\");\n        return;\n      }\n      \n      try {\n        const db = getFirestore();\n        const discussionRef = doc(db, 'discussions', discussionId);\n        \n        // Get the latest version of the document\n        const discussionSnap = await getDoc(discussionRef);\n        if (!discussionSnap.exists()) {\n          throw new Error(\"Discussion not found\");\n        }\n        \n        // Update the document to add the user to participants\n        await updateDoc(discussionRef, {\n          participants: arrayUnion(userId.value)\n        });\n        \n        // Update local state\n        const discussionIndex = discussions.value.findIndex(d => d.id === discussionId);\n        if (discussionIndex !== -1) {\n          if (!discussions.value[discussionIndex].participants) {\n            discussions.value[discussionIndex].participants = [];\n          }\n          \n          if (!discussions.value[discussionIndex].participants.includes(userId.value)) {\n            discussions.value[discussionIndex].participants.push(userId.value);\n          }\n        }\n        \n        // Update the view permission\n        canViewDiscussion.value = true;\n        \n        console.log(`Successfully joined discussion ${discussionId}`);\n      } catch (error) {\n        console.error(\"Error joining discussion:\", error);\n        alert(\"Une erreur s'est produite lors de la tentative de rejoindre la discussion\");\n      }\n    };\n\n    const leaveDiscussion = async (discussionId, isPrivate) => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour quitter une discussion\");\n        return;\n      }\n      \n      try {\n        const db = getFirestore();\n        const discussionRef = doc(db, 'discussions', discussionId);\n        \n        // Get the latest version of the document\n        const discussionSnap = await getDoc(discussionRef);\n        if (!discussionSnap.exists()) {\n          throw new Error(\"Discussion not found\");\n        }\n        \n        // Update the document to remove the user from participants\n        await updateDoc(discussionRef, {\n          participants: arrayRemove(userId.value)\n        });\n        \n        // Update local state\n        const discussionIndex = discussions.value.findIndex(d => d.id === discussionId);\n        if (discussionIndex !== -1 && discussions.value[discussionIndex].participants) {\n          discussions.value[discussionIndex].participants = \n            discussions.value[discussionIndex].participants.filter(p => p !== userId.value);\n        }\n        \n        // If this is the current discussion, hide it\n        if (currentDiscussionId.value === discussionId) {\n          hideDiscussion();\n        }\n        \n        // For private discussions, they should disappear from the list after leaving\n        if (isPrivate) {\n          await fetchDiscussions(); // Refresh the list\n        }\n        \n        console.log(`Successfully left discussion ${discussionId}`);\n      } catch (error) {\n        console.error(\"Error leaving discussion:\", error);\n        alert(\"Une erreur s'est produite lors de la tentative de quitter la discussion\");\n      }\n    };\n    \n    const showAll = () => {\n      filterType.value = 'all';\n    };\n    \n    const showPrivate = () => {\n      filterType.value = 'private';\n    };\n    \n    const showPublic = () => {\n      filterType.value = 'public';\n    };\n    \n    const handleViewDiscussion = (discussionId) => {\n      currentDiscussionId.value = discussionId;\n      emit('select-discussion', discussionId);\n      checkParticipantStatus();\n    };\n    \n    const hideDiscussion = () => {\n      currentDiscussionId.value = null;\n      canViewDiscussion.value = false;\n    };\n    \n    // Fonctions pour la création de discussion\n    const openCreatePrivateDialog = () => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour créer une discussion.\");\n        return;\n      }\n      showPrivateDialog.value = true;\n      showPublicDialog.value = false;\n      showProfilePicDialog.value = false;\n    };\n    \n    const openCreatePublicDialog = () => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour créer une discussion.\");\n        return;\n      }\n      showPublicDialog.value = true;\n      showPrivateDialog.value = false;\n      showProfilePicDialog.value = false;\n    };\n    \n    const closeModals = () => {\n      showPrivateDialog.value = false;\n      showPublicDialog.value = false;\n      newDiscPrivateTitle.value = '';\n      newDiscPrivateDescription.value = '';\n      newDiscParticipantEmail.value = '';\n      newDiscPublicTitle.value = '';\n      newDiscPublicDescription.value = '';\n      newDiscPublicImageUrl.value = ''; // Reset the image URL field\n      newParticipantEmail.value = '';\n      participantEmails.value = [];\n    };\n    \n    const addParticipantEmail = () => {\n      if (newParticipantEmail.value && !participantEmails.value.includes(newParticipantEmail.value)) {\n        participantEmails.value.push(newParticipantEmail.value);\n        newParticipantEmail.value = '';\n      }\n    };\n    \n    const removeParticipantEmail = (index) => {\n      participantEmails.value.splice(index, 1);\n    };\n    \n    // FIXED: Improved email search for private discussions\n    const createPrivateDiscussion = async () => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour créer une discussion.\");\n        return;\n      }\n      \n      if (!newDiscPrivateTitle.value.trim()) {\n        alert(\"Le titre de la discussion est obligatoire.\");\n        return;\n      }\n      \n      const emailToFind = newDiscParticipantEmail.value.trim();\n      if (!emailToFind) {\n        alert(\"Veuillez spécifier un participant.\");\n        return;\n      }\n      \n      try {\n        // Chercher l'utilisateur par email - avec plus de robustesse\n        const db = getFirestore();\n        const usersRef = collection(db, \"users\");\n        \n        // Try different field names and case sensitivity options\n        const emailFields = [\"Email\", \"email\", \"userEmail\"];\n        let participantId = null;\n        \n        for (const field of emailFields) {\n          if (participantId) break; // Skip if already found\n          \n          // Try case-sensitive search\n          const q1 = query(usersRef, where(field, \"==\", emailToFind));\n          const snap1 = await getDocs(q1);\n          \n          if (!snap1.empty) {\n            snap1.forEach((doc) => {\n              participantId = doc.id;\n            });\n            console.log(`Found user with ${field} (case-sensitive): ${participantId}`);\n            break;\n          }\n          \n          // Try lowercase search\n          const q2 = query(usersRef, where(field, \"==\", emailToFind.toLowerCase()));\n          const snap2 = await getDocs(q2);\n          \n          if (!snap2.empty) {\n            snap2.forEach((doc) => {\n              participantId = doc.id;\n            });\n            console.log(`Found user with ${field} (lowercase): ${participantId}`);\n            break;\n          }\n        }\n        \n        // If still not found, try a different approach - fetch all users and compare\n        if (!participantId) {\n          console.log(\"User not found with direct queries, trying manual comparison\");\n          const allUsers = await getDocs(usersRef);\n          \n          allUsers.forEach((userDoc) => {\n            const userData = userDoc.data();\n            for (const key in userData) {\n              // Check if any field contains an email that matches\n              if (typeof userData[key] === 'string' && \n                  userData[key].toLowerCase() === emailToFind.toLowerCase() &&\n                  userData[key].includes('@')) {\n                participantId = userDoc.id;\n                console.log(`Found user by manual search in field ${key}: ${participantId}`);\n                break;\n              }\n            }\n          });\n        }\n        \n        if (!participantId) {\n          alert(\"Utilisateur non trouvé avec cet email. Vérifiez l'adresse email et réessayez.\");\n          return;\n        }\n        \n        // Créer la discussion\n        const newDiscussion = {\n          title: newDiscPrivateTitle.value.trim(),\n          description: newDiscPrivateDescription.value.trim(),\n          isPrivate: true,\n          participants: [userId.value, participantId],\n          createdAt: serverTimestamp(),\n          createdBy: userId.value,\n          creatorPic: profileImageUrl.value || ''\n        };\n        \n        const docRef = await addDoc(collection(db, \"discussions\"), newDiscussion);\n        \n        // Ajouter la nouvelle discussion à la liste locale\n        discussions.value.unshift({\n          id: docRef.id,\n          ...newDiscussion,\n          createdAt: new Date() // Pour l'affichage immédiat, sera remplacé au prochain fetchDiscussions\n        });\n        \n        alert(\"Discussion privée créée avec succès!\");\n        closeModals();\n      } catch (err) {\n        console.error(\"Erreur lors de la création de la discussion privée:\", err);\n        alert(\"Erreur lors de la création de la discussion. Veuillez réessayer.\");\n      }\n    };\n    \n    // FIXED: Improved email search for public discussions too and added image URL\n    const createPublicDiscussion = async () => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour créer une discussion.\");\n        return;\n      }\n      \n      if (!newDiscPublicTitle.value.trim()) {\n        alert(\"Le titre de la discussion est obligatoire.\");\n        return;\n      }\n      \n      try {\n        const db = getFirestore();\n        \n        // Récupérer les IDs des participants à partir des emails\n        const participantIds = [userId.value]; // Toujours inclure l'utilisateur actuel\n        const notFoundEmails = [];\n        \n        if (participantEmails.value.length > 0) {\n          const usersRef = collection(db, \"users\");\n          \n          for (const email of participantEmails.value) {\n            const emailToFind = email.trim();\n            let found = false;\n            \n           \n            const emailFields = [\"Email\", \"email\", \"userEmail\"];\n            \n            for (const field of emailFields) {\n              if (found) break;\n              \n              // Try exact match\n              const q = query(usersRef, where(field, \"==\", emailToFind));\n              const querySnapshot = await getDocs(q);\n              \n              if (!querySnapshot.empty) {\n                querySnapshot.forEach((doc) => {\n                  if (!participantIds.includes(doc.id)) {\n                    participantIds.push(doc.id);\n                    found = true;\n                  }\n                });\n              }\n              \n              // Try lowercase\n              if (!found) {\n                const q2 = query(usersRef, where(field, \"==\", emailToFind.toLowerCase()));\n                const snap2 = await getDocs(q2);\n                \n                if (!snap2.empty) {\n                  snap2.forEach((doc) => {\n                    if (!participantIds.includes(doc.id)) {\n                      participantIds.push(doc.id);\n                      found = true;\n                    }\n                  });\n                }\n              }\n            }\n            \n            // Manual search as fallback\n            if (!found) {\n              const allUsers = await getDocs(usersRef);\n              allUsers.forEach((userDoc) => {\n                const userData = userDoc.data();\n                for (const key in userData) {\n                  if (typeof userData[key] === 'string' && \n                      userData[key].toLowerCase() === emailToFind.toLowerCase() &&\n                      userData[key].includes('@')) {\n                    if (!participantIds.includes(userDoc.id)) {\n                      participantIds.push(userDoc.id);\n                      found = true;\n                      break;\n                    }\n                  }\n                }\n              });\n            }\n            \n            if (!found) {\n              notFoundEmails.push(emailToFind);\n            }\n          }\n        }\n        \n        // Warn about not found emails, but still create the discussion\n        if (notFoundEmails.length > 0) {\n          alert(`Attention: Les adresses emails suivantes n'ont pas été trouvées: ${notFoundEmails.join(\", \")}`);\n        }\n        \n        // Créer la discussion\n        const newDiscussion = {\n          title: newDiscPublicTitle.value.trim(),\n          description: newDiscPublicDescription.value.trim(),\n          isPrivate: false,\n          participants: participantIds,\n          createdAt: serverTimestamp(),\n          createdBy: userId.value,\n          creatorPic: profileImageUrl.value || '',\n          profileImageUrl: newDiscPublicImageUrl.value || '' // Add the image URL to the discussion\n        };\n        \n        const docRef = await addDoc(collection(db, \"discussions\"), newDiscussion);\n        \n        // Ajouter la nouvelle discussion à la liste locale\n        discussions.value.unshift({\n          id: docRef.id,\n          ...newDiscussion,\n          createdAt: new Date() // Pour l'affichage immédiat\n        });\n        \n        alert(\"Discussion publique créée avec succès!\");\n        closeModals();\n      } catch (err) {\n        console.error(\"Erreur lors de la création de la discussion publique:\", err);\n        alert(\"Erreur lors de la création de la discussion. Veuillez réessayer.\");\n      }\n    };\n    \n    onMounted(async () => {\n      const auth = getAuth();\n      onAuthStateChanged(auth, async (user) => {\n        if (user) {\n          userId.value = user.uid;\n          userEmail.value = user.email;\n          \n          // Set online status to true in Firestore\n          const db = getFirestore();\n          await updateDoc(doc(db, \"users\", user.uid), {\n            isOnline: true\n          });\n          \n          // Fetch user data including name and online status\n          await fetchUserData(user.uid);\n        } else {\n          userId.value = null;\n          userEmail.value = null;\n          FirstName.value = '';\n          LastName.value = '';\n          isOnline.value = false;\n          profileImageUrl.value = '';\n        }\n        checkParticipantStatus();\n      });\n      \n      await fetchDiscussions();\n    });\n    \n    return {\n      userId,\n      userEmail,\n      FirstName,\n      LastName,\n      isOnline,\n      profileImageUrl,\n      discussions,\n      loading,\n      error,\n      filteredDiscussions,\n      logout,\n      showAll,\n      showPrivate,\n      showPublic,\n      handleViewDiscussion,\n      hideDiscussion,\n      currentDiscussionId,\n      canViewDiscussion,\n      isParticipant,\n      joinDiscussion,\n      leaveDiscussion,\n      filterType,\n      \n      // Pour la photo de profil\n      showProfilePicDialog,\n      profilePicInput,\n      openProfilePicDialog,\n      closeProfilePicDialog,\n      updateProfilePicture,\n      \n      // Pour création de discussion privée\n      showPrivateDialog,\n      newDiscPrivateTitle,\n      newDiscPrivateDescription,\n      newDiscParticipantEmail,\n      openCreatePrivateDialog,\n      createPrivateDiscussion,\n      \n      // Pour création de discussion publique\n      showPublicDialog,\n      newDiscPublicTitle,\n      newDiscPublicDescription,\n      newDiscPublicImageUrl, // New variable for discussion image URL\n      newParticipantEmail,\n      participantEmails,\n      openCreatePublicDialog,\n      createPublicDiscussion,\n      addParticipantEmail,\n      removeParticipantEmail,\n      \n      closeModals\n    };\n  }\n};\n</script>\n\n<style scoped>\n.forum-layout {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: #f8f9fa;\n}\n\n\n.top-nav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 20px;\n  background-color: white;\n  border-bottom: 1px solid #e0e0e0;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n}\n\n.profile-link {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: #333;\n  font-weight: 500;\n  padding: 6px}\n.forum-layout {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: #f8f9fa;\n}\n\n\n.top-nav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 20px;\n  background-color: white;\n  border-bottom: 1px solid #e0e0e0;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n}\n\n.profile-link {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: #333;\n  font-weight: 500;\n  padding: 6px 12px;\n  border-radius: 20px;\n  transition: background-color 0.2s;\n}\n\n.profile-link:hover {\n  background-color: #f5f5f5;\n}\n\n.profile-image {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  object-fit: cover;\n  margin-right: 8px;}\n.forum-layout {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: #f8f9fa;\n}\n\n\n.top-nav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 20px;\n  background-color: white;\n  border-bottom: 1px solid #e0e0e0;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n}\n\n.profile-link {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: #333;\n  font-weight: 500;\n  padding: 6px 12px;\n  border-radius: 20px;\n  transition: background-color 0.2s;\n}\n\n.profile-link:hover {\n  background-color: #f5f5f5;\n}\n\n.profile-image {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  object-fit: cover;\n  margin-right: 8px;\n  border: 1px solid #e0e0e0;\n}\n\n.status-dot {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  background-color: #ccc;\n  margin-left: 8px;\n}\n\n.status-dot.online {\n  background-color: #4caf50;\n}\n\n.logout-btn {\n  background-color: #f5f5f5;\n  color: #333;\n  border: none;\n  padding:}\n.forum-layout {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: #f8f9fa;\n}\n\n\n.top-nav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 20px;\n  background-color: white;\n  border-bottom: 1px solid #e0e0e0;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n}\n\n.profile-link {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: #333;\n  font-weight: 500;\n  padding: 6px 12px;\n  border-radius: 20px;\n  transition: background-color 0.2s;\n}\n\n.profile-link:hover {\n  background-color: #f5f5f5;\n}\n\n.status-dot {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  background-color: #ccc;\n  margin-left: 8px;\n}\n\n.status-dot.online {\n  background-color: #4caf50;\n}\n\n.logout-btn {\n  background-color: #f5f5f5;\n  color: #333;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: background-color 0.2s;\n}\n\n.logout-btn:hover {\n  background-color: #e0e0e0;\n}\n\n\n.forum-content {\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n}\n\n.left-panel {\n  width: 320px;\n  background: white;\n  border-right: 1px solid #e0e0e0;\n  padding: 20px;\n  overflow-y: auto;\n}\n\n.right-panel {\n  flex: 1;\n  background: #f5f7fb;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n}\n\n.right-panel > div:not(.join-prompt) {\n  flex: 1;\n  background: white;\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.join-prompt {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  text-align: center;\n  background: white;\n  border-radius: 12px;\n  padding: 40px;\n}\n\n.join-prompt h3 {\n  color: #333;\n  margin-bottom: 10px;\n}\n\n.join-prompt p {\n  color: #666;\n  margin-bottom: 20px;\n}\n\n.create-buttons {\n  margin-bottom: 20px;\n}\n\n.create-button {\n  width: 100%;\n  padding: 12px;\n  margin-bottom: 10px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s;\n}\n\n.private-btn {\n  background-color: #ffebee;\n  color: #d32f2f;\n}\n\n.public-btn {\n  background-color: #e3f2fd;\n  color: #1976d2;\n}\n\n.private-btn:hover {\n  background-color: #ffcdd2;\n}\n\n.public-btn:hover {\n  background-color: #bbdefb;\n}\n\n.icon {\n  font-size: 16px;\n  margin-right: 8px;\n  font-weight: bold;\n}\n\n.filter-buttons {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 20px;\n}\n\n.filter-buttons button {\n  flex: 1;\n  padding: 8px;\n  border: 1px solid #e0e0e0;\n  background-color: white;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 13px;\n  transition: all 0.2s;\n}\n\n.filter-buttons button.active {\n  background-color: #1976d2;\n  color: white;\n  border-color: #1976d2;\n}\n\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background-color: white;\n  padding: 24px;\n  border-radius: 12px;\n  width: 90%;\n  max-width: 500px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n}\n\n.modal-content h3 {\n  margin-top: 0;\n  margin-bottom: 20px;\n  color: #333;\n  font-size: 18px;\n}\n\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 12px;\n  margin-bottom: 16px;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  font-size: 14px;\n  transition: border 0.2s;\n}\n\n.modal-content input:focus,\n.modal-content textarea:focus {\n  border-color: #1976d2;\n  outline: none;\n}\n\n.modal-content textarea {\n  resize: vertical;\n  min-height: 100px;\n}\n\n.modal-buttons {\n  display: flex;\n  justify-content: flex-end;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.modal-buttons button {\n  padding: 10px 20px;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s;\n}\n\n.modal-buttons button:first-child {\n  background-color: #4caf50;\n  color: white;\n}\n\n.modal-buttons button:first-child:hover {\n  background-color: #3d8b40;\n}\n\n.modal-buttons button:last-child {\n  background-color: #f5f5f5;\n  color: #333;\n}\n\n.modal-buttons button:last-child:hover {\n  background-color: #e0e0e0;\n}\n\n.participant-emails {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 10px;\n}\n\n.participant-emails input {\n  flex: 1;\n}\n\n.participant-emails button {\n  padding: 0 16px;\n  background-color: #1976d2;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n}\n\n.email-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin-bottom: 16px;\n}\n\n.email-tag {\n  background-color: #e3f2fd;\n  padding: 6px 12px;\n  border-radius: 16px;\n  font-size: 13px;\n  display: flex;\n  align-items: center;\n}\n\n.remove-email {\n  margin-left: 6px;\n  cursor: pointer;\n  font-weight: bold;\n  color: #1976d2;\n}\n\n.join-button {\n  padding: 12px 24px;\n  background-color: #1976d2;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s;\n}\n\n.join-button:hover {\n  background-color: #1565c0;\n  transform: translateY(-1px);\n}\n\n\n.loading {\n  text-align: center;\n  padding: 40px;\n  color: #666;\n  font-style: italic;\n}\n\n.no-discussions {\n  text-align: center;\n  padding: 40px;\n  color: #999;\n  font-style: italic;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}