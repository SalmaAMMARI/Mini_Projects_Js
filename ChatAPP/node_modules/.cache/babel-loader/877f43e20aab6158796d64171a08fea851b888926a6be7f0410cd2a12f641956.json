{"ast":null,"code":"import _objectSpread from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, onMounted, watch, nextTick, onUnmounted, computed } from 'vue';\nimport { getFirestore, collection, doc, getDoc, updateDoc, onSnapshot, query, orderBy, serverTimestamp, addDoc, setDoc, arrayUnion, arrayRemove, deleteField, deleteDoc } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\nexport default {\n  props: {\n    discussionId: {\n      type: String,\n      \"default\": null\n    }\n  },\n  emits: ['hide-discussion'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var discussion = ref(null);\n    var responses = ref([]);\n    var userNames = ref({});\n    var userAvatars = ref({});\n    var userStatuses = ref({});\n    var newMessage = ref('');\n    var messagesContainer = ref(null);\n    var messageElements = ref([]);\n    var isScrolledToBottom = ref(true);\n\n    // Variables for tracking seen status\n    var unreadMessages = ref(new Set());\n    var lastVisibleMessageId = ref(null);\n\n    // Pour message editing\n    var editingMessageId = ref(null);\n    var editMessageContent = ref('');\n    var editTextarea = ref(null);\n\n    // Pour reactions\n    var availableReactions = ref(['👍', '❤️', '😂', '😮', '😢', '👏', '🎉', '🤔']);\n    var showingReactionsFor = ref(null);\n    var reactionPickerPosition = ref({\n      top: 0,\n      left: 0\n    });\n\n    // Pour read receipts tooltip\n    var showingReadReceiptsFor = ref(null);\n    var readReceiptsTooltipPosition = ref({\n      top: 0,\n      left: 0\n    });\n\n    // Pour presence system\n    var presenceUnsubscribe = ref(null);\n    var userStatusInterval = ref(null);\n    var messagesUnsubscribe = ref(null);\n\n    // Pour la suppression de message\n    var showDeleteConfirmation = ref(false);\n    var messageToDelete = ref(null);\n\n    // Computed style for reaction picker positioning\n    var reactionPickerStyle = computed(function () {\n      return {\n        top: \"\".concat(reactionPickerPosition.value.top, \"px\"),\n        left: \"\".concat(reactionPickerPosition.value.left, \"px\")\n      };\n    });\n\n    // Computed style for read receipts tooltip positioning\n    var readReceiptsTooltipStyle = computed(function () {\n      return {\n        top: \"\".concat(readReceiptsTooltipPosition.value.top, \"px\"),\n        left: \"\".concat(readReceiptsTooltipPosition.value.left, \"px\")\n      };\n    });\n    var Hide = function Hide() {\n      emit('hide-discussion');\n    };\n    var isCurrentUser = function isCurrentUser(userId) {\n      var auth = getAuth();\n      var currentUser = auth.currentUser;\n      return currentUser && currentUser.uid === userId;\n    };\n    var isCurrentUserMessage = function isCurrentUserMessage(message) {\n      var auth = getAuth();\n      var currentUser = auth.currentUser;\n      return currentUser && currentUser.uid === message.senderId;\n    };\n\n    // Generate user initials for avatar placeholder\n    var getUserInitials = function getUserInitials(userId) {\n      // If it's current user and we don't have their name yet\n      if (isCurrentUser(userId)) {\n        var auth = getAuth();\n        var currentUser = auth.currentUser;\n        if (currentUser && currentUser.displayName) {\n          var nameParts = currentUser.displayName.split(' ');\n          if (nameParts.length >= 2) {\n            return (nameParts[0][0] + nameParts[1][0]).toUpperCase();\n          } else if (nameParts.length === 1) {\n            return nameParts[0][0].toUpperCase();\n          }\n        }\n        return 'V'; // Vous (default for current user)\n      }\n\n      // For other users, use their name if we have it\n      if (userNames.value[userId]) {\n        var _nameParts = userNames.value[userId].split(' ');\n        if (_nameParts.length >= 2) {\n          return (_nameParts[0][0] + _nameParts[1][0]).toUpperCase();\n        } else if (_nameParts.length === 1) {\n          return _nameParts[0][0].toUpperCase();\n        }\n      }\n      return 'U'; // Unknown (default)\n    };\n    var isUserOnline = function isUserOnline(userId) {\n      var _userStatuses$value$u;\n      return ((_userStatuses$value$u = userStatuses.value[userId]) === null || _userStatuses$value$u === void 0 ? void 0 : _userStatuses$value$u.isOnline) || false;\n    };\n    var formatDate = function formatDate(timestamp) {\n      if (!timestamp) return '';\n      try {\n        var date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);\n        var today = new Date();\n        var isToday = date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n        var timeOptions = {\n          hour: '2-digit',\n          minute: '2-digit'\n        };\n        var dateOptions = {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric'\n        };\n        if (isToday) {\n          return \"Aujourd'hui, \".concat(date.toLocaleTimeString(undefined, timeOptions));\n        } else {\n          return date.toLocaleDateString(undefined, dateOptions) + ', ' + date.toLocaleTimeString(undefined, timeOptions);\n        }\n      } catch (e) {\n        console.error(\"Error formatting date:\", e);\n        return '';\n      }\n    };\n\n    // Handle scroll to track when user is viewing messages\n    var handleScroll = function handleScroll() {\n      if (!messagesContainer.value) return;\n      var _messagesContainer$va = messagesContainer.value,\n        scrollTop = _messagesContainer$va.scrollTop,\n        scrollHeight = _messagesContainer$va.scrollHeight,\n        clientHeight = _messagesContainer$va.clientHeight;\n      isScrolledToBottom.value = Math.abs(scrollHeight - clientHeight - scrollTop) < 20;\n\n      // Mark messages as read when they appear in viewport\n      markVisibleMessagesAsRead();\n    };\n\n    // Scroll to bottom with optional force parameter\n    var scrollToBottom = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var force,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              force = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n              _context.next = 3;\n              return nextTick();\n            case 3:\n              if (messagesContainer.value && (isScrolledToBottom.value || force)) {\n                messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\n              }\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function scrollToBottom() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    // Function to mark visible messages as read\n    var markVisibleMessagesAsRead = function markVisibleMessagesAsRead() {\n      if (!messagesContainer.value || responses.value.length === 0) return;\n      var auth = getAuth();\n      var currentUser = auth.currentUser;\n      if (!currentUser) return;\n      var containerRect = messagesContainer.value.getBoundingClientRect();\n      // Get all message elements\n      if (!messageElements.value) return;\n      var messagesElements = Array.isArray(messageElements.value) ? messageElements.value : [messageElements.value];\n      var messageIds = [];\n\n      // Check which messages are visible\n      messagesElements.forEach(function (el) {\n        if (!el) return;\n        var rect = el.getBoundingClientRect();\n        // Check if element is at least partially visible in container\n        if (rect.top < containerRect.bottom && rect.bottom > containerRect.top) {\n          var messageId = el.getAttribute('data-message-id');\n          if (messageId) {\n            messageIds.push(messageId);\n          }\n        }\n      });\n      // Mark all visible messages as read\n      if (messageIds.length > 0) {\n        messageIds.forEach(function (messageId) {\n          var message = responses.value.find(function (msg) {\n            return msg.id === messageId;\n          });\n          // Only mark others' messages as read\n          if (message && message.senderId !== currentUser.uid) {\n            markMessageAsRead(messageId);\n          }\n        });\n      }\n    };\n    // Function to mark a message as read\n    var markMessageAsRead = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(messageId) {\n        var auth, currentUser, message, db, messageRef;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(!messageId || !props.discussionId)) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 2:\n              auth = getAuth();\n              currentUser = auth.currentUser;\n              if (currentUser) {\n                _context2.next = 6;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 6:\n              _context2.prev = 6;\n              message = responses.value.find(function (msg) {\n                return msg.id === messageId;\n              }); // Skip if message is from current user or already read by current user\n              if (!(!message || message.senderId === currentUser.uid || message.readBy && message.readBy.includes(currentUser.uid))) {\n                _context2.next = 10;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 10:\n              db = getFirestore();\n              messageRef = doc(db, 'discussions', props.discussionId, 'messages', messageId); // Update both readBy array and lastReadAt map\n              _context2.next = 14;\n              return updateDoc(messageRef, _defineProperty({\n                readBy: arrayUnion(currentUser.uid)\n              }, \"lastReadAt.\".concat(currentUser.uid), serverTimestamp()));\n            case 14:\n              // Update locally if needed\n              if (message && !message.readBy) {\n                message.readBy = [currentUser.uid];\n              } else if (message && !message.readBy.includes(currentUser.uid)) {\n                message.readBy.push(currentUser.uid);\n              }\n              if (!message.lastReadAt) {\n                message.lastReadAt = {};\n              }\n              message.lastReadAt[currentUser.uid] = new Date();\n              _context2.next = 22;\n              break;\n            case 19:\n              _context2.prev = 19;\n              _context2.t0 = _context2[\"catch\"](6);\n              console.error(\"Error marking message as read:\", _context2.t0);\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[6, 19]]);\n      }));\n      return function markMessageAsRead(_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    // Get read status class for message indicators\n    var getReadStatusClass = function getReadStatusClass(message) {\n      if (!message.readBy) return 'not-read';\n\n      // If sent by current user, check if others have read it\n      if (isCurrentUserMessage(message)) {\n        var readCount = getReadCount(message);\n        if (readCount === 0) return 'not-read';\n        if (readCount < discussion.value.participants.length - 1) return 'partially-read';\n        return 'all-read';\n      }\n\n      // If received, check if current user has read it\n      var auth = getAuth();\n      var currentUser = auth.currentUser;\n      if (currentUser && message.readBy.includes(currentUser.uid)) {\n        return 'read';\n      }\n      return 'not-read';\n    };\n\n    // Get number of users who've read a message (excluding sender)\n    var getReadCount = function getReadCount(message) {\n      if (!message.readBy || !Array.isArray(message.readBy)) return 0;\n\n      // Count users who have read the message (excluding the sender)\n      return message.readBy.filter(function (userId) {\n        return userId !== message.senderId;\n      }).length;\n    };\n\n    // Get list of users who have read the message with timestamps\n    var getReadUsersList = function getReadUsersList(message) {\n      if (!message || !message.readBy || !Array.isArray(message.readBy) || !message.lastReadAt) {\n        return [];\n      }\n      return message.readBy.filter(function (userId) {\n        return userId !== message.senderId;\n      }) // Exclude sender\n      .map(function (userId) {\n        return {\n          userId: userId,\n          name: isCurrentUser(userId) ? 'Vous' : userNames.value[userId] || 'Utilisateur',\n          timestamp: message.lastReadAt[userId]\n        };\n      }).sort(function (a, b) {\n        // Sort by timestamp if available\n        if (a.timestamp && b.timestamp) {\n          var timeA = a.timestamp.toDate ? a.timestamp.toDate() : new Date(a.timestamp);\n          var timeB = b.timestamp.toDate ? b.timestamp.toDate() : new Date(b.timestamp);\n          return timeA - timeB;\n        }\n        return 0;\n      });\n    };\n\n    // Get list of users who haven't read the message yet\n    var getUnreadUsersList = function getUnreadUsersList(message) {\n      if (!message || !discussion.value || !discussion.value.participants) {\n        return [];\n      }\n\n      // Create a set of user IDs who have read the message\n      var readBySet = new Set(message.readBy || []);\n\n      // Return names of users who haven't read the message (excluding the sender)\n      return discussion.value.participants.filter(function (userId) {\n        return userId !== message.senderId && !readBySet.has(userId);\n      }).map(function (userId) {\n        return isCurrentUser(userId) ? 'Vous' : userNames.value[userId] || 'Utilisateur';\n      });\n    };\n\n    // Show read receipts tooltip\n    var showReadReceipts = function showReadReceipts(message) {\n      showingReadReceiptsFor.value = message;\n\n      // Position the tooltip\n      nextTick(function () {\n        var messageElement = document.querySelector(\"[data-message-id=\\\"\".concat(message.id, \"\\\"]\"));\n        if (messageElement && messagesContainer.value) {\n          var rect = messageElement.getBoundingClientRect();\n          var containerRect = messagesContainer.value.getBoundingClientRect();\n          readReceiptsTooltipPosition.value = {\n            top: rect.bottom - containerRect.top + 5,\n            left: rect.right - containerRect.left - 150 // Position from right side\n          };\n        }\n      });\n    };\n\n    // Hide read receipts tooltip\n    var hideReadReceipts = function hideReadReceipts() {\n      showingReadReceiptsFor.value = null;\n    };\n\n    // Improved function to get user's full name and profile picture from Firestore\n    var fetchUserInfo = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(userId) {\n        var auth, currentUser, profilePicture, fullName, db, userRef, userSnap, userData, _db, _userRef, _userSnap, _userData, _fullName, _profilePicture;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              auth = getAuth();\n              currentUser = auth.currentUser;\n              if (!(currentUser && currentUser.uid === userId)) {\n                _context3.next = 15;\n                break;\n              }\n              profilePicture = currentUser.photoURL;\n              fullName = currentUser.displayName || '';\n              db = getFirestore();\n              userRef = doc(db, 'users', userId);\n              _context3.next = 10;\n              return getDoc(userRef);\n            case 10:\n              userSnap = _context3.sent;\n              if (userSnap.exists()) {\n                userData = userSnap.data(); // Get full name if not already available\n                if (!fullName) {\n                  fullName = \"\".concat(userData.firstName || '', \" \").concat(userData.lastName || '').trim();\n                }\n\n                // Profile picture - use profileImageUrl attribute\n                if (userData.profileImageUrl) {\n                  profilePicture = userData.profileImageUrl;\n                }\n              }\n              return _context3.abrupt(\"return\", {\n                fullName: fullName,\n                profilePicture: profilePicture\n              });\n            case 15:\n              // For other users, check Firestore\n              _db = getFirestore();\n              _userRef = doc(_db, 'users', userId);\n              _context3.next = 19;\n              return getDoc(_userRef);\n            case 19:\n              _userSnap = _context3.sent;\n              if (!_userSnap.exists()) {\n                _context3.next = 25;\n                break;\n              }\n              _userData = _userSnap.data(); // Get full name\n              _fullName = \"\".concat(_userData.firstName || '', \" \").concat(_userData.lastName || '').trim(); // Get profile picture URL - use profileImageUrl attribute\n              _profilePicture = _userData.profileImageUrl || null;\n              return _context3.abrupt(\"return\", {\n                fullName: _fullName,\n                profilePicture: _profilePicture\n              });\n            case 25:\n              return _context3.abrupt(\"return\", {\n                fullName: null,\n                profilePicture: null\n              });\n            case 28:\n              _context3.prev = 28;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(\"Error fetching user info for \".concat(userId, \":\"), _context3.t0);\n              return _context3.abrupt(\"return\", {\n                fullName: null,\n                profilePicture: null\n              });\n            case 32:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 28]]);\n      }));\n      return function fetchUserInfo(_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    // Get user display name with caching\n    var getUserDisplayName = function getUserDisplayName(userId) {\n      var auth = getAuth();\n      var currentUser = auth.currentUser;\n      if (currentUser && currentUser.uid === userId) {\n        return 'Vous';\n      }\n      if (userNames.value[userId]) {\n        return userNames.value[userId];\n      }\n\n      // Otherwise fetch it and update cache\n      fetchUserInfo(userId).then(function (userInfo) {\n        if (userInfo.fullName) {\n          userNames.value[userId] = userInfo.fullName;\n        } else {\n          userNames.value[userId] = userId;\n        }\n\n        // Also update avatar if available\n        if (userInfo.profilePicture) {\n          userAvatars.value[userId] = userInfo.profilePicture;\n        }\n      })[\"catch\"](function () {\n        userNames.value[userId] = userId;\n      });\n      return userNames.value[userId] || 'Chargement...';\n    };\n\n    // Load all user info for participants with refreshed data\n    var loadAllUserInfo = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(userIds) {\n        var uniqueIds, _iterator, _step, userId, _userInfo, auth, currentUser, userInfo;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              uniqueIds = _toConsumableArray(new Set(userIds));\n              _iterator = _createForOfIteratorHelper(uniqueIds);\n              _context4.prev = 2;\n              _iterator.s();\n            case 4:\n              if ((_step = _iterator.n()).done) {\n                _context4.next = 13;\n                break;\n              }\n              userId = _step.value;\n              _context4.next = 8;\n              return fetchUserInfo(userId);\n            case 8:\n              _userInfo = _context4.sent;\n              if (_userInfo.fullName) {\n                userNames.value[userId] = _userInfo.fullName;\n              } else {\n                userNames.value[userId] = userId;\n              }\n              if (_userInfo.profilePicture) {\n                userAvatars.value[userId] = _userInfo.profilePicture;\n              }\n            case 11:\n              _context4.next = 4;\n              break;\n            case 13:\n              _context4.next = 18;\n              break;\n            case 15:\n              _context4.prev = 15;\n              _context4.t0 = _context4[\"catch\"](2);\n              _iterator.e(_context4.t0);\n            case 18:\n              _context4.prev = 18;\n              _iterator.f();\n              return _context4.finish(18);\n            case 21:\n              // Make sure current user's info is up to date\n              auth = getAuth();\n              currentUser = auth.currentUser;\n              if (!currentUser) {\n                _context4.next = 28;\n                break;\n              }\n              _context4.next = 26;\n              return fetchUserInfo(currentUser.uid);\n            case 26:\n              userInfo = _context4.sent;\n              if (userInfo.profilePicture) {\n                userAvatars.value[currentUser.uid] = userInfo.profilePicture;\n              } else if (currentUser.photoURL) {\n                userAvatars.value[currentUser.uid] = currentUser.photoURL;\n              }\n            case 28:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[2, 15, 18, 21]]);\n      }));\n      return function loadAllUserInfo(_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    // Message editing functions\n    var startEditMessage = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(message) {\n        var auth, currentUser;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              auth = getAuth();\n              currentUser = auth.currentUser;\n              if (!(!currentUser || currentUser.uid !== message.senderId)) {\n                _context5.next = 4;\n                break;\n              }\n              return _context5.abrupt(\"return\");\n            case 4:\n              editingMessageId.value = message.id;\n              editMessageContent.value = message.content;\n\n              // Focus the edit textarea after it renders\n              _context5.next = 8;\n              return nextTick();\n            case 8:\n              if (editTextarea.value) {\n                if (Array.isArray(editTextarea.value)) {\n                  if (editTextarea.value[0]) {\n                    editTextarea.value[0].focus();\n                  }\n                } else {\n                  editTextarea.value.focus();\n                }\n              }\n            case 9:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }));\n      return function startEditMessage(_x4) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n    var saveMessageEdit = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(messageId) {\n        var auth, currentUser, db, messageRef;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (editMessageContent.value.trim()) {\n                _context6.next = 2;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 2:\n              _context6.prev = 2;\n              auth = getAuth();\n              currentUser = auth.currentUser;\n              if (currentUser) {\n                _context6.next = 8;\n                break;\n              }\n              alert(\"Vous devez être connecté pour modifier un message\");\n              return _context6.abrupt(\"return\");\n            case 8:\n              db = getFirestore();\n              messageRef = doc(db, 'discussions', props.discussionId, 'messages', messageId);\n              _context6.next = 12;\n              return updateDoc(messageRef, {\n                content: editMessageContent.value.trim(),\n                edited: true,\n                editedAt: serverTimestamp()\n              });\n            case 12:\n              // Reset editing state\n              editingMessageId.value = null;\n              editMessageContent.value = '';\n              _context6.next = 20;\n              break;\n            case 16:\n              _context6.prev = 16;\n              _context6.t0 = _context6[\"catch\"](2);\n              console.error(\"Erreur lors de la modification du message:\", _context6.t0);\n              alert(\"Une erreur s'est produite lors de la modification du message\");\n            case 20:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[2, 16]]);\n      }));\n      return function saveMessageEdit(_x5) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n    var cancelMessageEdit = function cancelMessageEdit() {\n      editingMessageId.value = null;\n      editMessageContent.value = '';\n    };\n\n    // Message deletion functions\n    var confirmDeleteMessage = function confirmDeleteMessage(messageId) {\n      messageToDelete.value = messageId;\n      showDeleteConfirmation.value = true;\n    };\n    var cancelDeleteConfirmation = function cancelDeleteConfirmation() {\n      messageToDelete.value = null;\n      showDeleteConfirmation.value = false;\n    };\n    var deleteMessage = /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var auth, currentUser, message, db, messageRef, lastMessage, newLastMessage;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (messageToDelete.value) {\n                _context7.next = 2;\n                break;\n              }\n              return _context7.abrupt(\"return\");\n            case 2:\n              _context7.prev = 2;\n              auth = getAuth();\n              currentUser = auth.currentUser;\n              if (currentUser) {\n                _context7.next = 8;\n                break;\n              }\n              alert(\"Vous devez être connecté pour supprimer un message\");\n              return _context7.abrupt(\"return\");\n            case 8:\n              message = responses.value.find(function (msg) {\n                return msg.id === messageToDelete.value;\n              }); // Verify user owns this message\n              if (!(!message || message.senderId !== currentUser.uid)) {\n                _context7.next = 13;\n                break;\n              }\n              alert(\"Vous ne pouvez supprimer que vos propres messages\");\n              cancelDeleteConfirmation();\n              return _context7.abrupt(\"return\");\n            case 13:\n              db = getFirestore();\n              messageRef = doc(db, 'discussions', props.discussionId, 'messages', messageToDelete.value); // Delete the message document\n              _context7.next = 17;\n              return deleteDoc(messageRef);\n            case 17:\n              // If this was the last message in the discussion, update the discussion's lastActivity\n              lastMessage = responses.value[responses.value.length - 1];\n              if (!(lastMessage && lastMessage.id === messageToDelete.value)) {\n                _context7.next = 27;\n                break;\n              }\n              // Find the new last message\n              newLastMessage = responses.value[responses.value.length - 2];\n              if (!newLastMessage) {\n                _context7.next = 25;\n                break;\n              }\n              _context7.next = 23;\n              return updateDoc(doc(db, 'discussions', props.discussionId), {\n                lastActivity: newLastMessage.createdAt,\n                lastMessageSenderId: newLastMessage.senderId,\n                lastMessageText: newLastMessage.content.substring(0, 100)\n              });\n            case 23:\n              _context7.next = 27;\n              break;\n            case 25:\n              _context7.next = 27;\n              return updateDoc(doc(db, 'discussions', props.discussionId), {\n                lastActivity: serverTimestamp(),\n                lastMessageSenderId: null,\n                lastMessageText: null\n              });\n            case 27:\n              // Close confirmation modal and clear state\n              cancelDeleteConfirmation();\n              _context7.next = 35;\n              break;\n            case 30:\n              _context7.prev = 30;\n              _context7.t0 = _context7[\"catch\"](2);\n              console.error(\"Erreur lors de la suppression du message:\", _context7.t0);\n              alert(\"Une erreur s'est produite lors de la suppression du message\");\n              cancelDeleteConfirmation();\n            case 35:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[2, 30]]);\n      }));\n      return function deleteMessage() {\n        return _ref8.apply(this, arguments);\n      };\n    }();\n\n    // Message reaction functions\n    var showReactionPicker = function showReactionPicker(messageId) {\n      showingReactionsFor.value = messageId;\n\n      // Position the picker\n      nextTick(function () {\n        var messageElement = document.querySelector(\"[data-message-id=\\\"\".concat(messageId, \"\\\"]\"));\n        if (messageElement && messagesContainer.value) {\n          var rect = messageElement.getBoundingClientRect();\n          var containerRect = messagesContainer.value.getBoundingClientRect();\n          reactionPickerPosition.value = {\n            top: rect.bottom - containerRect.top + 5,\n            left: rect.left - containerRect.left\n          };\n        }\n      });\n    };\n    var addReaction = /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(messageId, emoji) {\n        var auth, currentUser, db, messageRef, message, hasReacted, usersWithReaction;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              auth = getAuth();\n              currentUser = auth.currentUser;\n              if (currentUser) {\n                _context8.next = 5;\n                break;\n              }\n              alert(\"Vous devez être connecté pour réagir à un message\");\n              return _context8.abrupt(\"return\");\n            case 5:\n              _context8.prev = 5;\n              db = getFirestore();\n              messageRef = doc(db, 'discussions', props.discussionId, 'messages', messageId); // Toggle reaction (add if not present, remove if already added)\n              message = responses.value.find(function (msg) {\n                return msg.id === messageId;\n              });\n              hasReacted = hasUserReacted(message, emoji);\n              if (!hasReacted) {\n                _context8.next = 20;\n                break;\n              }\n              _context8.next = 13;\n              return updateDoc(messageRef, _defineProperty({}, \"reactions.\".concat(emoji, \".\").concat(currentUser.uid), deleteField()));\n            case 13:\n              if (!(message && message.reactions && message.reactions[emoji])) {\n                _context8.next = 18;\n                break;\n              }\n              usersWithReaction = Object.keys(message.reactions[emoji]).filter(function (id) {\n                return id !== currentUser.uid;\n              });\n              if (!(usersWithReaction.length === 0)) {\n                _context8.next = 18;\n                break;\n              }\n              _context8.next = 18;\n              return updateDoc(messageRef, _defineProperty({}, \"reactions.\".concat(emoji), deleteField()));\n            case 18:\n              _context8.next = 22;\n              break;\n            case 20:\n              _context8.next = 22;\n              return updateDoc(messageRef, _defineProperty({}, \"reactions.\".concat(emoji, \".\").concat(currentUser.uid), serverTimestamp()));\n            case 22:\n              // Close reaction picker\n              showingReactionsFor.value = null;\n              _context8.next = 28;\n              break;\n            case 25:\n              _context8.prev = 25;\n              _context8.t0 = _context8[\"catch\"](5);\n              console.error(\"Erreur lors de l'ajout d'une réaction:\", _context8.t0);\n            case 28:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[5, 25]]);\n      }));\n      return function addReaction(_x6, _x7) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n    var toggleReaction = function toggleReaction(messageId, emoji) {\n      addReaction(messageId, emoji);\n    };\n    var hasUserReacted = function hasUserReacted(message, emoji) {\n      var auth = getAuth();\n      var currentUser = auth.currentUser;\n      if (!currentUser || !message || !message.reactions || !message.reactions[emoji]) {\n        return false;\n      }\n      return !!message.reactions[emoji][currentUser.uid];\n    };\n\n    // Send message\n    var sendMessage = /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var auth, currentUser, db, messageRef;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (newMessage.value.trim()) {\n                _context9.next = 2;\n                break;\n              }\n              return _context9.abrupt(\"return\");\n            case 2:\n              _context9.prev = 2;\n              auth = getAuth();\n              currentUser = auth.currentUser;\n              if (currentUser) {\n                _context9.next = 8;\n                break;\n              }\n              alert(\"Vous devez être connecté pour envoyer un message\");\n              return _context9.abrupt(\"return\");\n            case 8:\n              db = getFirestore(); // Add message to the discussion\n              _context9.next = 11;\n              return addDoc(collection(db, 'discussions', props.discussionId, 'messages'), {\n                content: newMessage.value.trim(),\n                senderId: currentUser.uid,\n                createdAt: serverTimestamp(),\n                readBy: [currentUser.uid],\n                // Mark as read by sender\n                lastReadAt: _defineProperty({}, currentUser.uid, serverTimestamp())\n              });\n            case 11:\n              messageRef = _context9.sent;\n              _context9.next = 14;\n              return updateDoc(doc(db, 'discussions', props.discussionId), {\n                lastActivity: serverTimestamp(),\n                lastMessageSenderId: currentUser.uid,\n                lastMessageText: newMessage.value.trim().substring(0, 100)\n              });\n            case 14:\n              // Clear input\n              newMessage.value = '';\n\n              // Force scroll to bottom for new messages\n              scrollToBottom(true);\n              _context9.next = 22;\n              break;\n            case 18:\n              _context9.prev = 18;\n              _context9.t0 = _context9[\"catch\"](2);\n              console.error(\"Erreur lors de l'envoi du message:\", _context9.t0);\n              alert(\"Une erreur s'est produite lors de l'envoi du message\");\n            case 22:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[2, 18]]);\n      }));\n      return function sendMessage() {\n        return _ref10.apply(this, arguments);\n      };\n    }();\n\n    // User presence handling\n    var updateUserPresence = /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var auth, currentUser, db, presenceRef;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              auth = getAuth();\n              currentUser = auth.currentUser;\n              if (!(!currentUser || !props.discussionId)) {\n                _context10.next = 4;\n                break;\n              }\n              return _context10.abrupt(\"return\");\n            case 4:\n              _context10.prev = 4;\n              db = getFirestore();\n              presenceRef = doc(db, 'presence', currentUser.uid); // Update user's online status\n              _context10.next = 9;\n              return setDoc(presenceRef, {\n                userId: currentUser.uid,\n                online: true,\n                lastActive: serverTimestamp(),\n                currentDiscussion: props.discussionId\n              }, {\n                merge: true\n              });\n            case 9:\n              _context10.next = 14;\n              break;\n            case 11:\n              _context10.prev = 11;\n              _context10.t0 = _context10[\"catch\"](4);\n              console.error(\"Error updating presence:\", _context10.t0);\n            case 14:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, null, [[4, 11]]);\n      }));\n      return function updateUserPresence() {\n        return _ref11.apply(this, arguments);\n      };\n    }();\n\n    // Listen for presence changes of all participants\n    var listenToPresence = function listenToPresence() {\n      if (!discussion.value || !discussion.value.participants) return;\n      var db = getFirestore();\n      var auth = getAuth();\n      var currentUser = auth.currentUser;\n\n      // Clear previous listener if any\n      if (presenceUnsubscribe.value) {\n        presenceUnsubscribe.value();\n        presenceUnsubscribe.value = null;\n      }\n\n      // Set up listeners for all participants\n      var listeners = discussion.value.participants.map(function (userId) {\n        var presenceRef = doc(db, 'presence', userId);\n        return onSnapshot(presenceRef, function (doc) {\n          if (doc.exists()) {\n            var presenceData = doc.data();\n            // Update user status\n            userStatuses.value[userId] = {\n              isOnline: presenceData.online || false,\n              lastActive: presenceData.lastActive,\n              currentDiscussion: presenceData.currentDiscussion\n            };\n          } else {\n            // User has no presence record\n            userStatuses.value[userId] = {\n              isOnline: false,\n              lastActive: null,\n              currentDiscussion: null\n            };\n          }\n        }, function (error) {\n          console.error(\"Error listening to presence for \".concat(userId, \":\"), error);\n        });\n      });\n\n      // Combine unsubscribe functions\n      presenceUnsubscribe.value = function () {\n        listeners.forEach(function (unsubscribe) {\n          return unsubscribe();\n        });\n      };\n\n      // Set current user as online immediately\n      if (currentUser) {\n        userStatuses.value[currentUser.uid] = {\n          isOnline: true,\n          lastActive: new Date(),\n          currentDiscussion: props.discussionId\n        };\n      }\n    };\n\n    // Load discussion data\n    var loadDiscussion = /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var db, discussionDoc;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              if (props.discussionId) {\n                _context11.next = 2;\n                break;\n              }\n              return _context11.abrupt(\"return\");\n            case 2:\n              _context11.prev = 2;\n              db = getFirestore();\n              _context11.next = 6;\n              return getDoc(doc(db, 'discussions', props.discussionId));\n            case 6:\n              discussionDoc = _context11.sent;\n              if (!discussionDoc.exists()) {\n                _context11.next = 16;\n                break;\n              }\n              discussion.value = _objectSpread({\n                id: discussionDoc.id\n              }, discussionDoc.data());\n\n              // Load profile info for all participants\n              if (!(discussion.value.participants && discussion.value.participants.length > 0)) {\n                _context11.next = 12;\n                break;\n              }\n              _context11.next = 12;\n              return loadAllUserInfo(discussion.value.participants);\n            case 12:\n              // Set up presence tracking\n              listenToPresence();\n\n              // Load messages\n              loadMessages();\n              _context11.next = 18;\n              break;\n            case 16:\n              console.error(\"Discussion not found\");\n              discussion.value = null;\n            case 18:\n              _context11.next = 24;\n              break;\n            case 20:\n              _context11.prev = 20;\n              _context11.t0 = _context11[\"catch\"](2);\n              console.error(\"Error loading discussion:\", _context11.t0);\n              discussion.value = null;\n            case 24:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, null, [[2, 20]]);\n      }));\n      return function loadDiscussion() {\n        return _ref12.apply(this, arguments);\n      };\n    }();\n\n    // Load messages with real-time updates\n    var loadMessages = function loadMessages() {\n      if (!props.discussionId) return;\n\n      // Clean up existing listener if any\n      if (messagesUnsubscribe.value) {\n        messagesUnsubscribe.value();\n        messagesUnsubscribe.value = null;\n      }\n      var db = getFirestore();\n      var messagesQuery = query(collection(db, 'discussions', props.discussionId, 'messages'), orderBy('createdAt', 'asc'));\n\n      // Set up the listener\n      messagesUnsubscribe.value = onSnapshot(messagesQuery, function (snapshot) {\n        // Check if we got results\n        if (snapshot.empty) {\n          responses.value = [];\n          return;\n        }\n        var newMessages = [];\n        var userIdsToLoad = new Set();\n        snapshot.forEach(function (doc) {\n          var messageData = _objectSpread({\n            id: doc.id\n          }, doc.data());\n          newMessages.push(messageData);\n\n          // Collect user IDs we need to load info for\n          if (messageData.senderId) {\n            userIdsToLoad.add(messageData.senderId);\n          }\n        });\n\n        // Update messages array\n        responses.value = newMessages;\n\n        // Load missing user info for message senders\n        loadAllUserInfo(_toConsumableArray(userIdsToLoad));\n\n        // Scroll to bottom if we're already at the bottom or for first load\n        scrollToBottom();\n\n        // Mark visible messages as read after a short delay\n        setTimeout(function () {\n          markVisibleMessagesAsRead();\n        }, 1000);\n      }, function (error) {\n        console.error(\"Error loading messages:\", error);\n      });\n    };\n\n    // Watch for discussion ID changes\n    watch(function () {\n      return props.discussionId;\n    }, function (newDiscussionId, oldDiscussionId) {\n      if (newDiscussionId && newDiscussionId !== oldDiscussionId) {\n        // Clear old data\n        discussion.value = null;\n        responses.value = [];\n\n        // Load new discussion\n        loadDiscussion();\n      } else if (!newDiscussionId) {\n        // Clear data if no discussion is selected\n        discussion.value = null;\n        responses.value = [];\n      }\n    }, {\n      immediate: true\n    });\n\n    // Set up regular presence updates\n    onMounted(function () {\n      // Update presence immediately\n      updateUserPresence();\n\n      // Set up interval for regular updates\n      userStatusInterval.value = setInterval(function () {\n        updateUserPresence();\n      }, 60000); // Update every minute\n    });\n\n    // Clean up when unmounting\n    onUnmounted(function () {\n      // Clear presence update interval\n      if (userStatusInterval.value) {\n        clearInterval(userStatusInterval.value);\n        userStatusInterval.value = null;\n      }\n\n      // Clean up presence listener\n      if (presenceUnsubscribe.value) {\n        presenceUnsubscribe.value();\n        presenceUnsubscribe.value = null;\n      }\n\n      // Clean up messages listener\n      if (messagesUnsubscribe.value) {\n        messagesUnsubscribe.value();\n        messagesUnsubscribe.value = null;\n      }\n\n      // Set user as offline when leaving\n      var auth = getAuth();\n      var currentUser = auth.currentUser;\n      if (currentUser) {\n        try {\n          var db = getFirestore();\n          var presenceRef = doc(db, 'presence', currentUser.uid);\n          setDoc(presenceRef, {\n            online: false,\n            lastActive: serverTimestamp(),\n            currentDiscussion: null\n          }, {\n            merge: true\n          });\n        } catch (error) {\n          console.error(\"Error updating offline status:\", error);\n        }\n      }\n    });\n    return {\n      discussion: discussion,\n      responses: responses,\n      userNames: userNames,\n      userAvatars: userAvatars,\n      userStatuses: userStatuses,\n      newMessage: newMessage,\n      messagesContainer: messagesContainer,\n      messageElements: messageElements,\n      isScrolledToBottom: isScrolledToBottom,\n      editingMessageId: editingMessageId,\n      editMessageContent: editMessageContent,\n      editTextarea: editTextarea,\n      availableReactions: availableReactions,\n      showingReactionsFor: showingReactionsFor,\n      reactionPickerStyle: reactionPickerStyle,\n      showingReadReceiptsFor: showingReadReceiptsFor,\n      readReceiptsTooltipStyle: readReceiptsTooltipStyle,\n      showDeleteConfirmation: showDeleteConfirmation,\n      Hide: Hide,\n      handleScroll: handleScroll,\n      sendMessage: sendMessage,\n      formatDate: formatDate,\n      isCurrentUser: isCurrentUser,\n      isCurrentUserMessage: isCurrentUserMessage,\n      getUserInitials: getUserInitials,\n      startEditMessage: startEditMessage,\n      saveMessageEdit: saveMessageEdit,\n      cancelMessageEdit: cancelMessageEdit,\n      confirmDeleteMessage: confirmDeleteMessage,\n      cancelDeleteConfirmation: cancelDeleteConfirmation,\n      deleteMessage: deleteMessage,\n      showReactionPicker: showReactionPicker,\n      addReaction: addReaction,\n      toggleReaction: toggleReaction,\n      hasUserReacted: hasUserReacted,\n      getReadStatusClass: getReadStatusClass,\n      getReadCount: getReadCount,\n      getReadUsersList: getReadUsersList,\n      getUnreadUsersList: getUnreadUsersList,\n      showReadReceipts: showReadReceipts,\n      hideReadReceipts: hideReadReceipts,\n      getUserDisplayName: getUserDisplayName,\n      isUserOnline: isUserOnline\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","nextTick","onUnmounted","computed","getFirestore","collection","doc","getDoc","updateDoc","onSnapshot","query","orderBy","serverTimestamp","addDoc","setDoc","arrayUnion","arrayRemove","deleteField","deleteDoc","getAuth","props","discussionId","type","String","emits","setup","_ref","emit","discussion","responses","userNames","userAvatars","userStatuses","newMessage","messagesContainer","messageElements","isScrolledToBottom","unreadMessages","Set","lastVisibleMessageId","editingMessageId","editMessageContent","editTextarea","availableReactions","showingReactionsFor","reactionPickerPosition","top","left","showingReadReceiptsFor","readReceiptsTooltipPosition","presenceUnsubscribe","userStatusInterval","messagesUnsubscribe","showDeleteConfirmation","messageToDelete","reactionPickerStyle","concat","value","readReceiptsTooltipStyle","Hide","isCurrentUser","userId","auth","currentUser","uid","isCurrentUserMessage","message","senderId","getUserInitials","displayName","nameParts","split","length","toUpperCase","isUserOnline","_userStatuses$value$u","isOnline","formatDate","timestamp","date","toDate","Date","today","isToday","getDate","getMonth","getFullYear","timeOptions","hour","minute","dateOptions","day","month","year","toLocaleTimeString","undefined","toLocaleDateString","e","console","error","handleScroll","_messagesContainer$va","scrollTop","scrollHeight","clientHeight","Math","abs","markVisibleMessagesAsRead","scrollToBottom","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","force","_args","arguments","wrap","_callee$","_context","prev","next","stop","apply","containerRect","getBoundingClientRect","messagesElements","Array","isArray","messageIds","forEach","el","rect","bottom","messageId","getAttribute","push","find","msg","id","markMessageAsRead","_ref3","_callee2","db","messageRef","_callee2$","_context2","abrupt","readBy","includes","_defineProperty","lastReadAt","t0","_x","getReadStatusClass","readCount","getReadCount","participants","filter","getReadUsersList","map","name","sort","a","b","timeA","timeB","getUnreadUsersList","readBySet","has","showReadReceipts","messageElement","document","querySelector","right","hideReadReceipts","fetchUserInfo","_ref4","_callee3","profilePicture","fullName","userRef","userSnap","userData","_db","_userRef","_userSnap","_userData","_fullName","_profilePicture","_callee3$","_context3","photoURL","sent","exists","data","firstName","lastName","trim","profileImageUrl","_x2","getUserDisplayName","then","userInfo","loadAllUserInfo","_ref5","_callee4","userIds","uniqueIds","_iterator","_step","_userInfo","_callee4$","_context4","_toConsumableArray","_createForOfIteratorHelper","s","n","done","f","finish","_x3","startEditMessage","_ref6","_callee5","_callee5$","_context5","content","focus","_x4","saveMessageEdit","_ref7","_callee6","_callee6$","_context6","alert","edited","editedAt","_x5","cancelMessageEdit","confirmDeleteMessage","cancelDeleteConfirmation","deleteMessage","_ref8","_callee7","lastMessage","newLastMessage","_callee7$","_context7","lastActivity","createdAt","lastMessageSenderId","lastMessageText","substring","showReactionPicker","addReaction","_ref9","_callee8","emoji","hasReacted","usersWithReaction","_callee8$","_context8","hasUserReacted","reactions","Object","keys","_x6","_x7","toggleReaction","sendMessage","_ref10","_callee9","_callee9$","_context9","updateUserPresence","_ref11","_callee10","presenceRef","_callee10$","_context10","online","lastActive","currentDiscussion","merge","listenToPresence","listeners","presenceData","unsubscribe","loadDiscussion","_ref12","_callee11","discussionDoc","_callee11$","_context11","_objectSpread","loadMessages","messagesQuery","snapshot","empty","newMessages","userIdsToLoad","messageData","add","setTimeout","newDiscussionId","oldDiscussionId","immediate","setInterval","clearInterval"],"sources":["/workspaces/Mini_Projects_Js/ChatAPP/src/components/Responses.vue"],"sourcesContent":["<template>\r\n  <div v-if=\"discussionId\">\r\n    <button @click=\"Hide\" class=\"back-button\">\r\n      <span class=\"back-icon\">←</span> Retour aux discussions\r\n    </button>\r\n    <div v-if=\"discussion\" class=\"chat-container\">\r\n      <!-- Updated discussion info and participants section -->\r\n      <div class=\"discussion-header\">\r\n        <h2>{{ discussion.title }}</h2>\r\n        <p v-if=\"discussion.description\">{{ discussion.description }}</p>\r\n      </div>\r\n      \r\n      <!-- Condensed participants display -->\r\n      <div class=\"participants-bar\">\r\n        <div class=\"participants-label\">Participants</div>\r\n        <div class=\"participants-list\">\r\n          <div v-for=\"userId in discussion.participants\" :key=\"userId\" \r\n               class=\"participant-item\">\r\n            <div class=\"participant-avatar\">\r\n              <img v-if=\"userAvatars[userId]\" :src=\"userAvatars[userId]\" alt=\"Avatar\" class=\"avatar-img\">\r\n              <div v-else class=\"user-initials\">{{ getUserInitials(userId) }}</div>\r\n              <div class=\"status-indicator\" :class=\"{ 'online': isUserOnline(userId), 'offline': !isUserOnline(userId) }\"></div>\r\n            </div>\r\n            <div class=\"participant-name\">\r\n              {{ isCurrentUser(userId) ? 'Vous' : (userNames[userId] || 'Utilisateur') }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"messages-container\" ref=\"messagesContainer\" @scroll=\"handleScroll\">\r\n        <div v-if=\"responses.length === 0\" class=\"no-messages\">\r\n          Aucun message dans cette discussion. Soyez le premier à écrire !\r\n        </div>\r\n        \r\n        <div v-for=\"message in responses\" :key=\"message.id\"\r\n              :class=\"{'sender-message': isCurrentUserMessage(message), 'receiver-message': !isCurrentUserMessage(message)}\"\r\n              class=\"message\"\r\n              :data-message-id=\"message.id\"\r\n              ref=\"messageElements\">\r\n          <!-- User profile picture -->\r\n          <div class=\"message-avatar\">\r\n            <div class=\"user-avatar\">\r\n              <img v-if=\"userAvatars[message.senderId]\" :src=\"userAvatars[message.senderId]\" alt=\"Avatar\" class=\"avatar-img\">\r\n              <div v-else class=\"avatar-placeholder\">{{ getUserInitials(message.senderId) }}</div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"message-bubble\">\r\n            <!-- Message content - show edit interface if editing this message -->\r\n            <div v-if=\"editingMessageId === message.id\" class=\"edit-message-container\">\r\n              <textarea \r\n                v-model=\"editMessageContent\" \r\n                class=\"edit-message-input\"\r\n                ref=\"editTextarea\"\r\n                @keyup.enter.exact=\"saveMessageEdit(message.id)\"\r\n                @keyup.escape=\"cancelMessageEdit\"\r\n              ></textarea>\r\n              <div class=\"edit-actions\">\r\n                <button @click=\"saveMessageEdit(message.id)\" class=\"edit-save-btn\">Enregistrer</button>\r\n                <button @click=\"cancelMessageEdit\" class=\"edit-cancel-btn\">Annuler</button>\r\n              </div>\r\n            </div>\r\n            <div v-else class=\"message-content\">\r\n              {{message.content}}\r\n              <span v-if=\"message.edited\" class=\"edited-indicator\">(modifié)</span>\r\n            </div>\r\n            \r\n            <!-- Message reactions -->\r\n            <div class=\"message-reactions\">\r\n              <!-- Display existing reactions -->\r\n              <div v-if=\"message.reactions && Object.keys(message.reactions).length > 0\" class=\"reactions-list\">\r\n                <div v-for=\"(users, emoji) in message.reactions\" :key=\"emoji\" \r\n                     class=\"reaction-badge\" \r\n                     :class=\"{ 'user-reacted': hasUserReacted(message, emoji) }\"\r\n                     @click=\"toggleReaction(message.id, emoji)\">\r\n                  <span class=\"reaction-emoji\">{{ emoji }}</span>\r\n                  <span class=\"reaction-count\">{{ Object.keys(users).length }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"message-meta\">\r\n              <div class=\"user-info\">\r\n                <span class=\"user-name\">{{ isCurrentUserMessage(message) ? 'Vous' : getUserDisplayName(message.senderId) }}</span>\r\n                <span class=\"timestamp\" v-if=\"message.createdAt\">{{ formatDate(message.createdAt) }}</span>\r\n              </div>\r\n              \r\n              <div class=\"message-actions\" v-if=\"!editingMessageId\">\r\n                <!-- Edit option for own messages -->\r\n                <button v-if=\"isCurrentUserMessage(message)\" @click=\"startEditMessage(message)\" class=\"action-btn\" title=\"Modifier ce message\">\r\n                  <span class=\"edit-icon\">✎</span>\r\n                </button>\r\n                \r\n                <!-- Delete option for own messages -->\r\n                <button v-if=\"isCurrentUserMessage(message)\" @click=\"confirmDeleteMessage(message.id)\" class=\"action-btn delete-btn\" title=\"Supprimer ce message\">\r\n                  <span class=\"delete-icon\">🗑️</span>\r\n                </button>\r\n                \r\n                <!-- Reaction button for all messages -->\r\n                <button @click=\"showReactionPicker(message.id)\" class=\"action-btn\" title=\"Réagir à ce message\">\r\n                  <span class=\"reaction-icon\">😀</span>\r\n                </button>\r\n                \r\n                <!-- Read status information for sent messages - Now always visible -->\r\n                <div v-if=\"isCurrentUserMessage(message)\" class=\"read-status\" @mouseenter=\"showReadReceipts(message)\" @mouseleave=\"hideReadReceipts()\">\r\n                  <span class=\"read-status-icon\" :class=\"getReadStatusClass(message)\">\r\n                    <span v-if=\"getReadCount(message) > 0\" class=\"read-count\">{{ getReadCount(message) }}</span>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Read receipts tooltip -->\r\n        <div v-if=\"showingReadReceiptsFor\" class=\"read-receipts-tooltip\" :style=\"readReceiptsTooltipStyle\">\r\n          <div class=\"read-receipts-content\">\r\n            <div v-if=\"getReadUsersList(showingReadReceiptsFor).length > 0\">\r\n              <strong>Lu par:</strong>\r\n              <ul class=\"read-users-list\">\r\n                <li v-for=\"(info, index) in getReadUsersList(showingReadReceiptsFor)\" :key=\"index\" class=\"read-user-item\">\r\n                  <span class=\"read-user-name\">{{ info.name }}</span>\r\n                  <span class=\"read-timestamp\">{{ formatDate(info.timestamp) }}</span>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div v-if=\"getUnreadUsersList(showingReadReceiptsFor).length > 0\">\r\n              <strong>Pas encore lu par:</strong>\r\n              <ul class=\"unread-users-list\">\r\n                <li v-for=\"(name, index) in getUnreadUsersList(showingReadReceiptsFor)\" :key=\"index\" class=\"unread-user-item\">\r\n                  {{ name }}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div v-if=\"getReadUsersList(showingReadReceiptsFor).length === 0 && getUnreadUsersList(showingReadReceiptsFor).length === 0\">\r\n              Aucune information de lecture disponible.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Reaction picker overlay -->\r\n        <div v-if=\"showingReactionsFor\" class=\"reaction-picker\" :style=\"reactionPickerStyle\">\r\n          <div class=\"reaction-picker-content\">\r\n            <button v-for=\"emoji in availableReactions\" :key=\"emoji\" \r\n                    class=\"reaction-btn\" \r\n                    @click=\"addReaction(showingReactionsFor, emoji)\">\r\n              {{ emoji }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Delete confirmation modal -->\r\n        <div v-if=\"showDeleteConfirmation\" class=\"delete-confirmation-modal\">\r\n          <div class=\"delete-modal-content\">\r\n            <h3>Confirmer la suppression</h3>\r\n            <p>Êtes-vous sûr de vouloir supprimer ce message ?</p>\r\n            <div class=\"delete-modal-actions\">\r\n              <button @click=\"deleteMessage\" class=\"delete-confirm-btn\">Supprimer</button>\r\n              <button @click=\"cancelDeleteConfirmation\" class=\"delete-cancel-btn\">Annuler</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"message-input-container\">\r\n        <form @submit.prevent=\"sendMessage\" class=\"message-form\">\r\n          <input \r\n            v-model=\"newMessage\" \r\n            type=\"text\" \r\n            placeholder=\"Écrivez votre message ici...\" \r\n            class=\"message-input\"\r\n          />\r\n          <button type=\"submit\" class=\"send-button\">Envoyer</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <div v-else class=\"loading\">\r\n      Chargement de la discussion...\r\n    </div>\r\n  </div>\r\n  <div v-else class=\"no-discussion-selected\">\r\n    Sélectionnez une discussion pour voir les messages\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, watch, nextTick, onUnmounted, computed } from 'vue';\r\nimport { \r\n  getFirestore, \r\n  collection, \r\n  doc, \r\n  getDoc, \r\n  updateDoc, \r\n  onSnapshot, \r\n  query, \r\n  orderBy, \r\n  serverTimestamp, \r\n  addDoc, \r\n  setDoc,\r\n  arrayUnion,\r\n  arrayRemove,\r\n  deleteField,\r\n  deleteDoc\r\n} from 'firebase/firestore';\r\nimport { getAuth } from 'firebase/auth';\r\n\r\nexport default {\r\n  props: {\r\n    discussionId: {\r\n      type: String,\r\n      default: null\r\n    }\r\n  },\r\n  emits: ['hide-discussion'],\r\n  setup(props, { emit }) {\r\n    const discussion = ref(null);\r\n    const responses = ref([]);\r\n    const userNames = ref({});\r\n    const userAvatars = ref({}); \r\n    const userStatuses = ref({});\r\n    const newMessage = ref('');\r\n    const messagesContainer = ref(null);\r\n    const messageElements = ref([]);\r\n    const isScrolledToBottom = ref(true);\r\n    \r\n    // Variables for tracking seen status\r\n    const unreadMessages = ref(new Set());\r\n    const lastVisibleMessageId = ref(null);\r\n    \r\n    // Pour message editing\r\n    const editingMessageId = ref(null);\r\n    const editMessageContent = ref('');\r\n    const editTextarea = ref(null);\r\n    \r\n    // Pour reactions\r\n    const availableReactions = ref(['👍', '❤️', '😂', '😮', '😢', '👏', '🎉', '🤔']);\r\n    const showingReactionsFor = ref(null);\r\n    const reactionPickerPosition = ref({ top: 0, left: 0 });\r\n    \r\n    // Pour read receipts tooltip\r\n    const showingReadReceiptsFor = ref(null);\r\n    const readReceiptsTooltipPosition = ref({ top: 0, left: 0 });\r\n    \r\n    // Pour presence system\r\n    const presenceUnsubscribe = ref(null);\r\n    const userStatusInterval = ref(null);\r\n    const messagesUnsubscribe = ref(null);\r\n    \r\n    // Pour la suppression de message\r\n    const showDeleteConfirmation = ref(false);\r\n    const messageToDelete = ref(null);\r\n    \r\n    // Computed style for reaction picker positioning\r\n    const reactionPickerStyle = computed(() => {\r\n      return {\r\n        top: `${reactionPickerPosition.value.top}px`,\r\n        left: `${reactionPickerPosition.value.left}px`\r\n      };\r\n    });\r\n    \r\n    // Computed style for read receipts tooltip positioning\r\n    const readReceiptsTooltipStyle = computed(() => {\r\n      return {\r\n        top: `${readReceiptsTooltipPosition.value.top}px`,\r\n        left: `${readReceiptsTooltipPosition.value.left}px`\r\n      };\r\n    });\r\n    \r\n    const Hide = () => {\r\n      emit('hide-discussion');\r\n    };\r\n\r\n    const isCurrentUser = (userId) => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      return currentUser && currentUser.uid === userId;\r\n    };\r\n\r\n    const isCurrentUserMessage = (message) => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      return currentUser && currentUser.uid === message.senderId;\r\n    };\r\n    \r\n    // Generate user initials for avatar placeholder\r\n    const getUserInitials = (userId) => {\r\n      // If it's current user and we don't have their name yet\r\n      if (isCurrentUser(userId)) {\r\n        const auth = getAuth();\r\n        const currentUser = auth.currentUser;\r\n        \r\n        if (currentUser && currentUser.displayName) {\r\n          const nameParts = currentUser.displayName.split(' ');\r\n          if (nameParts.length >= 2) {\r\n            return (nameParts[0][0] + nameParts[1][0]).toUpperCase();\r\n          } else if (nameParts.length === 1) {\r\n            return nameParts[0][0].toUpperCase();\r\n          }\r\n        }\r\n        return 'V'; // Vous (default for current user)\r\n      }\r\n      \r\n      // For other users, use their name if we have it\r\n      if (userNames.value[userId]) {\r\n        const nameParts = userNames.value[userId].split(' ');\r\n        if (nameParts.length >= 2) {\r\n          return (nameParts[0][0] + nameParts[1][0]).toUpperCase();\r\n        } else if (nameParts.length === 1) {\r\n          return nameParts[0][0].toUpperCase();\r\n        }\r\n      }\r\n      \r\n      return 'U'; // Unknown (default)\r\n    };\r\n    const isUserOnline = (userId) => {\r\n  return userStatuses.value[userId]?.isOnline || false;\r\n};\r\n    const formatDate = (timestamp) => {\r\n      if (!timestamp) return '';\r\n      \r\n      try {\r\n        const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);\r\n        \r\n        const today = new Date();\r\n        const isToday = date.getDate() === today.getDate() && \r\n                         date.getMonth() === today.getMonth() && \r\n                         date.getFullYear() === today.getFullYear();\r\n        \r\n        const timeOptions = { hour: '2-digit', minute: '2-digit' };\r\n        const dateOptions = { day: '2-digit', month: '2-digit', year: 'numeric' };\r\n        \r\n        if (isToday) {\r\n          return `Aujourd'hui, ${date.toLocaleTimeString(undefined, timeOptions)}`;\r\n        } else {\r\n          return date.toLocaleDateString(undefined, dateOptions) + ', ' + \r\n                 date.toLocaleTimeString(undefined, timeOptions);\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error formatting date:\", e);\r\n        return '';\r\n      }\r\n    };\r\n    \r\n    // Handle scroll to track when user is viewing messages\r\n    const handleScroll = () => {\r\n      if (!messagesContainer.value) return;\r\n      \r\n      const { scrollTop, scrollHeight, clientHeight } = messagesContainer.value;\r\n      isScrolledToBottom.value = Math.abs(scrollHeight - clientHeight - scrollTop) < 20;\r\n      \r\n      // Mark messages as read when they appear in viewport\r\n      markVisibleMessagesAsRead();\r\n    };\r\n    \r\n    // Scroll to bottom with optional force parameter\r\n    const scrollToBottom = async (force = false) => {\r\n      await nextTick();\r\n      if (messagesContainer.value && (isScrolledToBottom.value || force)) {\r\n        messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\r\n      }\r\n    };\r\n    \r\n    // Function to mark visible messages as read\r\n    const markVisibleMessagesAsRead = () => {\r\n      if (!messagesContainer.value || responses.value.length === 0) return;\r\n      \r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) return;\r\n       const containerRect = messagesContainer.value.getBoundingClientRect();\r\n      // Get all message elements\r\n      if (!messageElements.value) return;\r\n      let messagesElements = Array.isArray(messageElements.value) \r\n        ? messageElements.value \r\n        : [messageElements.value];\r\n      \r\n      let messageIds = [];\r\n      \r\n      // Check which messages are visible\r\n      messagesElements.forEach(el => {\r\n        if (!el) return;\r\n        \r\n        const rect = el.getBoundingClientRect();\r\n        // Check if element is at least partially visible in container\r\n        if (rect.top < containerRect.bottom && rect.bottom > containerRect.top) {\r\n          const messageId = el.getAttribute('data-message-id');\r\n          if (messageId) {\r\n            messageIds.push(messageId);\r\n          }\r\n        }\r\n      });\r\n      // Mark all visible messages as read\r\n      if (messageIds.length > 0) {\r\n        messageIds.forEach(messageId => {\r\n          const message = responses.value.find(msg => msg.id === messageId);\r\n          // Only mark others' messages as read\r\n          if (message && message.senderId !== currentUser.uid) {\r\n            markMessageAsRead(messageId);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    // Function to mark a message as read\r\n    const markMessageAsRead = async (messageId) => {\r\n      if (!messageId || !props.discussionId) return;\r\n      \r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) return;\r\n      \r\n      try {\r\n        const message = responses.value.find(msg => msg.id === messageId);\r\n        \r\n        // Skip if message is from current user or already read by current user\r\n        if (!message || \r\n            message.senderId === currentUser.uid || \r\n            (message.readBy && message.readBy.includes(currentUser.uid))) {\r\n          return;\r\n        }\r\n        \r\n        const db = getFirestore();\r\n        const messageRef = doc(db, 'discussions', props.discussionId, 'messages', messageId);\r\n        \r\n        // Update both readBy array and lastReadAt map\r\n        await updateDoc(messageRef, {\r\n          readBy: arrayUnion(currentUser.uid),\r\n          [`lastReadAt.${currentUser.uid}`]: serverTimestamp()\r\n        });\r\n        \r\n        // Update locally if needed\r\n        if (message && !message.readBy) {\r\n          message.readBy = [currentUser.uid];\r\n        } else if (message && !message.readBy.includes(currentUser.uid)) {\r\n          message.readBy.push(currentUser.uid);\r\n        }\r\n        \r\n        if (!message.lastReadAt) {\r\n          message.lastReadAt = {};\r\n        }\r\n        message.lastReadAt[currentUser.uid] = new Date();\r\n        \r\n      } catch (error) {\r\n        console.error(\"Error marking message as read:\", error);\r\n      }\r\n    };\r\n    \r\n    // Get read status class for message indicators\r\n    const getReadStatusClass = (message) => {\r\n      if (!message.readBy) return 'not-read';\r\n      \r\n      // If sent by current user, check if others have read it\r\n      if (isCurrentUserMessage(message)) {\r\n        const readCount = getReadCount(message);\r\n        if (readCount === 0) return 'not-read';\r\n        if (readCount < (discussion.value.participants.length - 1)) return 'partially-read';\r\n        return 'all-read';\r\n      }\r\n      \r\n      // If received, check if current user has read it\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (currentUser && message.readBy.includes(currentUser.uid)) {\r\n        return 'read';\r\n      }\r\n      \r\n      return 'not-read';\r\n    };\r\n    \r\n    // Get number of users who've read a message (excluding sender)\r\n    const getReadCount = (message) => {\r\n      if (!message.readBy || !Array.isArray(message.readBy)) return 0;\r\n      \r\n      // Count users who have read the message (excluding the sender)\r\n      return message.readBy.filter(userId => userId !== message.senderId).length;\r\n    };\r\n    \r\n    // Get list of users who have read the message with timestamps\r\n    const getReadUsersList = (message) => {\r\n      if (!message || !message.readBy || !Array.isArray(message.readBy) || !message.lastReadAt) {\r\n        return [];\r\n      }\r\n      \r\n      return message.readBy\r\n        .filter(userId => userId !== message.senderId) // Exclude sender\r\n        .map(userId => ({\r\n          userId,\r\n          name: isCurrentUser(userId) ? 'Vous' : (userNames.value[userId] || 'Utilisateur'),\r\n          timestamp: message.lastReadAt[userId]\r\n        }))\r\n        .sort((a, b) => {\r\n          // Sort by timestamp if available\r\n          if (a.timestamp && b.timestamp) {\r\n            const timeA = a.timestamp.toDate ? a.timestamp.toDate() : new Date(a.timestamp);\r\n            const timeB = b.timestamp.toDate ? b.timestamp.toDate() : new Date(b.timestamp);\r\n            return timeA - timeB;\r\n          }\r\n          return 0;\r\n        });\r\n    };\r\n    \r\n    // Get list of users who haven't read the message yet\r\n    const getUnreadUsersList = (message) => {\r\n      if (!message || !discussion.value || !discussion.value.participants) {\r\n        return [];\r\n      }\r\n      \r\n      // Create a set of user IDs who have read the message\r\n      const readBySet = new Set(message.readBy || []);\r\n      \r\n      // Return names of users who haven't read the message (excluding the sender)\r\n      return discussion.value.participants\r\n        .filter(userId => userId !== message.senderId && !readBySet.has(userId))\r\n        .map(userId => isCurrentUser(userId) ? 'Vous' : (userNames.value[userId] || 'Utilisateur'));\r\n    };\r\n    \r\n    // Show read receipts tooltip\r\n    const showReadReceipts = (message) => {\r\n      showingReadReceiptsFor.value = message;\r\n      \r\n      // Position the tooltip\r\n      nextTick(() => {\r\n        const messageElement = document.querySelector(`[data-message-id=\"${message.id}\"]`);\r\n        if (messageElement && messagesContainer.value) {\r\n          const rect = messageElement.getBoundingClientRect();\r\n          const containerRect = messagesContainer.value.getBoundingClientRect();\r\n          \r\n          readReceiptsTooltipPosition.value = {\r\n            top: rect.bottom - containerRect.top + 5,\r\n            left: rect.right - containerRect.left - 150 // Position from right side\r\n          };\r\n        }\r\n      });\r\n    };\r\n    \r\n    // Hide read receipts tooltip\r\n    const hideReadReceipts = () => {\r\n      showingReadReceiptsFor.value = null;\r\n    };\r\n    \r\n    // Improved function to get user's full name and profile picture from Firestore\r\n    const fetchUserInfo = async (userId) => {\r\n      try {\r\n        const auth = getAuth();\r\n        const currentUser = auth.currentUser;\r\n        \r\n        if (currentUser && currentUser.uid === userId) {\r\n          let profilePicture = currentUser.photoURL;\r\n          let fullName = currentUser.displayName || '';\r\n          const db = getFirestore();\r\n          const userRef = doc(db, 'users', userId);\r\n          const userSnap = await getDoc(userRef);\r\n          \r\n          if (userSnap.exists()) {\r\n            const userData = userSnap.data();\r\n            \r\n            // Get full name if not already available\r\n            if (!fullName) {\r\n              fullName = `${userData.firstName || ''} ${userData.lastName || ''}`.trim();\r\n            }\r\n            \r\n            // Profile picture - use profileImageUrl attribute\r\n            if (userData.profileImageUrl) {\r\n              profilePicture = userData.profileImageUrl;\r\n            }\r\n          }\r\n          \r\n          return { fullName, profilePicture };\r\n        } else {\r\n          // For other users, check Firestore\r\n          const db = getFirestore();\r\n          const userRef = doc(db, 'users', userId);\r\n          const userSnap = await getDoc(userRef);\r\n          \r\n          if (userSnap.exists()) {\r\n            const userData = userSnap.data();\r\n            \r\n            // Get full name\r\n            const fullName = `${userData.firstName || ''} ${userData.lastName || ''}`.trim();\r\n            \r\n            // Get profile picture URL - use profileImageUrl attribute\r\n            const profilePicture = userData.profileImageUrl || null;\r\n            \r\n            return { fullName, profilePicture };\r\n          }\r\n        }\r\n        return { fullName: null, profilePicture: null };\r\n      } catch (error) {\r\n        console.error(`Error fetching user info for ${userId}:`, error);\r\n        return { fullName: null, profilePicture: null };\r\n      }\r\n    };\r\n    \r\n    // Get user display name with caching\r\n    const getUserDisplayName = (userId) => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (currentUser && currentUser.uid === userId) {\r\n        return 'Vous';\r\n      }\r\n      \r\n      if (userNames.value[userId]) {\r\n        return userNames.value[userId];\r\n      }\r\n      \r\n      // Otherwise fetch it and update cache\r\n      fetchUserInfo(userId).then(userInfo => {\r\n        if (userInfo.fullName) {\r\n          userNames.value[userId] = userInfo.fullName;\r\n        } else {\r\n          userNames.value[userId] = userId;\r\n        }\r\n        \r\n        // Also update avatar if available\r\n        if (userInfo.profilePicture) {\r\n          userAvatars.value[userId] = userInfo.profilePicture;\r\n        }\r\n      }).catch(() => {\r\n        userNames.value[userId] = userId; \r\n      });\r\n      \r\n      return userNames.value[userId] || 'Chargement...';\r\n    };\r\n    \r\n    // Load all user info for participants with refreshed data\r\n    const loadAllUserInfo = async (userIds) => {\r\n      const uniqueIds = [...new Set(userIds)];\r\n      for (const userId of uniqueIds) {\r\n        const userInfo = await fetchUserInfo(userId);\r\n        \r\n        if (userInfo.fullName) {\r\n          userNames.value[userId] = userInfo.fullName;\r\n        } else {\r\n          userNames.value[userId] = userId;\r\n        }\r\n        \r\n        if (userInfo.profilePicture) {\r\n          userAvatars.value[userId] = userInfo.profilePicture;\r\n        }\r\n      }\r\n\r\n      // Make sure current user's info is up to date\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (currentUser) {\r\n        const userInfo = await fetchUserInfo(currentUser.uid);\r\n        if (userInfo.profilePicture) {\r\n          userAvatars.value[currentUser.uid] = userInfo.profilePicture;\r\n        } else if (currentUser.photoURL) {\r\n          userAvatars.value[currentUser.uid] = currentUser.photoURL;\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Message editing functions\r\n    const startEditMessage = async (message) => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser || currentUser.uid !== message.senderId) {\r\n        return; \r\n      }\r\n      editingMessageId.value = message.id;\r\n      editMessageContent.value = message.content;\r\n      \r\n      // Focus the edit textarea after it renders\r\n      await nextTick();\r\n      if (editTextarea.value) {\r\n        if (Array.isArray(editTextarea.value)) {\r\n          if (editTextarea.value[0]) {\r\n            editTextarea.value[0].focus();\r\n          }\r\n        } else {\r\n          editTextarea.value.focus();\r\n        }\r\n      }\r\n    };\r\n    \r\n    const saveMessageEdit = async (messageId) => {\r\n      if (!editMessageContent.value.trim()) {\r\n        return; // Don't save empty messages\r\n      }\r\n      \r\n      try {\r\n        const auth = getAuth();\r\n        const currentUser = auth.currentUser;\r\n        \r\n        if (!currentUser) {\r\n          alert(\"Vous devez être connecté pour modifier un message\");\r\n          return;\r\n        }\r\n        \r\n        const db = getFirestore();\r\n        const messageRef = doc(db, 'discussions', props.discussionId, 'messages', messageId);\r\n        \r\n        await updateDoc(messageRef, {\r\n          content: editMessageContent.value.trim(),\r\n          edited: true,\r\n          editedAt: serverTimestamp()\r\n        });\r\n        \r\n        // Reset editing state\r\n        editingMessageId.value = null;\r\n        editMessageContent.value = '';\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la modification du message:\", error);\r\n        alert(\"Une erreur s'est produite lors de la modification du message\");\r\n      }\r\n    };\r\n    \r\n    const cancelMessageEdit = () => {\r\n      editingMessageId.value = null;\r\n      editMessageContent.value = '';\r\n    };\r\n    \r\n    // Message deletion functions\r\n    const confirmDeleteMessage = (messageId) => {\r\n      messageToDelete.value = messageId;\r\n      showDeleteConfirmation.value = true;\r\n    };\r\n    \r\n    const cancelDeleteConfirmation = () => {\r\n      messageToDelete.value = null;\r\n      showDeleteConfirmation.value = false;\r\n    };\r\n    \r\n    const deleteMessage = async () => {\r\n      if (!messageToDelete.value) return;\r\n      \r\n      try {\r\n        const auth = getAuth();\r\n        const currentUser = auth.currentUser;\r\n        \r\n        if (!currentUser) {\r\n          alert(\"Vous devez être connecté pour supprimer un message\");\r\n          return;\r\n        }\r\n        \r\n        const message = responses.value.find(msg => msg.id === messageToDelete.value);\r\n        \r\n        // Verify user owns this message\r\n        if (!message || message.senderId !== currentUser.uid) {\r\n          alert(\"Vous ne pouvez supprimer que vos propres messages\");\r\n          cancelDeleteConfirmation();\r\n          return;\r\n        }\r\n        \r\n        const db = getFirestore();\r\n        const messageRef = doc(db, 'discussions', props.discussionId, 'messages', messageToDelete.value);\r\n        \r\n        // Delete the message document\r\n        await deleteDoc(messageRef);\r\n        \r\n        // If this was the last message in the discussion, update the discussion's lastActivity\r\n        const lastMessage = responses.value[responses.value.length - 1];\r\n        if (lastMessage && lastMessage.id === messageToDelete.value) {\r\n          // Find the new last message\r\n          const newLastMessage = responses.value[responses.value.length - 2];\r\n          \r\n          if (newLastMessage) {\r\n            // Update discussion with info from the new last message\r\n            await updateDoc(doc(db, 'discussions', props.discussionId), {\r\n              lastActivity: newLastMessage.createdAt,\r\n              lastMessageSenderId: newLastMessage.senderId,\r\n              lastMessageText: newLastMessage.content.substring(0, 100)\r\n            });\r\n          } else {\r\n            // No messages left in the discussion\r\n            await updateDoc(doc(db, 'discussions', props.discussionId), {\r\n              lastActivity: serverTimestamp(),\r\n              lastMessageSenderId: null,\r\n              lastMessageText: null\r\n            });\r\n          }\r\n        }\r\n        // Close confirmation modal and clear state\r\n        cancelDeleteConfirmation();\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la suppression du message:\", error);\r\n        alert(\"Une erreur s'est produite lors de la suppression du message\");\r\n        cancelDeleteConfirmation();\r\n      }\r\n    };\r\n    \r\n    // Message reaction functions\r\n    const showReactionPicker = (messageId) => {\r\n      showingReactionsFor.value = messageId;\r\n      \r\n      // Position the picker\r\n      nextTick(() => {\r\n        const messageElement = document.querySelector(`[data-message-id=\"${messageId}\"]`);\r\n        if (messageElement && messagesContainer.value) {\r\n          const rect = messageElement.getBoundingClientRect();\r\n          const containerRect = messagesContainer.value.getBoundingClientRect();\r\n          \r\n          reactionPickerPosition.value = {\r\n            top: rect.bottom - containerRect.top + 5,\r\n            left: rect.left - containerRect.left\r\n          };\r\n        }\r\n      });\r\n    };\r\n    \r\n    const addReaction = async (messageId, emoji) => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser) {\r\n        alert(\"Vous devez être connecté pour réagir à un message\");\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const db = getFirestore();\r\n        const messageRef = doc(db, 'discussions', props.discussionId, 'messages', messageId);\r\n        \r\n        // Toggle reaction (add if not present, remove if already added)\r\n        const message = responses.value.find(msg => msg.id === messageId);\r\n        const hasReacted = hasUserReacted(message, emoji);\r\n        \r\n        if (hasReacted) {\r\n          // Remove the reaction\r\n          await updateDoc(messageRef, {\r\n            [`reactions.${emoji}.${currentUser.uid}`]: deleteField()\r\n          });\r\n          \r\n          // If there are no other users with this reaction, delete the entire emoji entry\r\n          if (message && message.reactions && message.reactions[emoji]) {\r\n            const usersWithReaction = Object.keys(message.reactions[emoji]).filter(id => id !== currentUser.uid);\r\n            if (usersWithReaction.length === 0) {\r\n              await updateDoc(messageRef, {\r\n                [`reactions.${emoji}`]: deleteField()\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          // Add the reaction with timestamp\r\n          await updateDoc(messageRef, {\r\n            [`reactions.${emoji}.${currentUser.uid}`]: serverTimestamp()\r\n          });\r\n        }\r\n        \r\n        // Close reaction picker\r\n        showingReactionsFor.value = null;\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de l'ajout d'une réaction:\", error);\r\n      }\r\n    };\r\n    \r\n    const toggleReaction = (messageId, emoji) => {\r\n      addReaction(messageId, emoji);\r\n    };\r\n    \r\n    const hasUserReacted = (message, emoji) => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser || !message || !message.reactions || !message.reactions[emoji]) {\r\n        return false;\r\n      }\r\n      \r\n      return !!message.reactions[emoji][currentUser.uid];\r\n    };\r\n    \r\n    // Send message\r\n    const sendMessage = async () => {\r\n      if (!newMessage.value.trim()) {\r\n        return; // Don't send empty messages\r\n      }\r\n      \r\n      try {\r\n        const auth = getAuth();\r\n        const currentUser = auth.currentUser;\r\n        \r\n        if (!currentUser) {\r\n          alert(\"Vous devez être connecté pour envoyer un message\");\r\n          return;\r\n        }\r\n        \r\n        const db = getFirestore();\r\n        \r\n        // Add message to the discussion\r\n        const messageRef = await addDoc(collection(db, 'discussions', props.discussionId, 'messages'), {\r\n          content: newMessage.value.trim(),\r\n          senderId: currentUser.uid,\r\n          createdAt: serverTimestamp(),\r\n          readBy: [currentUser.uid], // Mark as read by sender\r\n          lastReadAt: {\r\n            [currentUser.uid]: serverTimestamp()\r\n          }\r\n        });\r\n        \r\n        // Update discussion with new last activity\r\n        await updateDoc(doc(db, 'discussions', props.discussionId), {\r\n          lastActivity: serverTimestamp(),\r\n          lastMessageSenderId: currentUser.uid,\r\n          lastMessageText: newMessage.value.trim().substring(0, 100)\r\n        });\r\n        \r\n        // Clear input\r\n        newMessage.value = '';\r\n        \r\n        // Force scroll to bottom for new messages\r\n        scrollToBottom(true);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de l'envoi du message:\", error);\r\n        alert(\"Une erreur s'est produite lors de l'envoi du message\");\r\n      }\r\n    };\r\n    \r\n    // User presence handling\r\n    const updateUserPresence = async () => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser || !props.discussionId) return;\r\n      \r\n      try {\r\n        const db = getFirestore();\r\n        const presenceRef = doc(db, 'presence', currentUser.uid);\r\n        \r\n        // Update user's online status\r\n        await setDoc(presenceRef, {\r\n          userId: currentUser.uid,\r\n          online: true,\r\n          lastActive: serverTimestamp(),\r\n          currentDiscussion: props.discussionId\r\n        }, { merge: true });\r\n      } catch (error) {\r\n        console.error(\"Error updating presence:\", error);\r\n      }\r\n    };\r\n    \r\n    // Listen for presence changes of all participants\r\n    const listenToPresence = () => {\r\n      if (!discussion.value || !discussion.value.participants) return;\r\n      \r\n      const db = getFirestore();\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      // Clear previous listener if any\r\n      if (presenceUnsubscribe.value) {\r\n        presenceUnsubscribe.value();\r\n        presenceUnsubscribe.value = null;\r\n      }\r\n      \r\n      // Set up listeners for all participants\r\n      const listeners = discussion.value.participants.map(userId => {\r\n        const presenceRef = doc(db, 'presence', userId);\r\n        \r\n        return onSnapshot(presenceRef, (doc) => {\r\n          if (doc.exists()) {\r\n            const presenceData = doc.data();\r\n            // Update user status\r\n            userStatuses.value[userId] = {\r\n              isOnline: presenceData.online || false,\r\n              lastActive: presenceData.lastActive,\r\n              currentDiscussion: presenceData.currentDiscussion\r\n            };\r\n          } else {\r\n            // User has no presence record\r\n            userStatuses.value[userId] = {\r\n              isOnline: false,\r\n              lastActive: null,\r\n              currentDiscussion: null\r\n            };\r\n          }\r\n        }, (error) => {\r\n          console.error(`Error listening to presence for ${userId}:`, error);\r\n        });\r\n      });\r\n      \r\n      // Combine unsubscribe functions\r\n      presenceUnsubscribe.value = () => {\r\n        listeners.forEach(unsubscribe => unsubscribe());\r\n      };\r\n      \r\n      // Set current user as online immediately\r\n      if (currentUser) {\r\n        userStatuses.value[currentUser.uid] = {\r\n          isOnline: true,\r\n          lastActive: new Date(),\r\n          currentDiscussion: props.discussionId\r\n        };\r\n      }\r\n    };\r\n    \r\n    // Load discussion data\r\n    const loadDiscussion = async () => {\r\n      if (!props.discussionId) return;\r\n      \r\n      try {\r\n        const db = getFirestore();\r\n        const discussionDoc = await getDoc(doc(db, 'discussions', props.discussionId));\r\n        \r\n        if (discussionDoc.exists()) {\r\n          discussion.value = { id: discussionDoc.id, ...discussionDoc.data() };\r\n          \r\n          // Load profile info for all participants\r\n          if (discussion.value.participants && discussion.value.participants.length > 0) {\r\n            await loadAllUserInfo(discussion.value.participants);\r\n          }\r\n          \r\n          // Set up presence tracking\r\n          listenToPresence();\r\n          \r\n          // Load messages\r\n          loadMessages();\r\n        } else {\r\n          console.error(\"Discussion not found\");\r\n          discussion.value = null;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading discussion:\", error);\r\n        discussion.value = null;\r\n      }\r\n    };\r\n    \r\n    // Load messages with real-time updates\r\n    const loadMessages = () => {\r\n      if (!props.discussionId) return;\r\n      \r\n      // Clean up existing listener if any\r\n      if (messagesUnsubscribe.value) {\r\n        messagesUnsubscribe.value();\r\n        messagesUnsubscribe.value = null;\r\n      }\r\n      \r\n      const db = getFirestore();\r\n      const messagesQuery = query(\r\n        collection(db, 'discussions', props.discussionId, 'messages'), \r\n        orderBy('createdAt', 'asc')\r\n      );\r\n      \r\n      // Set up the listener\r\n      messagesUnsubscribe.value = onSnapshot(messagesQuery, (snapshot) => {\r\n        // Check if we got results\r\n        if (snapshot.empty) {\r\n          responses.value = [];\r\n          return;\r\n        }\r\n        \r\n        let newMessages = [];\r\n        let userIdsToLoad = new Set();\r\n        \r\n        snapshot.forEach(doc => {\r\n          const messageData = { id: doc.id, ...doc.data() };\r\n          newMessages.push(messageData);\r\n          \r\n          // Collect user IDs we need to load info for\r\n          if (messageData.senderId) {\r\n            userIdsToLoad.add(messageData.senderId);\r\n          }\r\n        });\r\n        \r\n        // Update messages array\r\n        responses.value = newMessages;\r\n        \r\n        // Load missing user info for message senders\r\n        loadAllUserInfo([...userIdsToLoad]);\r\n        \r\n        // Scroll to bottom if we're already at the bottom or for first load\r\n        scrollToBottom();\r\n        \r\n        // Mark visible messages as read after a short delay\r\n        setTimeout(() => {\r\n          markVisibleMessagesAsRead();\r\n        }, 1000);\r\n      }, (error) => {\r\n        console.error(\"Error loading messages:\", error);\r\n      });\r\n    };\r\n    \r\n    // Watch for discussion ID changes\r\n    watch(() => props.discussionId, (newDiscussionId, oldDiscussionId) => {\r\n      if (newDiscussionId && newDiscussionId !== oldDiscussionId) {\r\n        // Clear old data\r\n        discussion.value = null;\r\n        responses.value = [];\r\n        \r\n        // Load new discussion\r\n        loadDiscussion();\r\n      } else if (!newDiscussionId) {\r\n        // Clear data if no discussion is selected\r\n        discussion.value = null;\r\n        responses.value = [];\r\n      }\r\n    }, { immediate: true });\r\n    \r\n    // Set up regular presence updates\r\n    onMounted(() => {\r\n      // Update presence immediately\r\n      updateUserPresence();\r\n      \r\n      // Set up interval for regular updates\r\n      userStatusInterval.value = setInterval(() => {\r\n        updateUserPresence();\r\n      }, 60000); // Update every minute\r\n    });\r\n    \r\n    // Clean up when unmounting\r\n    onUnmounted(() => {\r\n      // Clear presence update interval\r\n      if (userStatusInterval.value) {\r\n        clearInterval(userStatusInterval.value);\r\n        userStatusInterval.value = null;\r\n      }\r\n      \r\n      // Clean up presence listener\r\n      if (presenceUnsubscribe.value) {\r\n        presenceUnsubscribe.value();\r\n        presenceUnsubscribe.value = null;\r\n      }\r\n      \r\n      // Clean up messages listener\r\n      if (messagesUnsubscribe.value) {\r\n        messagesUnsubscribe.value();\r\n        messagesUnsubscribe.value = null;\r\n      }\r\n      \r\n      // Set user as offline when leaving\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      if (currentUser) {\r\n        try {\r\n          const db = getFirestore();\r\n          const presenceRef = doc(db, 'presence', currentUser.uid);\r\n          setDoc(presenceRef, {\r\n            online: false,\r\n            lastActive: serverTimestamp(),\r\n            currentDiscussion: null\r\n          }, { merge: true });\r\n        } catch (error) {\r\n          console.error(\"Error updating offline status:\", error);\r\n        }\r\n      }\r\n    });\r\n    \r\n    return {\r\n      discussion,\r\n      responses,\r\n      userNames,\r\n      userAvatars,\r\n      userStatuses,\r\n      newMessage,\r\n      messagesContainer,\r\n      messageElements,\r\n      isScrolledToBottom,\r\n      editingMessageId,\r\n      editMessageContent,\r\n      editTextarea,\r\n      availableReactions,\r\n      showingReactionsFor,\r\n      reactionPickerStyle,\r\n      showingReadReceiptsFor,\r\n      readReceiptsTooltipStyle,\r\n      showDeleteConfirmation,\r\n      Hide,\r\n      handleScroll,\r\n      sendMessage,\r\n      formatDate,\r\n      isCurrentUser,\r\n      isCurrentUserMessage,\r\n      getUserInitials,\r\n      startEditMessage,\r\n      saveMessageEdit,\r\n      cancelMessageEdit,\r\n      confirmDeleteMessage,\r\n      cancelDeleteConfirmation,\r\n      deleteMessage,\r\n      showReactionPicker,\r\n      addReaction,\r\n      toggleReaction,\r\n      hasUserReacted,\r\n      getReadStatusClass,\r\n      getReadCount,\r\n      getReadUsersList,\r\n      getUnreadUsersList,\r\n      showReadReceipts,\r\n      hideReadReceipts,\r\n      getUserDisplayName,\r\n      isUserOnline\r\n\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.back-button {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 8px 16px;\r\n  margin-bottom: 16px;\r\n  background-color: #f5f5f5;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.back-button:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.back-icon {\r\n  margin-right: 8px;\r\n  font-size: 16px;\r\n}\r\n\r\n.chat-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: calc(100vh - 120px);\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  background-color: #fff;\r\n}\r\n\r\n.discussion-header {\r\n  padding: 16px;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.discussion-header h2 {\r\n  margin: 0 0 8px 0;\r\n  font-size: 18px;\r\n  color: #333;\r\n}\r\n\r\n.discussion-header p {\r\n  margin: 0;\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n/* Stylish participants bar */\r\n.participants-bar {\r\n  display: flex;\r\n  padding: 10px 16px;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  background-color: #f5f5f5;\r\n  align-items: center;\r\n}\r\n\r\n.participants-label {\r\n  font-weight: 500;\r\n  margin-right: 16px;\r\n  color: #555;\r\n  font-size: 14px;\r\n  white-space: nowrap;\r\n}\r\n\r\n.participants-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 12px;\r\n  overflow-x: auto;\r\n  max-width: calc(100% - 100px);\r\n  padding-bottom: 4px;\r\n}\r\n\r\n.participant-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  max-width: 80px;\r\n}\r\n\r\n.participant-avatar {\r\n  position: relative;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  margin-bottom: 4px;\r\n  background-color: #e0e0e0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.avatar-img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.user-initials {\r\n  font-weight: bold;\r\n  color: #555;\r\n  font-size: 16px;\r\n}\r\n\r\n.participant-name {\r\n  font-size: 12px;\r\n  color: #666;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  max-width: 100%;\r\n  text-align: center;\r\n}\r\n\r\n.status-indicator {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  border: 2px solid #f5f5f5;\r\n}\r\n\r\n.status-indicator.online {\r\n  background-color: #4caf50;\r\n}\r\n\r\n.status-indicator.offline {\r\n  background-color: #9e9e9e;\r\n}\r\n\r\n.messages-container {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 16px;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.no-messages {\r\n  text-align: center;\r\n  color: #888;\r\n  margin-top: 40px;\r\n  font-style: italic;\r\n}\r\n\r\n.message {\r\n  display: flex;\r\n  margin-bottom: 16px;\r\n  position: relative;\r\n}\r\n\r\n.message-avatar {\r\n  margin-right: 12px;\r\n  align-self: flex-start;\r\n}\r\n\r\n.user-avatar {\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  background-color: #e0e0e0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.avatar-img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.avatar-placeholder {\r\n  font-weight: bold;\r\n  color: #555;\r\n  font-size: 14px;\r\n}\r\n\r\n.message-bubble {\r\n  flex: 1;\r\n  position: relative;\r\n  padding: 12px 16px;\r\n  background-color: #fff;\r\n  border-radius: 16px;\r\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\r\n  max-width: 80%;\r\n}\r\n\r\n.sender-message .message-bubble {\r\n  background-color: #e3f2fd;\r\n  margin-left: auto;\r\n}\r\n\r\n.message-content {\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  word-break: break-word;\r\n}\r\n\r\n.edited-indicator {\r\n  font-size: 11px;\r\n  color: #888;\r\n  margin-left: 4px;\r\n}\r\n\r\n.message-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 6px;\r\n  font-size: 12px;\r\n  color: #888;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-name {\r\n  font-weight: 500;\r\n  margin-right: 8px;\r\n}\r\n\r\n.timestamp {\r\n  color: #aaa;\r\n}\r\n\r\n.message-actions {\r\n  display: flex;\r\n  gap: 6px;\r\n  opacity: 0;\r\n  transition: opacity 0.2s;\r\n}\r\n\r\n.message:hover .message-actions {\r\n  opacity: 1;\r\n}\r\n\r\n.action-btn {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 2px 4px;\r\n  color: #757575;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.action-btn:hover {\r\n  background-color: rgba(0, 0, 0, 0.05);\r\n  color: #424242;\r\n}\r\n\r\n.delete-btn:hover {\r\n  color: #f44336;\r\n}\r\n\r\n/* Message reactions */\r\n.message-reactions {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 6px;\r\n  margin-top: 6px;\r\n}\r\n\r\n.reactions-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 4px;\r\n}\r\n\r\n.reaction-badge {\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: #f0f0f0;\r\n  border-radius: 12px;\r\n  padding: 2px 6px;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.reaction-badge:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.reaction-badge.user-reacted {\r\n  background-color: #e3f2fd;\r\n}\r\n\r\n.reaction-emoji {\r\n  margin-right: 4px;\r\n}\r\n\r\n.reaction-count {\r\n  color: #666;\r\n}\r\n\r\n/* Reaction picker */\r\n.reaction-picker {\r\n  position: absolute;\r\n  z-index: 10;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.reaction-picker-content {\r\n  display: flex;\r\n  padding: 6px;\r\n  gap: 8px;\r\n}\r\n\r\n.reaction-btn {\r\n  background: none;\r\n  border: none;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n  padding: 4px;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.reaction-btn:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n/* Read status indicators */\r\n.read-status {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 8px;\r\n  position: relative;\r\n}\r\n\r\n.read-status-icon {\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 10px;\r\n  position: relative;\r\n}\r\n\r\n.not-read {\r\n  border: 1px solid #bdbdbd;\r\n}\r\n\r\n.read {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.partially-read {\r\n  background-color: #bbdefb;\r\n}\r\n\r\n.all-read {\r\n  background-color: #4caf50;\r\n  color: white;\r\n}\r\n\r\n.read-count {\r\n  font-size: 10px;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Read receipts tooltip */\r\n.read-receipts-tooltip {\r\n  position: absolute;\r\n  z-index: 10;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);\r\n  width: 220px;\r\n}\r\n\r\n.read-receipts-content {\r\n  padding: 12px;\r\n  font-size: 12px;\r\n}\r\n\r\n.read-users-list, .unread-users-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 6px 0 12px 0;\r\n}\r\n\r\n.read-user-item, .unread-user-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.read-user-name {\r\n  font-weight: 500;\r\n}\r\n\r\n.read-timestamp {\r\n  color: #888;\r\n}\r\n\r\n/* Edit message interface */\r\n.edit-message-container {\r\n  width: 100%;\r\n}\r\n\r\n.edit-message-input {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  resize: vertical;\r\n  min-height: 60px;\r\n  font-family: inherit;\r\n}\r\n\r\n.edit-actions {\r\n  display: flex;\r\n  gap: 8px;\r\n  margin-top: 8px;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.edit-save-btn, .edit-cancel-btn {\r\n  padding: 4px 12px;\r\n  border-radius: 4px;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n}\r\n\r\n.edit-save-btn {\r\n  background-color: #2196f3;\r\n  color: white;\r\n}\r\n\r\n.edit-cancel-btn {\r\n  background-color: #f5f5f5;\r\n  color: #333;\r\n}\r\n\r\n/* Delete confirmation modal */\r\n.delete-confirmation-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 100;\r\n}\r\n\r\n.delete-modal-content {\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  padding: 24px;\r\n  width: 100%;\r\n  max-width: 400px;\r\n}\r\n\r\n.delete-modal-content h3 {\r\n  margin-top: 0;\r\n  color: #f44336;\r\n}\r\n\r\n.delete-modal-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 12px;\r\n  margin-top: 24px;\r\n}\r\n\r\n.delete-confirm-btn, .delete-cancel-btn {\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.delete-confirm-btn {\r\n  background-color: #f44336;\r\n  color: white;\r\n}\r\n\r\n.delete-cancel-btn {\r\n  background-color: #f5f5f5;\r\n  color: #333;\r\n}\r\n\r\n/* Message input */\r\n.message-input-container {\r\n  padding: 16px;\r\n  border-top: 1px solid #e0e0e0;\r\n  background-color: #fff;\r\n}\r\n\r\n.message-form {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  padding: 10px 16px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 24px;\r\n  font-size: 14px;\r\n  outline: none;\r\n  transition: border-color 0.2s;\r\n}\r\n\r\n.message-input:focus {\r\n  border-color: #2196f3;\r\n}\r\n\r\n.send-button {\r\n  background-color: #2196f3;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 24px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.send-button:hover {\r\n  background-color: #1976d2;\r\n}\r\n\r\n.loading, .no-discussion-selected {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 300px;\r\n  color: #666;\r\n  font-style: italic;\r\n}\r\n</style>\r\n<style scoped>\r\n.chat-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\r\n  background-color: #ffffff;\r\n}\r\n\r\n.back-button {\r\n  margin: 16px;\r\n  padding: 8px 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: #f2f2f2;\r\n  border: none;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #333;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.back-button:hover {\r\n  background-color: #e5e5e5;\r\n}\r\n\r\n.back-icon {\r\n  margin-right: 8px;\r\n  font-size: 16px;\r\n}\r\n\r\n.discussion-header {\r\n  padding: 16px 20px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  background-color: #ffffff;\r\n}\r\n\r\n.discussion-header h2 {\r\n  margin: 0 0 8px 0;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n.discussion-header p {\r\n  margin: 0;\r\n  font-size: 14px;\r\n  color: #666;\r\n}\r\n\r\n.participants-bar {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px 20px;\r\n  background-color: #f9f9f9;\r\n  border-bottom: 1px solid #eaeaea;\r\n}\r\n\r\n.participants-label {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #555;\r\n  margin-right: 16px;\r\n}\r\n\r\n.participants-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 12px;\r\n}\r\n\r\n.participant-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.participant-avatar {\r\n  position: relative;\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  background-color: #e1e1f9;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  color: #5a5ad2;\r\n}\r\n\r\n.status-indicator {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 10px;\r\n  height: 10px;\r\n  border-radius: 50%;\r\n  border: 2px solid #f9f9f9;\r\n}\r\n\r\n.status-indicator.online {\r\n  background-color: #4caf50;\r\n}\r\n\r\n.status-indicator.offline {\r\n  background-color: #bdbdbd;\r\n}\r\n\r\n.participant-name {\r\n  font-size: 14px;\r\n  color: #444;\r\n}\r\n\r\n.messages-container {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 16px;\r\n  background-color: #f9f9fb;\r\n  scrollbar-width: thin;\r\n  scrollbar-color: #d4d4d4 #f9f9fb;\r\n}\r\n\r\n.messages-container::-webkit-scrollbar {\r\n  width: 6px;\r\n}\r\n\r\n.messages-container::-webkit-scrollbar-track {\r\n  background: #f9f9fb;\r\n}\r\n\r\n.messages-container::-webkit-scrollbar-thumb {\r\n  background-color: #d4d4d4;\r\n  border-radius: 10px;\r\n}\r\n\r\n.no-messages {\r\n  text-align: center;\r\n  margin: 40px 0;\r\n  color: #888;\r\n  font-style: italic;\r\n}\r\n\r\n.message {\r\n  display: flex;\r\n  margin-bottom: 16px;\r\n  max-width: 85%;\r\n}\r\n\r\n.sender-message {\r\n  margin-left: auto;\r\n  flex-direction: row-reverse;\r\n}\r\n\r\n.receiver-message {\r\n  margin-right: auto;\r\n}\r\n\r\n.message-avatar {\r\n  margin: 0 8px;\r\n  align-self: flex-end;\r\n}\r\n\r\n.user-avatar {\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #e1e1f9;\r\n  color: #5a5ad2;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n}\r\n\r\n.avatar-img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.avatar-placeholder {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.message-bubble {\r\n  padding: 12px 16px;\r\n  border-radius: 18px;\r\n  position: relative;\r\n  max-width: calc(100% - 60px);\r\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.sender-message .message-bubble {\r\n  background-color: #e7f3ff;\r\n  color: #333;\r\n  border-bottom-right-radius: 4px;\r\n}\r\n\r\n.receiver-message .message-bubble {\r\n  background-color: #ffffff;\r\n  color: #333;\r\n  border-bottom-left-radius: 4px;\r\n}\r\n\r\n.message-content {\r\n  margin-bottom: 6px;\r\n  word-wrap: break-word;\r\n  white-space: pre-wrap;\r\n}\r\n\r\n.edited-indicator {\r\n  font-size: 12px;\r\n  color: #a0a0a0;\r\n  margin-left: 6px;\r\n}\r\n\r\n.message-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 6px;\r\n}\r\n\r\n.user-info {\r\n  font-size: 12px;\r\n  color: #888;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.user-name {\r\n  margin-right: 8px;\r\n  font-weight: 500;\r\n}\r\n\r\n.timestamp {\r\n  font-size: 11px;\r\n}\r\n\r\n.message-actions {\r\n  display: flex;\r\n  opacity: 0;\r\n  transition: opacity 0.2s;\r\n}\r\n\r\n.message:hover .message-actions {\r\n  opacity: 1;\r\n}\r\n\r\n.action-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #999;\r\n  cursor: pointer;\r\n  margin-left: 6px;\r\n  padding: 4px;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.action-btn:hover {\r\n  background-color: rgba(0, 0, 0, 0.05);\r\n  color: #666;\r\n}\r\n\r\n.delete-btn:hover {\r\n  color: #ff4d4f;\r\n}\r\n\r\n.read-status {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 6px;\r\n  cursor: pointer;\r\n}\r\n\r\n.read-status-icon {\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 10px;\r\n  position: relative;\r\n}\r\n\r\n.read-status-icon.not-read {\r\n  border: 1px solid #ddd;\r\n}\r\n\r\n.read-status-icon.partially-read {\r\n  background-color: #e6f7ff;\r\n  border: 1px solid #91d5ff;\r\n}\r\n\r\n.read-status-icon.all-read {\r\n  background-color: #52c41a;\r\n  color: white;\r\n}\r\n\r\n.read-count {\r\n  font-size: 10px;\r\n  font-weight: bold;\r\n}\r\n\r\n.message-reactions {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-top: 4px;\r\n}\r\n\r\n.reactions-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 4px;\r\n}\r\n\r\n.reaction-badge {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 2px 6px;\r\n  border-radius: 12px;\r\n  background-color: #f0f0f0;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.reaction-badge:hover {\r\n  background-color: #e0e0e0;\r\n}\r\n\r\n.reaction-badge.user-reacted {\r\n  background-color: #e6f7ff;\r\n  border: 1px solid #91d5ff;\r\n}\r\n\r\n.reaction-emoji {\r\n  margin-right: 4px;\r\n}\r\n\r\n.reaction-count {\r\n  font-size: 11px;\r\n  font-weight: 500;\r\n}\r\n\r\n.reaction-picker {\r\n  position: absolute;\r\n  z-index: 10;\r\n  background-color: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n  padding: 8px;\r\n}\r\n\r\n.reaction-picker-content {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 8px;\r\n}\r\n\r\n.reaction-btn {\r\n  background: none;\r\n  border: none;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n  padding: 6px;\r\n  border-radius: 6px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.reaction-btn:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.read-receipts-tooltip {\r\n  position: absolute;\r\n  z-index: 10;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n  padding: 12px;\r\n  width: 220px;\r\n  font-size: 13px;\r\n}\r\n\r\n.read-receipts-content {\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.read-users-list, .unread-users-list {\r\n  margin: 8px 0;\r\n  padding-left: 16px;\r\n}\r\n\r\n.read-user-item, .unread-user-item {\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.read-user-name {\r\n  font-weight: 500;\r\n  margin-right: 8px;\r\n}\r\n\r\n.read-timestamp {\r\n  color: #999;\r\n  font-size: 11px;\r\n}\r\n\r\n.edit-message-container {\r\n  width: 100%;\r\n}\r\n\r\n.edit-message-input {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #d9d9d9;\r\n  border-radius: 8px;\r\n  resize: vertical;\r\n  min-height: 60px;\r\n  font-family: inherit;\r\n  font-size: 14px;\r\n}\r\n\r\n.edit-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 8px;\r\n  gap: 8px;\r\n}\r\n\r\n.edit-save-btn, .edit-cancel-btn {\r\n  padding: 4px 12px;\r\n  border-radius: 4px;\r\n  font-size: 13px;\r\n  cursor: pointer;\r\n}\r\n\r\n.edit-save-btn {\r\n  background-color: #1890ff;\r\n  color: white;\r\n  border: none;\r\n}\r\n\r\n.edit-cancel-btn {\r\n  background-color: #f5f5f5;\r\n  border: 1px solid #d9d9d9;\r\n  color: #333;\r\n}\r\n\r\n.delete-confirmation-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 20;\r\n}\r\n\r\n.delete-modal-content {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  width: 320px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.delete-modal-content h3 {\r\n  margin-top: 0;\r\n  font-size: 18px;\r\n}\r\n\r\n.delete-modal-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 20px;\r\n  gap: 12px;\r\n}\r\n\r\n.delete-confirm-btn, .delete-cancel-btn {\r\n  padding: 6px 14px;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n}\r\n\r\n.delete-confirm-btn {\r\n  background-color: #ff4d4f;\r\n  color: white;\r\n  border: none;\r\n}\r\n\r\n.delete-cancel-btn {\r\n  background-color: #f5f5f5;\r\n  border: 1px solid #d9d9d9;\r\n  color: #333;\r\n}\r\n\r\n.message-input-container {\r\n  padding: 16px;\r\n  background-color: #ffffff;\r\n  border-top: 1px solid #f0f0f0;\r\n}\r\n\r\n.message-form {\r\n  display: flex;\r\n  gap: 12px;\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  padding: 12px 16px;\r\n  border: 1px solid #e8e8e8;\r\n  border-radius: 24px;\r\n  font-size: 14px;\r\n  outline: none;\r\n  transition: border-color 0.2s;\r\n}\r\n\r\n.message-input:focus {\r\n  border-color: #1890ff;\r\n}\r\n\r\n.send-button {\r\n  background-color: #1890ff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 24px;\r\n  padding: 0 18px;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.send-button:hover {\r\n  background-color: #40a9ff;\r\n}\r\n\r\n.no-discussion-selected {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  color: #999;\r\n  font-size: 16px;\r\n  font-style: italic;\r\n}\r\n\r\n.loading {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 300px;\r\n  color: #888;\r\n}\r\n</style>\r\n<style scoped>\r\n/* Base styles */\r\n.chat-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: calc(100vh - 120px);\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n  margin: 10px;\r\n  position: relative;\r\n}\r\n\r\n.discussion-info {\r\n  padding: 15px;\r\n  background-color: #ffffff;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\nh2 {\r\n  margin: 0 0 5px 0;\r\n  font-size: 1.5rem;\r\n  color: #333;\r\n}\r\n\r\n.messages-container {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 15px;\r\n  position: relative;\r\n}\r\n\r\n.message-input-container {\r\n  padding: 15px;\r\n  background-color: #ffffff;\r\n  border-top: 1px solid #e0e0e0;\r\n}\r\n\r\n.message-form {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  padding: 12px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 20px;\r\n  font-size: 14px;\r\n  outline: none;\r\n  transition: border 0.3s;\r\n}\r\n\r\n.message-input:focus {\r\n  border-color: #4a90e2;\r\n}\r\n\r\n.send-button {\r\n  background-color: #4a90e2;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 20px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.send-button:hover {\r\n  background-color: #3a7fcb;\r\n}\r\n\r\n/* Message styles */\r\n.message {\r\n  display: flex;\r\n  margin-bottom: 15px;\r\n  position: relative;\r\n}\r\n\r\n.sender-message {\r\n  flex-direction: row-reverse;\r\n}\r\n\r\n.message-bubble {\r\n  max-width: 70%;\r\n  padding: 12px 15px;\r\n  border-radius: 18px;\r\n  position: relative;\r\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.sender-message .message-bubble {\r\n  background-color: #d1e7ff;\r\n  border-top-right-radius: 2px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.receiver-message .message-bubble {\r\n  background-color: #ffffff;\r\n  border-top-left-radius: 2px;\r\n  margin-left: 10px;\r\n}\r\n\r\n.message-content {\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  word-break: break-word;\r\n}\r\n\r\n.message-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 5px;\r\n  font-size: 11px;\r\n  color: #888;\r\n}\r\n\r\n.user-name {\r\n  font-weight: 500;\r\n  margin-right: 5px;\r\n}\r\n\r\n.timestamp {\r\n  color: #aaa;\r\n}\r\n\r\n.no-messages {\r\n  text-align: center;\r\n  color: #888;\r\n  margin-top: 40px;\r\n}\r\n\r\n.back-button {\r\n  display: flex;\r\n  align-items: center;\r\n  background: none;\r\n  border: none;\r\n  color: #4a90e2;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  padding: 10px;\r\n  margin: 5px;\r\n}\r\n\r\n.back-icon {\r\n  margin-right: 5px;\r\n  font-size: 16px;\r\n}\r\n\r\n.no-discussion-selected {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 200px;\r\n  color: #666;\r\n  font-size: 16px;\r\n}\r\n\r\n.loading {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 200px;\r\n  color: #666;\r\n}\r\n\r\n/* User avatar styles */\r\n.message-avatar {\r\n  margin: 0 8px;\r\n}\r\n\r\n.user-avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  background-color: #e0e0e0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  overflow: hidden;\r\n}\r\n\r\n.user-avatar.small {\r\n  width: 30px;\r\n  height: 30px;\r\n}\r\n\r\n.avatar-img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.avatar-placeholder {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #666;\r\n}\r\n\r\n.user-avatar.small .avatar-placeholder {\r\n  font-size: 12px;\r\n}\r\n\r\n/* Message actions */\r\n.message-actions {\r\n  display: flex;\r\n  opacity: 0;\r\n  transition: opacity 0.2s;\r\n}\r\n\r\n.message:hover .message-actions {\r\n  opacity: 1;\r\n}\r\n\r\n.action-btn {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  margin-left: 8px;\r\n  color: #888;\r\n  font-size: 14px;\r\n}\r\n\r\n.action-btn:hover {\r\n  color: #4a90e2;\r\n}\r\n\r\n/* Edit message styles */\r\n.edit-message-container {\r\n  width: 100%;\r\n}\r\n\r\n.edit-message-input {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  resize: vertical;\r\n  min-height: 60px;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.edit-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 8px;\r\n}\r\n\r\n.edit-save-btn, .edit-cancel-btn {\r\n  padding: 4px 10px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n}\r\n\r\n.edit-save-btn {\r\n  background-color: #4a90e2;\r\n  color: white;\r\n  border: none;\r\n}\r\n\r\n.edit-cancel-btn {\r\n  background-color: transparent;\r\n  border: 1px solid #ccc;\r\n  color: #666;\r\n}\r\n\r\n.edited-indicator {\r\n  font-size: 11px;\r\n  color: #888;\r\n  margin-left: 5px;\r\n  font-style: italic;\r\n}\r\n\r\n/* Reaction styles */\r\n.reaction-picker {\r\n  position: absolute;\r\n  z-index: 100;\r\n  background-color: white;\r\n  border-radius: 24px;\r\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);\r\n  padding: 8px;\r\n}\r\n\r\n.reaction-picker-content {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n}\r\n\r\n.reaction-btn {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 18px;\r\n  padding: 5px;\r\n  border-radius: 50%;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.reaction-btn:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.message-reactions {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-top: 5px;\r\n}\r\n\r\n.reactions-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 5px;\r\n}\r\n\r\n.reaction-badge {\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: #f1f1f1;\r\n  border-radius: 12px;\r\n  padding: 3px 6px;\r\n  font-size: 12px;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.reaction-badge.user-reacted {\r\n  background-color: #e1f0ff;\r\n}\r\n\r\n.reaction-badge:hover {\r\n  background-color: #e5e5e5;\r\n}\r\n\r\n.reaction-badge.user-reacted:hover {\r\n  background-color: #d1e6ff;\r\n}\r\n\r\n.reaction-emoji {\r\n  font-size: 14px;\r\n  margin-right: 3px;\r\n}\r\n\r\n.reaction-count {\r\n  font-size: 11px;\r\n  color: #666;\r\n}\r\n\r\n/* User status section */\r\n.active-users {\r\n  margin-top: 15px;\r\n  padding-top: 10px;\r\n  border-top: 1px solid #f0f0f0;\r\n}\r\n\r\n.status-heading {\r\n  font-size: 14px;\r\n  color: #666;\r\n  margin: 0 0 8px 0;\r\n}\r\n\r\n.user-status {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.status-indicator {\r\n  width: 8px;\r\n  height: 8px;\r\n  border-radius: 50%;\r\n  margin: 0 8px;\r\n}\r\n\r\n.status-indicator.online {\r\n  background-color: #4caf50;\r\n}\r\n\r\n.status-indicator.offline {\r\n  background-color: #ccc;\r\n}\r\n\r\n.status-name {\r\n  font-size: 13px;\r\n  color: #333;\r\n}\r\n\r\n.status-activity {\r\n  font-size: 12px;\r\n  color: #888;\r\n  font-style: italic;\r\n  margin-left: 5px;\r\n}\r\n/* Participants display styling */\r\n.discussion-header {\r\n  padding: 15px 15px 5px 15px;\r\n}\r\n\r\n.participants-bar {\r\n  padding: 5px 15px 15px 15px;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  background-color: #ffffff;\r\n}\r\n\r\n.participants-label {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  color: #333;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.participants-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n}\r\n\r\n.participant-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 60px;\r\n}\r\n\r\n.participant-avatar {\r\n  position: relative;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  background-color: #e5e5e5;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.user-initials {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #555;\r\n}\r\n\r\n.participant-name {\r\n  font-size: 12px;\r\n  color: #666;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  width: 100%;\r\n}\r\n\r\n.status-indicator {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 10px;\r\n  height: 10px;\r\n  border-radius: 50%;\r\n  border: 2px solid #fff;\r\n}\r\n\r\n.status-indicator.online {\r\n  background-color: #4caf50;\r\n}\r\n\r\n.status-indicator.offline {\r\n  background-color: #ccc;\r\n}\r\n\r\n/* You can add additional responsive adjustments if needed */\r\n@media (max-width: 640px) {\r\n  .participants-list {\r\n    gap: 5px;\r\n  }\r\n  \r\n  .participant-item {\r\n    width: 50px;\r\n  }\r\n  \r\n  .participant-avatar {\r\n    width: 35px;\r\n    height: 35px;\r\n  }\r\n  \r\n  .user-initials {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .participant-name {\r\n    font-size: 11px;\r\n  }\r\n}\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}