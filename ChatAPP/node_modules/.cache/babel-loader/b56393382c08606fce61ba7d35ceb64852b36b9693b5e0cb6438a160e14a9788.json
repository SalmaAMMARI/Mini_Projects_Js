{"ast":null,"code":"import _createForOfIteratorHelper from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { getAuth, onAuthStateChanged, signOut } from \"firebase/auth\";\nimport { getFirestore, collection, getDocs, query, orderBy, doc, updateDoc, arrayUnion, arrayRemove, getDoc, addDoc, where, serverTimestamp } from \"firebase/firestore\";\nimport { ref, onMounted, computed } from 'vue';\nimport { useRouter } from 'vue-router';\nimport SingleDisc from \"../components/singleDisc.vue\";\nimport Responses from \"../components/Responses.vue\";\nexport default {\n  name: \"Forum\",\n  components: {\n    SingleDisc: SingleDisc,\n    Responses: Responses\n  },\n  emits: ['select-discussion'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var router = useRouter();\n    var userId = ref(null);\n    var userEmail = ref(null);\n    var FirstName = ref('');\n    var LastName = ref('');\n    var isOnline = ref(false);\n    var profileImageUrl = ref('');\n    var discussions = ref([]);\n    var loading = ref(true);\n    var error = ref(null);\n    var filterType = ref('all');\n    var currentDiscussionId = ref(null);\n    var canViewDiscussion = ref(false);\n\n    // Pour la photo de profil\n    var showProfilePicDialog = ref(false);\n    var profilePicInput = ref('');\n\n    // Pour créer une discussion privée\n    var showPrivateDialog = ref(false);\n    var newDiscPrivateTitle = ref('');\n    var newDiscPrivateDescription = ref('');\n    var newDiscParticipantEmail = ref('');\n\n    // Pour créer une discussion publique\n    var showPublicDialog = ref(false);\n    var newDiscPublicTitle = ref('');\n    var newDiscPublicDescription = ref('');\n    var newDiscPublicImageUrl = ref(''); // New field for discussion image URL\n    var newParticipantEmail = ref('');\n    var participantEmails = ref([]);\n\n    // Fetch user data including name, online status, and profile picture\n    var fetchUserData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(uid) {\n        var db, userDoc;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              db = getFirestore();\n              _context.next = 4;\n              return getDoc(doc(db, \"users\", uid));\n            case 4:\n              userDoc = _context.sent;\n              if (userDoc.exists()) {\n                FirstName.value = userDoc.data().FirstName || '';\n                LastName.value = userDoc.data().LastName || '';\n                isOnline.value = userDoc.data().isOnline || false;\n                profileImageUrl.value = userDoc.data().profileImageUrl || '';\n              }\n              _context.next = 11;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"Error fetching user data:\", _context.t0);\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n      return function fetchUserData(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    // Open profile picture update dialog\n    var openProfilePicDialog = function openProfilePicDialog() {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour modifier votre photo de profil.\");\n        return;\n      }\n      profilePicInput.value = profileImageUrl.value || '';\n      showProfilePicDialog.value = true;\n    };\n\n    // Close profile picture dialog\n    var closeProfilePicDialog = function closeProfilePicDialog() {\n      showProfilePicDialog.value = false;\n      profilePicInput.value = '';\n    };\n\n    // Update profile picture\n    var updateProfilePicture = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var db;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (userId.value) {\n                _context2.next = 3;\n                break;\n              }\n              alert(\"Vous devez être connecté pour modifier votre photo de profil.\");\n              return _context2.abrupt(\"return\");\n            case 3:\n              _context2.prev = 3;\n              db = getFirestore();\n              _context2.next = 7;\n              return updateDoc(doc(db, \"users\", user.uid), {\n                profileImageUrl: profilePicInput.value\n              });\n            case 7:\n              profileImageUrl.value = profilePicInput.value;\n              closeProfilePicDialog();\n              alert(\"Photo de profil mise à jour avec succès!\");\n              _context2.next = 16;\n              break;\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](3);\n              console.error(\"Error updating profile picture:\", _context2.t0);\n              alert(\"Erreur lors de la mise à jour de la photo de profil.\");\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[3, 12]]);\n      }));\n      return function updateProfilePicture() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    // Logout function\n    var logout = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var auth, db;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              auth = getAuth();\n              db = getFirestore(); // Set the user's online status to false in Firestore\n              if (!userId.value) {\n                _context3.next = 6;\n                break;\n              }\n              _context3.next = 6;\n              return updateDoc(doc(db, \"users\", userId.value), {\n                isOnline: false\n              });\n            case 6:\n              _context3.next = 8;\n              return signOut(auth);\n            case 8:\n              // Redirect to home page\n              router.push('/');\n              _context3.next = 15;\n              break;\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(\"Error logging out:\", _context3.t0);\n              alert(\"Une erreur s'est produite lors de la déconnexion\");\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 11]]);\n      }));\n      return function logout() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    var fetchDiscussions = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var db, discussionsQuery, querySnapshot, usersRef, usersSnapshot, usersMap;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              loading.value = true;\n              db = getFirestore();\n              discussionsQuery = query(collection(db, \"discussions\"), orderBy(\"createdAt\", \"desc\"));\n              _context5.next = 6;\n              return getDocs(discussionsQuery);\n            case 6:\n              querySnapshot = _context5.sent;\n              // Get all user data to fetch creator profile pictures\n              usersRef = collection(db, \"users\");\n              _context5.next = 10;\n              return getDocs(usersRef);\n            case 10:\n              usersSnapshot = _context5.sent;\n              usersMap = {};\n              usersSnapshot.forEach(function (doc) {\n                usersMap[doc.id] = doc.data();\n              });\n\n              // Process discussion data\n              _context5.next = 15;\n              return Promise.all(querySnapshot.docs.map(/*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(doc) {\n                  var data;\n                  return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                    while (1) switch (_context4.prev = _context4.next) {\n                      case 0:\n                        data = doc.data();\n                        if (data.createdAt) {\n                          data.createdAtTimestamp = data.createdAt.toDate ? data.createdAt.toDate().getTime() : new Date(data.createdAt).getTime();\n                        }\n\n                        // Ensure participants is an array\n                        if (!data.participants) {\n                          data.participants = [];\n                        }\n\n                        // Add creator's profile picture if available\n                        if (data.createdBy && usersMap[data.createdBy]) {\n                          data.creatorPic = usersMap[data.createdBy].profileImageUrl || '';\n                        }\n                        return _context4.abrupt(\"return\", _objectSpread({\n                          id: doc.id\n                        }, data));\n                      case 5:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }, _callee4);\n                }));\n                return function (_x2) {\n                  return _ref6.apply(this, arguments);\n                };\n              }()));\n            case 15:\n              discussions.value = _context5.sent;\n              console.log(\"Fetched discussions:\", discussions.value);\n              _context5.next = 23;\n              break;\n            case 19:\n              _context5.prev = 19;\n              _context5.t0 = _context5[\"catch\"](0);\n              console.error(\"Failed to load discussions:\", _context5.t0);\n              error.value = \"Failed to load discussions: \" + _context5.t0.message;\n            case 23:\n              _context5.prev = 23;\n              loading.value = false;\n              return _context5.finish(23);\n            case 26:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[0, 19, 23, 26]]);\n      }));\n      return function fetchDiscussions() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n    var isParticipant = function isParticipant(discussion) {\n      return userId.value && discussion.participants && Array.isArray(discussion.participants) && discussion.participants.includes(userId.value);\n    };\n    var filteredDiscussions = computed(function () {\n      if (!discussions.value.length) return [];\n\n      // Filter out private discussions where user is not a participant\n      var accessibleDiscussions = discussions.value.filter(function (disc) {\n        // If private, only show if user is a participant\n        if (disc.isPrivate === true) {\n          return isParticipant(disc);\n        }\n        // If public, always show\n        return true;\n      });\n\n      // Then apply type filter\n      if (filterType.value === 'all') {\n        return accessibleDiscussions;\n      } else if (filterType.value === 'private') {\n        return accessibleDiscussions.filter(function (disc) {\n          return disc.isPrivate === true;\n        });\n      } else if (filterType.value === 'public') {\n        return accessibleDiscussions.filter(function (disc) {\n          return disc.isPrivate === false;\n        });\n      }\n      return accessibleDiscussions;\n    });\n    var checkParticipantStatus = function checkParticipantStatus() {\n      if (!currentDiscussionId.value || !userId.value) {\n        canViewDiscussion.value = false;\n        return;\n      }\n      var currentDiscussion = discussions.value.find(function (d) {\n        return d.id === currentDiscussionId.value;\n      });\n      if (currentDiscussion) {\n        canViewDiscussion.value = isParticipant(currentDiscussion);\n      } else {\n        canViewDiscussion.value = false;\n      }\n    };\n    var joinDiscussion = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(discussionId) {\n        var db, discussionRef, discussionSnap, discussionIndex;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (userId.value) {\n                _context6.next = 3;\n                break;\n              }\n              alert(\"Vous devez être connecté pour rejoindre une discussion\");\n              return _context6.abrupt(\"return\");\n            case 3:\n              _context6.prev = 3;\n              db = getFirestore();\n              discussionRef = doc(db, 'discussions', discussionId); // Get the latest version of the document\n              _context6.next = 8;\n              return getDoc(discussionRef);\n            case 8:\n              discussionSnap = _context6.sent;\n              if (discussionSnap.exists()) {\n                _context6.next = 11;\n                break;\n              }\n              throw new Error(\"Discussion not found\");\n            case 11:\n              _context6.next = 13;\n              return updateDoc(discussionRef, {\n                participants: arrayUnion(userId.value)\n              });\n            case 13:\n              // Update local state\n              discussionIndex = discussions.value.findIndex(function (d) {\n                return d.id === discussionId;\n              });\n              if (discussionIndex !== -1) {\n                if (!discussions.value[discussionIndex].participants) {\n                  discussions.value[discussionIndex].participants = [];\n                }\n                if (!discussions.value[discussionIndex].participants.includes(userId.value)) {\n                  discussions.value[discussionIndex].participants.push(userId.value);\n                }\n              }\n\n              // Update the view permission\n              canViewDiscussion.value = true;\n              console.log(\"Successfully joined discussion \".concat(discussionId));\n              _context6.next = 23;\n              break;\n            case 19:\n              _context6.prev = 19;\n              _context6.t0 = _context6[\"catch\"](3);\n              console.error(\"Error joining discussion:\", _context6.t0);\n              alert(\"Une erreur s'est produite lors de la tentative de rejoindre la discussion\");\n            case 23:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[3, 19]]);\n      }));\n      return function joinDiscussion(_x3) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n    var leaveDiscussion = /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(discussionId, isPrivate) {\n        var db, discussionRef, discussionSnap, discussionIndex;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (userId.value) {\n                _context7.next = 3;\n                break;\n              }\n              alert(\"Vous devez être connecté pour quitter une discussion\");\n              return _context7.abrupt(\"return\");\n            case 3:\n              _context7.prev = 3;\n              db = getFirestore();\n              discussionRef = doc(db, 'discussions', discussionId); // Get the latest version of the document\n              _context7.next = 8;\n              return getDoc(discussionRef);\n            case 8:\n              discussionSnap = _context7.sent;\n              if (discussionSnap.exists()) {\n                _context7.next = 11;\n                break;\n              }\n              throw new Error(\"Discussion not found\");\n            case 11:\n              _context7.next = 13;\n              return updateDoc(discussionRef, {\n                participants: arrayRemove(userId.value)\n              });\n            case 13:\n              // Update local state\n              discussionIndex = discussions.value.findIndex(function (d) {\n                return d.id === discussionId;\n              });\n              if (discussionIndex !== -1 && discussions.value[discussionIndex].participants) {\n                discussions.value[discussionIndex].participants = discussions.value[discussionIndex].participants.filter(function (p) {\n                  return p !== userId.value;\n                });\n              }\n\n              // If this is the current discussion, hide it\n              if (currentDiscussionId.value === discussionId) {\n                hideDiscussion();\n              }\n\n              // For private discussions, they should disappear from the list after leaving\n              if (!isPrivate) {\n                _context7.next = 19;\n                break;\n              }\n              _context7.next = 19;\n              return fetchDiscussions();\n            case 19:\n              console.log(\"Successfully left discussion \".concat(discussionId));\n              _context7.next = 26;\n              break;\n            case 22:\n              _context7.prev = 22;\n              _context7.t0 = _context7[\"catch\"](3);\n              console.error(\"Error leaving discussion:\", _context7.t0);\n              alert(\"Une erreur s'est produite lors de la tentative de quitter la discussion\");\n            case 26:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[3, 22]]);\n      }));\n      return function leaveDiscussion(_x4, _x5) {\n        return _ref8.apply(this, arguments);\n      };\n    }();\n    var showAll = function showAll() {\n      filterType.value = 'all';\n    };\n    var showPrivate = function showPrivate() {\n      filterType.value = 'private';\n    };\n    var showPublic = function showPublic() {\n      filterType.value = 'public';\n    };\n    var handleViewDiscussion = function handleViewDiscussion(discussionId) {\n      currentDiscussionId.value = discussionId;\n      emit('select-discussion', discussionId);\n      checkParticipantStatus();\n    };\n    var hideDiscussion = function hideDiscussion() {\n      currentDiscussionId.value = null;\n      canViewDiscussion.value = false;\n    };\n\n    // Fonctions pour la création de discussion\n    var openCreatePrivateDialog = function openCreatePrivateDialog() {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour créer une discussion.\");\n        return;\n      }\n      showPrivateDialog.value = true;\n      showPublicDialog.value = false;\n      showProfilePicDialog.value = false;\n    };\n    var openCreatePublicDialog = function openCreatePublicDialog() {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour créer une discussion.\");\n        return;\n      }\n      showPublicDialog.value = true;\n      showPrivateDialog.value = false;\n      showProfilePicDialog.value = false;\n    };\n    var closeModals = function closeModals() {\n      showPrivateDialog.value = false;\n      showPublicDialog.value = false;\n      newDiscPrivateTitle.value = '';\n      newDiscPrivateDescription.value = '';\n      newDiscParticipantEmail.value = '';\n      newDiscPublicTitle.value = '';\n      newDiscPublicDescription.value = '';\n      newDiscPublicImageUrl.value = ''; // Reset the image URL field\n      newParticipantEmail.value = '';\n      participantEmails.value = [];\n    };\n    var addParticipantEmail = function addParticipantEmail() {\n      if (newParticipantEmail.value && !participantEmails.value.includes(newParticipantEmail.value)) {\n        participantEmails.value.push(newParticipantEmail.value);\n        newParticipantEmail.value = '';\n      }\n    };\n    var removeParticipantEmail = function removeParticipantEmail(index) {\n      participantEmails.value.splice(index, 1);\n    };\n\n    // FIXED: Improved email search for private discussions\n    var createPrivateDiscussion = /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var emailToFind, db, usersRef, emailFields, participantId, _i, _emailFields, field, q1, snap1, q2, snap2, allUsers, newDiscussion, docRef;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (userId.value) {\n                _context8.next = 3;\n                break;\n              }\n              alert(\"Vous devez être connecté pour créer une discussion.\");\n              return _context8.abrupt(\"return\");\n            case 3:\n              if (newDiscPrivateTitle.value.trim()) {\n                _context8.next = 6;\n                break;\n              }\n              alert(\"Le titre de la discussion est obligatoire.\");\n              return _context8.abrupt(\"return\");\n            case 6:\n              emailToFind = newDiscParticipantEmail.value.trim();\n              if (emailToFind) {\n                _context8.next = 10;\n                break;\n              }\n              alert(\"Veuillez spécifier un participant.\");\n              return _context8.abrupt(\"return\");\n            case 10:\n              _context8.prev = 10;\n              // Chercher l'utilisateur par email - avec plus de robustesse\n              db = getFirestore();\n              usersRef = collection(db, \"users\"); // Try different field names and case sensitivity options\n              emailFields = [\"Email\", \"email\", \"userEmail\"];\n              participantId = null;\n              _i = 0, _emailFields = emailFields;\n            case 16:\n              if (!(_i < _emailFields.length)) {\n                _context8.next = 39;\n                break;\n              }\n              field = _emailFields[_i];\n              if (!participantId) {\n                _context8.next = 20;\n                break;\n              }\n              return _context8.abrupt(\"break\", 39);\n            case 20:\n              // Skip if already found\n              // Try case-sensitive search\n              q1 = query(usersRef, where(field, \"==\", emailToFind));\n              _context8.next = 23;\n              return getDocs(q1);\n            case 23:\n              snap1 = _context8.sent;\n              if (snap1.empty) {\n                _context8.next = 28;\n                break;\n              }\n              snap1.forEach(function (doc) {\n                participantId = doc.id;\n              });\n              console.log(\"Found user with \".concat(field, \" (case-sensitive): \").concat(participantId));\n              return _context8.abrupt(\"break\", 39);\n            case 28:\n              // Try lowercase search\n              q2 = query(usersRef, where(field, \"==\", emailToFind.toLowerCase()));\n              _context8.next = 31;\n              return getDocs(q2);\n            case 31:\n              snap2 = _context8.sent;\n              if (snap2.empty) {\n                _context8.next = 36;\n                break;\n              }\n              snap2.forEach(function (doc) {\n                participantId = doc.id;\n              });\n              console.log(\"Found user with \".concat(field, \" (lowercase): \").concat(participantId));\n              return _context8.abrupt(\"break\", 39);\n            case 36:\n              _i++;\n              _context8.next = 16;\n              break;\n            case 39:\n              if (participantId) {\n                _context8.next = 45;\n                break;\n              }\n              console.log(\"User not found with direct queries, trying manual comparison\");\n              _context8.next = 43;\n              return getDocs(usersRef);\n            case 43:\n              allUsers = _context8.sent;\n              allUsers.forEach(function (userDoc) {\n                var userData = userDoc.data();\n                for (var key in userData) {\n                  // Check if any field contains an email that matches\n                  if (typeof userData[key] === 'string' && userData[key].toLowerCase() === emailToFind.toLowerCase() && userData[key].includes('@')) {\n                    participantId = userDoc.id;\n                    console.log(\"Found user by manual search in field \".concat(key, \": \").concat(participantId));\n                    break;\n                  }\n                }\n              });\n            case 45:\n              if (participantId) {\n                _context8.next = 48;\n                break;\n              }\n              alert(\"Utilisateur non trouvé avec cet email. Vérifiez l'adresse email et réessayez.\");\n              return _context8.abrupt(\"return\");\n            case 48:\n              // Créer la discussion\n              newDiscussion = {\n                title: newDiscPrivateTitle.value.trim(),\n                description: newDiscPrivateDescription.value.trim(),\n                isPrivate: true,\n                participants: [userId.value, participantId],\n                createdAt: serverTimestamp(),\n                createdBy: userId.value,\n                creatorPic: profileImageUrl.value || ''\n              };\n              _context8.next = 51;\n              return addDoc(collection(db, \"discussions\"), newDiscussion);\n            case 51:\n              docRef = _context8.sent;\n              // Ajouter la nouvelle discussion à la liste locale\n              discussions.value.unshift(_objectSpread(_objectSpread({\n                id: docRef.id\n              }, newDiscussion), {}, {\n                createdAt: new Date() // Pour l'affichage immédiat, sera remplacé au prochain fetchDiscussions\n              }));\n              alert(\"Discussion privée créée avec succès!\");\n              closeModals();\n              _context8.next = 61;\n              break;\n            case 57:\n              _context8.prev = 57;\n              _context8.t0 = _context8[\"catch\"](10);\n              console.error(\"Erreur lors de la création de la discussion privée:\", _context8.t0);\n              alert(\"Erreur lors de la création de la discussion. Veuillez réessayer.\");\n            case 61:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[10, 57]]);\n      }));\n      return function createPrivateDiscussion() {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n\n    // FIXED: Improved email search for public discussions too and added image URL\n    var createPublicDiscussion = /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var db, participantIds, notFoundEmails, usersRef, _iterator, _step, _loop, newDiscussion, docRef;\n        return _regeneratorRuntime().wrap(function _callee9$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              if (userId.value) {\n                _context10.next = 3;\n                break;\n              }\n              alert(\"Vous devez être connecté pour créer une discussion.\");\n              return _context10.abrupt(\"return\");\n            case 3:\n              if (newDiscPublicTitle.value.trim()) {\n                _context10.next = 6;\n                break;\n              }\n              alert(\"Le titre de la discussion est obligatoire.\");\n              return _context10.abrupt(\"return\");\n            case 6:\n              _context10.prev = 6;\n              db = getFirestore(); // Récupérer les IDs des participants à partir des emails\n              participantIds = [userId.value]; // Toujours inclure l'utilisateur actuel\n              notFoundEmails = [];\n              if (!(participantEmails.value.length > 0)) {\n                _context10.next = 28;\n                break;\n              }\n              usersRef = collection(db, \"users\");\n              _iterator = _createForOfIteratorHelper(participantEmails.value);\n              _context10.prev = 13;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var email, emailToFind, found, emailFields, _i2, _emailFields2, field, q, querySnapshot, q2, snap2, allUsers;\n                return _regeneratorRuntime().wrap(function _loop$(_context9) {\n                  while (1) switch (_context9.prev = _context9.next) {\n                    case 0:\n                      email = _step.value;\n                      emailToFind = email.trim();\n                      found = false;\n                      emailFields = [\"Email\", \"email\", \"userEmail\"];\n                      _i2 = 0, _emailFields2 = emailFields;\n                    case 5:\n                      if (!(_i2 < _emailFields2.length)) {\n                        _context9.next = 23;\n                        break;\n                      }\n                      field = _emailFields2[_i2];\n                      if (!found) {\n                        _context9.next = 9;\n                        break;\n                      }\n                      return _context9.abrupt(\"break\", 23);\n                    case 9:\n                      // Try exact match\n                      q = query(usersRef, where(field, \"==\", emailToFind));\n                      _context9.next = 12;\n                      return getDocs(q);\n                    case 12:\n                      querySnapshot = _context9.sent;\n                      if (!querySnapshot.empty) {\n                        querySnapshot.forEach(function (doc) {\n                          if (!participantIds.includes(doc.id)) {\n                            participantIds.push(doc.id);\n                            found = true;\n                          }\n                        });\n                      }\n\n                      // Try lowercase\n                      if (found) {\n                        _context9.next = 20;\n                        break;\n                      }\n                      q2 = query(usersRef, where(field, \"==\", emailToFind.toLowerCase()));\n                      _context9.next = 18;\n                      return getDocs(q2);\n                    case 18:\n                      snap2 = _context9.sent;\n                      if (!snap2.empty) {\n                        snap2.forEach(function (doc) {\n                          if (!participantIds.includes(doc.id)) {\n                            participantIds.push(doc.id);\n                            found = true;\n                          }\n                        });\n                      }\n                    case 20:\n                      _i2++;\n                      _context9.next = 5;\n                      break;\n                    case 23:\n                      if (found) {\n                        _context9.next = 28;\n                        break;\n                      }\n                      _context9.next = 26;\n                      return getDocs(usersRef);\n                    case 26:\n                      allUsers = _context9.sent;\n                      allUsers.forEach(function (userDoc) {\n                        var userData = userDoc.data();\n                        for (var key in userData) {\n                          if (typeof userData[key] === 'string' && userData[key].toLowerCase() === emailToFind.toLowerCase() && userData[key].includes('@')) {\n                            if (!participantIds.includes(userDoc.id)) {\n                              participantIds.push(userDoc.id);\n                              found = true;\n                              break;\n                            }\n                          }\n                        }\n                      });\n                    case 28:\n                      if (!found) {\n                        notFoundEmails.push(emailToFind);\n                      }\n                    case 29:\n                    case \"end\":\n                      return _context9.stop();\n                  }\n                }, _loop);\n              });\n              _iterator.s();\n            case 16:\n              if ((_step = _iterator.n()).done) {\n                _context10.next = 20;\n                break;\n              }\n              return _context10.delegateYield(_loop(), \"t0\", 18);\n            case 18:\n              _context10.next = 16;\n              break;\n            case 20:\n              _context10.next = 25;\n              break;\n            case 22:\n              _context10.prev = 22;\n              _context10.t1 = _context10[\"catch\"](13);\n              _iterator.e(_context10.t1);\n            case 25:\n              _context10.prev = 25;\n              _iterator.f();\n              return _context10.finish(25);\n            case 28:\n              // Warn about not found emails, but still create the discussion\n              if (notFoundEmails.length > 0) {\n                alert(\"Attention: Les adresses emails suivantes n'ont pas \\xE9t\\xE9 trouv\\xE9es: \".concat(notFoundEmails.join(\", \")));\n              }\n\n              // Créer la discussion\n              newDiscussion = {\n                title: newDiscPublicTitle.value.trim(),\n                description: newDiscPublicDescription.value.trim(),\n                isPrivate: false,\n                participants: participantIds,\n                createdAt: serverTimestamp(),\n                createdBy: userId.value,\n                creatorPic: profileImageUrl.value || '',\n                profileImageUrl: newDiscPublicImageUrl.value || '' // Add the image URL to the discussion\n              };\n              _context10.next = 32;\n              return addDoc(collection(db, \"discussions\"), newDiscussion);\n            case 32:\n              docRef = _context10.sent;\n              // Ajouter la nouvelle discussion à la liste locale\n              discussions.value.unshift(_objectSpread(_objectSpread({\n                id: docRef.id\n              }, newDiscussion), {}, {\n                createdAt: new Date() // Pour l'affichage immédiat\n              }));\n              alert(\"Discussion publique créée avec succès!\");\n              closeModals();\n              _context10.next = 42;\n              break;\n            case 38:\n              _context10.prev = 38;\n              _context10.t2 = _context10[\"catch\"](6);\n              console.error(\"Erreur lors de la création de la discussion publique:\", _context10.t2);\n              alert(\"Erreur lors de la création de la discussion. Veuillez réessayer.\");\n            case 42:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee9, null, [[6, 38], [13, 22, 25, 28]]);\n      }));\n      return function createPublicDiscussion() {\n        return _ref10.apply(this, arguments);\n      };\n    }();\n    onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n      var auth;\n      return _regeneratorRuntime().wrap(function _callee11$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            auth = getAuth();\n            onAuthStateChanged(auth, /*#__PURE__*/function () {\n              var _ref12 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(user) {\n                var db;\n                return _regeneratorRuntime().wrap(function _callee10$(_context11) {\n                  while (1) switch (_context11.prev = _context11.next) {\n                    case 0:\n                      if (!user) {\n                        _context11.next = 10;\n                        break;\n                      }\n                      userId.value = user.uid;\n                      userEmail.value = user.email;\n\n                      // Set online status to true in Firestore\n                      db = getFirestore();\n                      _context11.next = 6;\n                      return updateDoc(doc(db, \"users\", user.uid), {\n                        isOnline: true\n                      });\n                    case 6:\n                      _context11.next = 8;\n                      return fetchUserData(user.uid);\n                    case 8:\n                      _context11.next = 16;\n                      break;\n                    case 10:\n                      userId.value = null;\n                      userEmail.value = null;\n                      FirstName.value = '';\n                      LastName.value = '';\n                      isOnline.value = false;\n                      profileImageUrl.value = '';\n                    case 16:\n                      checkParticipantStatus();\n                    case 17:\n                    case \"end\":\n                      return _context11.stop();\n                  }\n                }, _callee10);\n              }));\n              return function (_x6) {\n                return _ref12.apply(this, arguments);\n              };\n            }());\n            _context12.next = 4;\n            return fetchDiscussions();\n          case 4:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee11);\n    })));\n    return {\n      userId: userId,\n      userEmail: userEmail,\n      FirstName: FirstName,\n      LastName: LastName,\n      isOnline: isOnline,\n      profileImageUrl: profileImageUrl,\n      discussions: discussions,\n      loading: loading,\n      error: error,\n      filteredDiscussions: filteredDiscussions,\n      logout: logout,\n      showAll: showAll,\n      showPrivate: showPrivate,\n      showPublic: showPublic,\n      handleViewDiscussion: handleViewDiscussion,\n      hideDiscussion: hideDiscussion,\n      currentDiscussionId: currentDiscussionId,\n      canViewDiscussion: canViewDiscussion,\n      isParticipant: isParticipant,\n      joinDiscussion: joinDiscussion,\n      leaveDiscussion: leaveDiscussion,\n      filterType: filterType,\n      // Pour la photo de profil\n      showProfilePicDialog: showProfilePicDialog,\n      profilePicInput: profilePicInput,\n      openProfilePicDialog: openProfilePicDialog,\n      closeProfilePicDialog: closeProfilePicDialog,\n      updateProfilePicture: updateProfilePicture,\n      // Pour création de discussion privée\n      showPrivateDialog: showPrivateDialog,\n      newDiscPrivateTitle: newDiscPrivateTitle,\n      newDiscPrivateDescription: newDiscPrivateDescription,\n      newDiscParticipantEmail: newDiscParticipantEmail,\n      openCreatePrivateDialog: openCreatePrivateDialog,\n      createPrivateDiscussion: createPrivateDiscussion,\n      // Pour création de discussion publique\n      showPublicDialog: showPublicDialog,\n      newDiscPublicTitle: newDiscPublicTitle,\n      newDiscPublicDescription: newDiscPublicDescription,\n      newDiscPublicImageUrl: newDiscPublicImageUrl,\n      // New variable for discussion image URL\n      newParticipantEmail: newParticipantEmail,\n      participantEmails: participantEmails,\n      openCreatePublicDialog: openCreatePublicDialog,\n      createPublicDiscussion: createPublicDiscussion,\n      addParticipantEmail: addParticipantEmail,\n      removeParticipantEmail: removeParticipantEmail,\n      closeModals: closeModals\n    };\n  }\n};","map":{"version":3,"names":["getAuth","onAuthStateChanged","signOut","getFirestore","collection","getDocs","query","orderBy","doc","updateDoc","arrayUnion","arrayRemove","getDoc","addDoc","where","serverTimestamp","ref","onMounted","computed","useRouter","SingleDisc","Responses","name","components","emits","setup","props","_ref","emit","router","userId","userEmail","FirstName","LastName","isOnline","profileImageUrl","discussions","loading","error","filterType","currentDiscussionId","canViewDiscussion","showProfilePicDialog","profilePicInput","showPrivateDialog","newDiscPrivateTitle","newDiscPrivateDescription","newDiscParticipantEmail","showPublicDialog","newDiscPublicTitle","newDiscPublicDescription","newDiscPublicImageUrl","newParticipantEmail","participantEmails","fetchUserData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","uid","db","userDoc","wrap","_callee$","_context","prev","next","sent","exists","value","data","t0","console","stop","_x","apply","arguments","openProfilePicDialog","alert","closeProfilePicDialog","updateProfilePicture","_ref3","_callee2","_callee2$","_context2","abrupt","user","logout","_ref4","_callee3","auth","_callee3$","_context3","push","fetchDiscussions","_ref5","_callee5","discussionsQuery","querySnapshot","usersRef","usersSnapshot","usersMap","_callee5$","_context5","forEach","id","Promise","all","docs","map","_ref6","_callee4","_callee4$","_context4","createdAt","createdAtTimestamp","toDate","getTime","Date","participants","createdBy","creatorPic","_objectSpread","_x2","log","message","finish","isParticipant","discussion","Array","isArray","includes","filteredDiscussions","length","accessibleDiscussions","filter","disc","isPrivate","checkParticipantStatus","currentDiscussion","find","d","joinDiscussion","_ref7","_callee6","discussionId","discussionRef","discussionSnap","discussionIndex","_callee6$","_context6","Error","findIndex","concat","_x3","leaveDiscussion","_ref8","_callee7","_callee7$","_context7","p","hideDiscussion","_x4","_x5","showAll","showPrivate","showPublic","handleViewDiscussion","openCreatePrivateDialog","openCreatePublicDialog","closeModals","addParticipantEmail","removeParticipantEmail","index","splice","createPrivateDiscussion","_ref9","_callee8","emailToFind","emailFields","participantId","_i","_emailFields","field","q1","snap1","q2","snap2","allUsers","newDiscussion","docRef","_callee8$","_context8","trim","empty","toLowerCase","userData","key","title","description","unshift","createPublicDiscussion","_ref10","_callee9","participantIds","notFoundEmails","_iterator","_step","_loop","_callee9$","_context10","_createForOfIteratorHelper","email","found","_i2","_emailFields2","q","_loop$","_context9","s","n","done","delegateYield","t1","e","f","join","t2","_callee11","_callee11$","_context12","_ref12","_callee10","_callee10$","_context11","_x6"],"sources":["/workspaces/Mini_Projects_Js/ChatAPP/src/components/Forum.vue"],"sourcesContent":["<template>\n  <div class=\"forum-layout\">\n    <!-- Top Navigation Bar -->\n    <div class=\"top-nav\">\n      <div class=\"user-info\">\n        <router-link :to=\"`/profile/${userId}`\" class=\"profile-link\">\n          <img :src=\"profileImageUrl || '/api/placeholder/32/32'\" alt=\"Profile\" class=\"profile-image\" />\n          <span class=\"username\">{{ FirstName }} {{ LastName }}</span>\n          <span class=\"status-dot\" :class=\"{ 'online': isOnline }\"></span>\n        </router-link>\n      </div>\n      <button @click=\"logout\" class=\"logout-btn\">Déconnexion</button>\n    </div>\n    \n    <div class=\"forum-content\">\n      <div class=\"left-panel\">\n        <!-- Create Discussion Buttons -->\n        <div class=\"create-buttons\">\n          <button @click=\"openCreatePrivateDialog\" class=\"create-button private-btn\">\n            <span class=\"icon\">+</span> Créer une discussion privée\n          </button>\n          <button @click=\"openCreatePublicDialog\" class=\"create-button public-btn\">\n            <span class=\"icon\">+</span> Créer une discussion publique\n          </button>\n        </div>\n        \n        <!-- Filter Buttons -->\n        <div class=\"filter-buttons\">\n          <button @click=\"showAll\" :class=\"{ active: filterType === 'all' }\">Tous</button>\n          <button @click=\"showPrivate\" :class=\"{ active: filterType === 'private' }\">Privés</button>\n          <button @click=\"showPublic\" :class=\"{ active: filterType === 'public' }\">Publics</button>\n        </div>\n        \n        <!-- Discussions List -->\n        <SingleDisc\n          v-for=\"disc in filteredDiscussions\"\n          :key=\"disc.id\"\n          :discussion-id=\"disc.id\"\n          :is-participant=\"isParticipant(disc)\"\n          :is-active=\"currentDiscussionId === disc.id\"\n          :creator-pic=\"disc.creatorPic\"\n          @view-discussion=\"handleViewDiscussion\"\n          @join-discussion=\"joinDiscussion\"\n          @leave-discussion=\"leaveDiscussion\"\n        />\n      </div>\n      \n      <div class=\"right-panel\" v-if=\"currentDiscussionId && canViewDiscussion\">\n        <Responses \n          :discussionId=\"currentDiscussionId\"\n          @hide-discussion=\"hideDiscussion\"\n        />\n      </div>\n      <div v-else-if=\"currentDiscussionId && !canViewDiscussion\" class=\"right-panel join-prompt\">\n        <h3>Vous n'êtes pas un participant de cette discussion</h3>\n        <p>Pour voir les détails et participer, veuillez rejoindre la discussion.</p>\n        <button @click=\"joinDiscussion(currentDiscussionId)\" class=\"join-button\">Rejoindre la discussion</button>\n      </div>\n      <div class=\"right-panel\" v-else>\n        Sélectionnez une discussion pour voir les réponses\n      </div>\n    </div>\n    \n    <!-- Modal pour création de discussion privée -->\n    <div v-if=\"showPrivateDialog\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h3>Créer une discussion privée</h3>\n        <input v-model=\"newDiscPrivateTitle\" placeholder=\"Titre de la discussion\" />\n        <textarea v-model=\"newDiscPrivateDescription\" placeholder=\"Description\" rows=\"3\"></textarea>\n        <input v-model=\"newDiscParticipantEmail\" placeholder=\"Email du participant\" />\n        <div class=\"modal-buttons\">\n          <button @click=\"createPrivateDiscussion\">Créer</button>\n          <button @click=\"closeModals\">Annuler</button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Modal pour création de discussion publique -->\n    <div v-if=\"showPublicDialog\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h3>Créer une discussion publique</h3>\n        <input v-model=\"newDiscPublicTitle\" placeholder=\"Titre de la discussion\" />\n        <textarea v-model=\"newDiscPublicDescription\" placeholder=\"Description\" rows=\"3\"></textarea>\n        <!-- New input field for discussion image URL -->\n        <input v-model=\"newDiscPublicImageUrl\" placeholder=\"URL de l'image (https://...)\" />\n        <div class=\"image-preview\" v-if=\"newDiscPublicImageUrl\">\n          <img :src=\"newDiscPublicImageUrl || '/api/placeholder/100/100'\" alt=\"Preview\" class=\"preview-image\" />\n        </div>\n        <div class=\"participant-emails\">\n          <input \n            v-model=\"newParticipantEmail\" \n            placeholder=\"Email d'un participant (optionnel)\" \n            @keyup.enter=\"addParticipantEmail\"\n          />\n          <button @click=\"addParticipantEmail\">Ajouter</button>\n        </div>\n        <div class=\"email-list\" v-if=\"participantEmails.length > 0\">\n          <div v-for=\"(email, index) in participantEmails\" :key=\"index\" class=\"email-tag\">\n            {{ email }}\n            <span class=\"remove-email\" @click=\"removeParticipantEmail(index)\">×</span>\n          </div>\n        </div>\n        <div class=\"modal-buttons\">\n          <button @click=\"createPublicDiscussion\">Créer</button>\n          <button @click=\"closeModals\">Annuler</button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Modal pour mettre à jour la photo de profil -->\n    <div v-if=\"showProfilePicDialog\" class=\"modal\">\n      <div class=\"modal-content\">\n        <h3>Mettre à jour votre photo de profil</h3>\n        <input v-model=\"profilePicInput\" placeholder=\"URL de l'image (https://...)\" />\n        <div class=\"profile-pic-preview\">\n          <img :src=\"profilePicInput || profileImageUrl || '/api/placeholder/100/100'\" alt=\"Preview\" class=\"preview-image\" />\n        </div>\n        <div class=\"modal-buttons\">\n          <button @click=\"updateProfilePicture\">Sauvegarder</button>\n          <button @click=\"closeProfilePicDialog\">Annuler</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getAuth, onAuthStateChanged, signOut } from \"firebase/auth\";\nimport { getFirestore, collection, getDocs, query, orderBy, doc, updateDoc, arrayUnion, arrayRemove, getDoc, addDoc, where, serverTimestamp } from \"firebase/firestore\";\nimport { ref, onMounted, computed } from 'vue';\nimport { useRouter } from 'vue-router';\nimport SingleDisc from \"../components/singleDisc.vue\";\nimport Responses from \"../components/Responses.vue\";\n\nexport default {\n  name: \"Forum\",\n  components: {\n    SingleDisc,\n    Responses\n  },\n  emits: ['select-discussion'],\n  setup(props, { emit }) {\n    const router = useRouter();\n    const userId = ref(null);\n    const userEmail = ref(null);\n    const FirstName = ref('');\n    const LastName = ref('');\n    const isOnline = ref(false);\n    const profileImageUrl = ref('');\n    const discussions = ref([]);\n    const loading = ref(true);\n    const error = ref(null);\n    const filterType = ref('all');\n    const currentDiscussionId = ref(null);\n    const canViewDiscussion = ref(false);\n    \n    // Pour la photo de profil\n    const showProfilePicDialog = ref(false);\n    const profilePicInput = ref('');\n    \n    // Pour créer une discussion privée\n    const showPrivateDialog = ref(false);\n    const newDiscPrivateTitle = ref('');\n    const newDiscPrivateDescription = ref('');\n    const newDiscParticipantEmail = ref('');\n    \n    // Pour créer une discussion publique\n    const showPublicDialog = ref(false);\n    const newDiscPublicTitle = ref('');\n    const newDiscPublicDescription = ref('');\n    const newDiscPublicImageUrl = ref(''); // New field for discussion image URL\n    const newParticipantEmail = ref('');\n    const participantEmails = ref([]);\n    \n    // Fetch user data including name, online status, and profile picture\n    const fetchUserData = async (uid) => {\n      try {\n        const db = getFirestore();\n        const userDoc = await getDoc(doc(db, \"users\", uid));\n        \n        if (userDoc.exists()) {\n          FirstName.value = userDoc.data().FirstName || '';\n          LastName.value = userDoc.data().LastName || '';\n          isOnline.value = userDoc.data().isOnline || false;\n          profileImageUrl.value = userDoc.data().profileImageUrl || '';\n        }\n      } catch (error) {\n        console.error(\"Error fetching user data:\", error);\n      }\n    };\n    \n    // Open profile picture update dialog\n    const openProfilePicDialog = () => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour modifier votre photo de profil.\");\n        return;\n      }\n      profilePicInput.value = profileImageUrl.value || '';\n      showProfilePicDialog.value = true;\n    };\n    \n    // Close profile picture dialog\n    const closeProfilePicDialog = () => {\n      showProfilePicDialog.value = false;\n      profilePicInput.value = '';\n    };\n    \n    // Update profile picture\n    const updateProfilePicture = async () => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour modifier votre photo de profil.\");\n        return;\n      }\n      \n      try {\n        const db = getFirestore();\n        await updateDoc(doc(db, \"users\", user.uid), {\n          profileImageUrl: profilePicInput.value\n        });\n        \n        profileImageUrl.value = profilePicInput.value;\n        closeProfilePicDialog();\n        alert(\"Photo de profil mise à jour avec succès!\");\n      } catch (error) {\n        console.error(\"Error updating profile picture:\", error);\n        alert(\"Erreur lors de la mise à jour de la photo de profil.\");\n      }\n    };\n    \n    // Logout function\n    const logout = async () => {\n      try {\n        const auth = getAuth();\n        const db = getFirestore();\n        \n        // Set the user's online status to false in Firestore\n        if (userId.value) {\n          await updateDoc(doc(db, \"users\", userId.value), {\n            isOnline: false\n          });\n        }\n        \n        // Sign out from Firebase Auth\n        await signOut(auth);\n        \n        // Redirect to home page\n        router.push('/');\n      } catch (error) {\n        console.error(\"Error logging out:\", error);\n        alert(\"Une erreur s'est produite lors de la déconnexion\");\n      }\n    };\n    \n    const fetchDiscussions = async () => {\n      try {\n        loading.value = true;\n        const db = getFirestore();\n        const discussionsQuery = query(\n          collection(db, \"discussions\"),\n          orderBy(\"createdAt\", \"desc\")\n        );\n        \n        const querySnapshot = await getDocs(discussionsQuery);\n        \n        // Get all user data to fetch creator profile pictures\n        const usersRef = collection(db, \"users\");\n        const usersSnapshot = await getDocs(usersRef);\n        const usersMap = {};\n        \n        usersSnapshot.forEach(doc => {\n          usersMap[doc.id] = doc.data();\n        });\n        \n        // Process discussion data\n        discussions.value = await Promise.all(querySnapshot.docs.map(async (doc) => {\n          const data = doc.data();\n          if (data.createdAt) {\n            data.createdAtTimestamp = data.createdAt.toDate ? \n              data.createdAt.toDate().getTime() : \n              new Date(data.createdAt).getTime();\n          }\n          \n          // Ensure participants is an array\n          if (!data.participants) {\n            data.participants = [];\n          }\n          \n          // Add creator's profile picture if available\n          if (data.createdBy && usersMap[data.createdBy]) {\n            data.creatorPic = usersMap[data.createdBy].profileImageUrl || '';\n          }\n          \n          return {\n            id: doc.id,\n            ...data\n          };\n        }));\n        \n        console.log(\"Fetched discussions:\", discussions.value);\n      } catch (err) {\n        console.error(\"Failed to load discussions:\", err);\n        error.value = \"Failed to load discussions: \" + err.message;\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    const isParticipant = (discussion) => {\n      return userId.value && discussion.participants && \n             Array.isArray(discussion.participants) && \n             discussion.participants.includes(userId.value);\n    };\n    \n    const filteredDiscussions = computed(() => {\n      if (!discussions.value.length) return [];\n      \n      // Filter out private discussions where user is not a participant\n      const accessibleDiscussions = discussions.value.filter(disc => {\n        // If private, only show if user is a participant\n        if (disc.isPrivate === true) {\n          return isParticipant(disc);\n        }\n        // If public, always show\n        return true;\n      });\n      \n      // Then apply type filter\n      if (filterType.value === 'all') {\n        return accessibleDiscussions;\n      } else if (filterType.value === 'private') {\n        return accessibleDiscussions.filter(disc => disc.isPrivate === true);\n      } else if (filterType.value === 'public') {\n        return accessibleDiscussions.filter(disc => disc.isPrivate === false);\n      }\n      \n      return accessibleDiscussions;\n    });\n    \n    const checkParticipantStatus = () => {\n      if (!currentDiscussionId.value || !userId.value) {\n        canViewDiscussion.value = false;\n        return;\n      }\n      \n      const currentDiscussion = discussions.value.find(d => d.id === currentDiscussionId.value);\n      if (currentDiscussion) {\n        canViewDiscussion.value = isParticipant(currentDiscussion);\n      } else {\n        canViewDiscussion.value = false;\n      }\n    };\n    \n    const joinDiscussion = async (discussionId) => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour rejoindre une discussion\");\n        return;\n      }\n      \n      try {\n        const db = getFirestore();\n        const discussionRef = doc(db, 'discussions', discussionId);\n        \n        // Get the latest version of the document\n        const discussionSnap = await getDoc(discussionRef);\n        if (!discussionSnap.exists()) {\n          throw new Error(\"Discussion not found\");\n        }\n        \n        // Update the document to add the user to participants\n        await updateDoc(discussionRef, {\n          participants: arrayUnion(userId.value)\n        });\n        \n        // Update local state\n        const discussionIndex = discussions.value.findIndex(d => d.id === discussionId);\n        if (discussionIndex !== -1) {\n          if (!discussions.value[discussionIndex].participants) {\n            discussions.value[discussionIndex].participants = [];\n          }\n          \n          if (!discussions.value[discussionIndex].participants.includes(userId.value)) {\n            discussions.value[discussionIndex].participants.push(userId.value);\n          }\n        }\n        \n        // Update the view permission\n        canViewDiscussion.value = true;\n        \n        console.log(`Successfully joined discussion ${discussionId}`);\n      } catch (error) {\n        console.error(\"Error joining discussion:\", error);\n        alert(\"Une erreur s'est produite lors de la tentative de rejoindre la discussion\");\n      }\n    };\n\n    const leaveDiscussion = async (discussionId, isPrivate) => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour quitter une discussion\");\n        return;\n      }\n      \n      try {\n        const db = getFirestore();\n        const discussionRef = doc(db, 'discussions', discussionId);\n        \n        // Get the latest version of the document\n        const discussionSnap = await getDoc(discussionRef);\n        if (!discussionSnap.exists()) {\n          throw new Error(\"Discussion not found\");\n        }\n        \n        // Update the document to remove the user from participants\n        await updateDoc(discussionRef, {\n          participants: arrayRemove(userId.value)\n        });\n        \n        // Update local state\n        const discussionIndex = discussions.value.findIndex(d => d.id === discussionId);\n        if (discussionIndex !== -1 && discussions.value[discussionIndex].participants) {\n          discussions.value[discussionIndex].participants = \n            discussions.value[discussionIndex].participants.filter(p => p !== userId.value);\n        }\n        \n        // If this is the current discussion, hide it\n        if (currentDiscussionId.value === discussionId) {\n          hideDiscussion();\n        }\n        \n        // For private discussions, they should disappear from the list after leaving\n        if (isPrivate) {\n          await fetchDiscussions(); // Refresh the list\n        }\n        \n        console.log(`Successfully left discussion ${discussionId}`);\n      } catch (error) {\n        console.error(\"Error leaving discussion:\", error);\n        alert(\"Une erreur s'est produite lors de la tentative de quitter la discussion\");\n      }\n    };\n    \n    const showAll = () => {\n      filterType.value = 'all';\n    };\n    \n    const showPrivate = () => {\n      filterType.value = 'private';\n    };\n    \n    const showPublic = () => {\n      filterType.value = 'public';\n    };\n    \n    const handleViewDiscussion = (discussionId) => {\n      currentDiscussionId.value = discussionId;\n      emit('select-discussion', discussionId);\n      checkParticipantStatus();\n    };\n    \n    const hideDiscussion = () => {\n      currentDiscussionId.value = null;\n      canViewDiscussion.value = false;\n    };\n    \n    // Fonctions pour la création de discussion\n    const openCreatePrivateDialog = () => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour créer une discussion.\");\n        return;\n      }\n      showPrivateDialog.value = true;\n      showPublicDialog.value = false;\n      showProfilePicDialog.value = false;\n    };\n    \n    const openCreatePublicDialog = () => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour créer une discussion.\");\n        return;\n      }\n      showPublicDialog.value = true;\n      showPrivateDialog.value = false;\n      showProfilePicDialog.value = false;\n    };\n    \n    const closeModals = () => {\n      showPrivateDialog.value = false;\n      showPublicDialog.value = false;\n      newDiscPrivateTitle.value = '';\n      newDiscPrivateDescription.value = '';\n      newDiscParticipantEmail.value = '';\n      newDiscPublicTitle.value = '';\n      newDiscPublicDescription.value = '';\n      newDiscPublicImageUrl.value = ''; // Reset the image URL field\n      newParticipantEmail.value = '';\n      participantEmails.value = [];\n    };\n    \n    const addParticipantEmail = () => {\n      if (newParticipantEmail.value && !participantEmails.value.includes(newParticipantEmail.value)) {\n        participantEmails.value.push(newParticipantEmail.value);\n        newParticipantEmail.value = '';\n      }\n    };\n    \n    const removeParticipantEmail = (index) => {\n      participantEmails.value.splice(index, 1);\n    };\n    \n    // FIXED: Improved email search for private discussions\n    const createPrivateDiscussion = async () => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour créer une discussion.\");\n        return;\n      }\n      \n      if (!newDiscPrivateTitle.value.trim()) {\n        alert(\"Le titre de la discussion est obligatoire.\");\n        return;\n      }\n      \n      const emailToFind = newDiscParticipantEmail.value.trim();\n      if (!emailToFind) {\n        alert(\"Veuillez spécifier un participant.\");\n        return;\n      }\n      \n      try {\n        // Chercher l'utilisateur par email - avec plus de robustesse\n        const db = getFirestore();\n        const usersRef = collection(db, \"users\");\n        \n        // Try different field names and case sensitivity options\n        const emailFields = [\"Email\", \"email\", \"userEmail\"];\n        let participantId = null;\n        \n        for (const field of emailFields) {\n          if (participantId) break; // Skip if already found\n          \n          // Try case-sensitive search\n          const q1 = query(usersRef, where(field, \"==\", emailToFind));\n          const snap1 = await getDocs(q1);\n          \n          if (!snap1.empty) {\n            snap1.forEach((doc) => {\n              participantId = doc.id;\n            });\n            console.log(`Found user with ${field} (case-sensitive): ${participantId}`);\n            break;\n          }\n          \n          // Try lowercase search\n          const q2 = query(usersRef, where(field, \"==\", emailToFind.toLowerCase()));\n          const snap2 = await getDocs(q2);\n          \n          if (!snap2.empty) {\n            snap2.forEach((doc) => {\n              participantId = doc.id;\n            });\n            console.log(`Found user with ${field} (lowercase): ${participantId}`);\n            break;\n          }\n        }\n        \n        // If still not found, try a different approach - fetch all users and compare\n        if (!participantId) {\n          console.log(\"User not found with direct queries, trying manual comparison\");\n          const allUsers = await getDocs(usersRef);\n          \n          allUsers.forEach((userDoc) => {\n            const userData = userDoc.data();\n            for (const key in userData) {\n              // Check if any field contains an email that matches\n              if (typeof userData[key] === 'string' && \n                  userData[key].toLowerCase() === emailToFind.toLowerCase() &&\n                  userData[key].includes('@')) {\n                participantId = userDoc.id;\n                console.log(`Found user by manual search in field ${key}: ${participantId}`);\n                break;\n              }\n            }\n          });\n        }\n        \n        if (!participantId) {\n          alert(\"Utilisateur non trouvé avec cet email. Vérifiez l'adresse email et réessayez.\");\n          return;\n        }\n        \n        // Créer la discussion\n        const newDiscussion = {\n          title: newDiscPrivateTitle.value.trim(),\n          description: newDiscPrivateDescription.value.trim(),\n          isPrivate: true,\n          participants: [userId.value, participantId],\n          createdAt: serverTimestamp(),\n          createdBy: userId.value,\n          creatorPic: profileImageUrl.value || ''\n        };\n        \n        const docRef = await addDoc(collection(db, \"discussions\"), newDiscussion);\n        \n        // Ajouter la nouvelle discussion à la liste locale\n        discussions.value.unshift({\n          id: docRef.id,\n          ...newDiscussion,\n          createdAt: new Date() // Pour l'affichage immédiat, sera remplacé au prochain fetchDiscussions\n        });\n        \n        alert(\"Discussion privée créée avec succès!\");\n        closeModals();\n      } catch (err) {\n        console.error(\"Erreur lors de la création de la discussion privée:\", err);\n        alert(\"Erreur lors de la création de la discussion. Veuillez réessayer.\");\n      }\n    };\n    \n    // FIXED: Improved email search for public discussions too and added image URL\n    const createPublicDiscussion = async () => {\n      if (!userId.value) {\n        alert(\"Vous devez être connecté pour créer une discussion.\");\n        return;\n      }\n      \n      if (!newDiscPublicTitle.value.trim()) {\n        alert(\"Le titre de la discussion est obligatoire.\");\n        return;\n      }\n      \n      try {\n        const db = getFirestore();\n        \n        // Récupérer les IDs des participants à partir des emails\n        const participantIds = [userId.value]; // Toujours inclure l'utilisateur actuel\n        const notFoundEmails = [];\n        \n        if (participantEmails.value.length > 0) {\n          const usersRef = collection(db, \"users\");\n          \n          for (const email of participantEmails.value) {\n            const emailToFind = email.trim();\n            let found = false;\n            \n           \n            const emailFields = [\"Email\", \"email\", \"userEmail\"];\n            \n            for (const field of emailFields) {\n              if (found) break;\n              \n              // Try exact match\n              const q = query(usersRef, where(field, \"==\", emailToFind));\n              const querySnapshot = await getDocs(q);\n              \n              if (!querySnapshot.empty) {\n                querySnapshot.forEach((doc) => {\n                  if (!participantIds.includes(doc.id)) {\n                    participantIds.push(doc.id);\n                    found = true;\n                  }\n                });\n              }\n              \n              // Try lowercase\n              if (!found) {\n                const q2 = query(usersRef, where(field, \"==\", emailToFind.toLowerCase()));\n                const snap2 = await getDocs(q2);\n                \n                if (!snap2.empty) {\n                  snap2.forEach((doc) => {\n                    if (!participantIds.includes(doc.id)) {\n                      participantIds.push(doc.id);\n                      found = true;\n                    }\n                  });\n                }\n              }\n            }\n            \n            // Manual search as fallback\n            if (!found) {\n              const allUsers = await getDocs(usersRef);\n              allUsers.forEach((userDoc) => {\n                const userData = userDoc.data();\n                for (const key in userData) {\n                  if (typeof userData[key] === 'string' && \n                      userData[key].toLowerCase() === emailToFind.toLowerCase() &&\n                      userData[key].includes('@')) {\n                    if (!participantIds.includes(userDoc.id)) {\n                      participantIds.push(userDoc.id);\n                      found = true;\n                      break;\n                    }\n                  }\n                }\n              });\n            }\n            \n            if (!found) {\n              notFoundEmails.push(emailToFind);\n            }\n          }\n        }\n        \n        // Warn about not found emails, but still create the discussion\n        if (notFoundEmails.length > 0) {\n          alert(`Attention: Les adresses emails suivantes n'ont pas été trouvées: ${notFoundEmails.join(\", \")}`);\n        }\n        \n        // Créer la discussion\n        const newDiscussion = {\n          title: newDiscPublicTitle.value.trim(),\n          description: newDiscPublicDescription.value.trim(),\n          isPrivate: false,\n          participants: participantIds,\n          createdAt: serverTimestamp(),\n          createdBy: userId.value,\n          creatorPic: profileImageUrl.value || '',\n          profileImageUrl: newDiscPublicImageUrl.value || '' // Add the image URL to the discussion\n        };\n        \n        const docRef = await addDoc(collection(db, \"discussions\"), newDiscussion);\n        \n        // Ajouter la nouvelle discussion à la liste locale\n        discussions.value.unshift({\n          id: docRef.id,\n          ...newDiscussion,\n          createdAt: new Date() // Pour l'affichage immédiat\n        });\n        \n        alert(\"Discussion publique créée avec succès!\");\n        closeModals();\n      } catch (err) {\n        console.error(\"Erreur lors de la création de la discussion publique:\", err);\n        alert(\"Erreur lors de la création de la discussion. Veuillez réessayer.\");\n      }\n    };\n    \n    onMounted(async () => {\n      const auth = getAuth();\n      onAuthStateChanged(auth, async (user) => {\n        if (user) {\n          userId.value = user.uid;\n          userEmail.value = user.email;\n          \n          // Set online status to true in Firestore\n          const db = getFirestore();\n          await updateDoc(doc(db, \"users\", user.uid), {\n            isOnline: true\n          });\n          \n          // Fetch user data including name and online status\n          await fetchUserData(user.uid);\n        } else {\n          userId.value = null;\n          userEmail.value = null;\n          FirstName.value = '';\n          LastName.value = '';\n          isOnline.value = false;\n          profileImageUrl.value = '';\n        }\n        checkParticipantStatus();\n      });\n      \n      await fetchDiscussions();\n    });\n    \n    return {\n      userId,\n      userEmail,\n      FirstName,\n      LastName,\n      isOnline,\n      profileImageUrl,\n      discussions,\n      loading,\n      error,\n      filteredDiscussions,\n      logout,\n      showAll,\n      showPrivate,\n      showPublic,\n      handleViewDiscussion,\n      hideDiscussion,\n      currentDiscussionId,\n      canViewDiscussion,\n      isParticipant,\n      joinDiscussion,\n      leaveDiscussion,\n      filterType,\n      \n      // Pour la photo de profil\n      showProfilePicDialog,\n      profilePicInput,\n      openProfilePicDialog,\n      closeProfilePicDialog,\n      updateProfilePicture,\n      \n      // Pour création de discussion privée\n      showPrivateDialog,\n      newDiscPrivateTitle,\n      newDiscPrivateDescription,\n      newDiscParticipantEmail,\n      openCreatePrivateDialog,\n      createPrivateDiscussion,\n      \n      // Pour création de discussion publique\n      showPublicDialog,\n      newDiscPublicTitle,\n      newDiscPublicDescription,\n      newDiscPublicImageUrl, // New variable for discussion image URL\n      newParticipantEmail,\n      participantEmails,\n      openCreatePublicDialog,\n      createPublicDiscussion,\n      addParticipantEmail,\n      removeParticipantEmail,\n      \n      closeModals\n    };\n  }\n};\n</script>\n\n<style scoped>\n.forum-layout {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: #f8f9fa;\n}\n\n\n.top-nav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 20px;\n  background-color: white;\n  border-bottom: 1px solid #e0e0e0;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n}\n\n.profile-link {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: #333;\n  font-weight: 500;\n  padding: 6px}\n.forum-layout {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: #f8f9fa;\n}\n\n\n.top-nav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 20px;\n  background-color: white;\n  border-bottom: 1px solid #e0e0e0;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n}\n\n.profile-link {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: #333;\n  font-weight: 500;\n  padding: 6px 12px;\n  border-radius: 20px;\n  transition: background-color 0.2s;\n}\n\n.profile-link:hover {\n  background-color: #f5f5f5;\n}\n\n.profile-image {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  object-fit: cover;\n  margin-right: 8px;}\n.forum-layout {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: #f8f9fa;\n}\n\n\n.top-nav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 20px;\n  background-color: white;\n  border-bottom: 1px solid #e0e0e0;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n}\n\n.profile-link {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: #333;\n  font-weight: 500;\n  padding: 6px 12px;\n  border-radius: 20px;\n  transition: background-color 0.2s;\n}\n\n.profile-link:hover {\n  background-color: #f5f5f5;\n}\n\n.profile-image {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  object-fit: cover;\n  margin-right: 8px;\n  border: 1px solid #e0e0e0;\n}\n\n.status-dot {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  background-color: #ccc;\n  margin-left: 8px;\n}\n\n.status-dot.online {\n  background-color: #4caf50;\n}\n\n.logout-btn {\n  background-color: #f5f5f5;\n  color: #333;\n  border: none;\n  padding:}\n.forum-layout {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: #f8f9fa;\n}\n\n\n.top-nav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px 20px;\n  background-color: white;\n  border-bottom: 1px solid #e0e0e0;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n}\n\n.profile-link {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: #333;\n  font-weight: 500;\n  padding: 6px 12px;\n  border-radius: 20px;\n  transition: background-color 0.2s;\n}\n\n.profile-link:hover {\n  background-color: #f5f5f5;\n}\n\n.status-dot {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  background-color: #ccc;\n  margin-left: 8px;\n}\n\n.status-dot.online {\n  background-color: #4caf50;\n}\n\n.logout-btn {\n  background-color: #f5f5f5;\n  color: #333;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: background-color 0.2s;\n}\n\n.logout-btn:hover {\n  background-color: #e0e0e0;\n}\n\n\n.forum-content {\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n}\n\n.left-panel {\n  width: 320px;\n  background: white;\n  border-right: 1px solid #e0e0e0;\n  padding: 20px;\n  overflow-y: auto;\n}\n\n.right-panel {\n  flex: 1;\n  background: #f5f7fb;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n}\n\n.right-panel > div:not(.join-prompt) {\n  flex: 1;\n  background: white;\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.join-prompt {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  text-align: center;\n  background: white;\n  border-radius: 12px;\n  padding: 40px;\n}\n\n.join-prompt h3 {\n  color: #333;\n  margin-bottom: 10px;\n}\n\n.join-prompt p {\n  color: #666;\n  margin-bottom: 20px;\n}\n\n.create-buttons {\n  margin-bottom: 20px;\n}\n\n.create-button {\n  width: 100%;\n  padding: 12px;\n  margin-bottom: 10px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s;\n}\n\n.private-btn {\n  background-color: #ffebee;\n  color: #d32f2f;\n}\n\n.public-btn {\n  background-color: #e3f2fd;\n  color: #1976d2;\n}\n\n.private-btn:hover {\n  background-color: #ffcdd2;\n}\n\n.public-btn:hover {\n  background-color: #bbdefb;\n}\n\n.icon {\n  font-size: 16px;\n  margin-right: 8px;\n  font-weight: bold;\n}\n\n.filter-buttons {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 20px;\n}\n\n.filter-buttons button {\n  flex: 1;\n  padding: 8px;\n  border: 1px solid #e0e0e0;\n  background-color: white;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 13px;\n  transition: all 0.2s;\n}\n\n.filter-buttons button.active {\n  background-color: #1976d2;\n  color: white;\n  border-color: #1976d2;\n}\n\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background-color: white;\n  padding: 24px;\n  border-radius: 12px;\n  width: 90%;\n  max-width: 500px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n}\n\n.modal-content h3 {\n  margin-top: 0;\n  margin-bottom: 20px;\n  color: #333;\n  font-size: 18px;\n}\n\n.modal-content input,\n.modal-content textarea {\n  width: 100%;\n  padding: 12px;\n  margin-bottom: 16px;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  font-size: 14px;\n  transition: border 0.2s;\n}\n\n.modal-content input:focus,\n.modal-content textarea:focus {\n  border-color: #1976d2;\n  outline: none;\n}\n\n.modal-content textarea {\n  resize: vertical;\n  min-height: 100px;\n}\n\n.modal-buttons {\n  display: flex;\n  justify-content: flex-end;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.modal-buttons button {\n  padding: 10px 20px;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s;\n}\n\n.modal-buttons button:first-child {\n  background-color: #4caf50;\n  color: white;\n}\n\n.modal-buttons button:first-child:hover {\n  background-color: #3d8b40;\n}\n\n.modal-buttons button:last-child {\n  background-color: #f5f5f5;\n  color: #333;\n}\n\n.modal-buttons button:last-child:hover {\n  background-color: #e0e0e0;\n}\n\n.participant-emails {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 10px;\n}\n\n.participant-emails input {\n  flex: 1;\n}\n\n.participant-emails button {\n  padding: 0 16px;\n  background-color: #1976d2;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n}\n\n.email-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin-bottom: 16px;\n}\n\n.email-tag {\n  background-color: #e3f2fd;\n  padding: 6px 12px;\n  border-radius: 16px;\n  font-size: 13px;\n  display: flex;\n  align-items: center;\n}\n\n.remove-email {\n  margin-left: 6px;\n  cursor: pointer;\n  font-weight: bold;\n  color: #1976d2;\n}\n\n.join-button {\n  padding: 12px 24px;\n  background-color: #1976d2;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s;\n}\n\n.join-button:hover {\n  background-color: #1565c0;\n  transform: translateY(-1px);\n}\n\n\n.loading {\n  text-align: center;\n  padding: 40px;\n  color: #666;\n  font-style: italic;\n}\n\n.no-discussions {\n  text-align: center;\n  padding: 40px;\n  color: #999;\n  font-style: italic;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}