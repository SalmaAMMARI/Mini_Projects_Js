{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/workspaces/Mini_Projects_Js/ChatAPP/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport { ref, onMounted, onUnmounted, computed } from 'vue';\nimport { getFirestore, collection, query, orderBy, getDocs, onSnapshot, doc, getDoc, addDoc, serverTimestamp } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\nexport default {\n  emits: ['select-discussion'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var discussions = ref([]);\n    var loading = ref(true);\n    var selectedDiscussionId = ref(null);\n    var discussionStatuses = ref({});\n    var userNames = ref({});\n\n    // Charger les discussions\n    var loadDiscussions = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var auth, currentUser, db, discussionsQuery;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              auth = getAuth();\n              currentUser = auth.currentUser;\n              if (currentUser) {\n                _context2.next = 5;\n                break;\n              }\n              loading.value = false;\n              return _context2.abrupt(\"return\");\n            case 5:\n              try {\n                db = getFirestore();\n                discussionsQuery = query(collection(db, 'discussions'), orderBy('lastActivity', 'desc'));\n                onSnapshot(discussionsQuery, /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(snapshot) {\n                    var discussionsList, _iterator, _step, _doc, data, messageCount, messagesQuery, messagesSnapshot, _iterator2, _step2, userId;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) switch (_context.prev = _context.next) {\n                        case 0:\n                          discussionsList = [];\n                          _iterator = _createForOfIteratorHelper(snapshot.docs);\n                          _context.prev = 2;\n                          _iterator.s();\n                        case 4:\n                          if ((_step = _iterator.n()).done) {\n                            _context.next = 42;\n                            break;\n                          }\n                          _doc = _step.value;\n                          data = _doc.data(); // Vérifier si l'utilisateur actuel fait partie de cette discussion\n                          if (!(data.participants && data.participants.includes(currentUser.uid))) {\n                            _context.next = 40;\n                            break;\n                          }\n                          // Compter les messages\n                          messageCount = 0;\n                          _context.prev = 9;\n                          messagesQuery = collection(db, 'discussions', _doc.id, 'messages');\n                          _context.next = 13;\n                          return getDocs(messagesQuery);\n                        case 13:\n                          messagesSnapshot = _context.sent;\n                          messageCount = messagesSnapshot.size;\n                          _context.next = 20;\n                          break;\n                        case 17:\n                          _context.prev = 17;\n                          _context.t0 = _context[\"catch\"](9);\n                          console.error(\"Erreur lors du comptage des messages:\", _context.t0);\n                        case 20:\n                          discussionsList.push({\n                            id: _doc.id,\n                            title: data.title,\n                            description: data.description,\n                            participants: data.participants || [],\n                            lastActivity: data.lastActivity,\n                            messageCount: messageCount,\n                            profileImageUrl: data.profileImageUrl || null // Ajouter le profileImageUrl\n                          });\n\n                          // Charger les noms des participants s'ils ne sont pas déjà chargés\n                          if (!data.participants) {\n                            _context.next = 40;\n                            break;\n                          }\n                          _iterator2 = _createForOfIteratorHelper(data.participants);\n                          _context.prev = 23;\n                          _iterator2.s();\n                        case 25:\n                          if ((_step2 = _iterator2.n()).done) {\n                            _context.next = 32;\n                            break;\n                          }\n                          userId = _step2.value;\n                          if (userNames.value[userId]) {\n                            _context.next = 30;\n                            break;\n                          }\n                          _context.next = 30;\n                          return getUserName(userId);\n                        case 30:\n                          _context.next = 25;\n                          break;\n                        case 32:\n                          _context.next = 37;\n                          break;\n                        case 34:\n                          _context.prev = 34;\n                          _context.t1 = _context[\"catch\"](23);\n                          _iterator2.e(_context.t1);\n                        case 37:\n                          _context.prev = 37;\n                          _iterator2.f();\n                          return _context.finish(37);\n                        case 40:\n                          _context.next = 4;\n                          break;\n                        case 42:\n                          _context.next = 47;\n                          break;\n                        case 44:\n                          _context.prev = 44;\n                          _context.t2 = _context[\"catch\"](2);\n                          _iterator.e(_context.t2);\n                        case 47:\n                          _context.prev = 47;\n                          _iterator.f();\n                          return _context.finish(47);\n                        case 50:\n                          discussions.value = discussionsList;\n                          loading.value = false;\n                        case 52:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }, _callee, null, [[2, 44, 47, 50], [9, 17], [23, 34, 37, 40]]);\n                  }));\n                  return function (_x) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }(), function (error) {\n                  console.error(\"Erreur lors du chargement des discussions:\", error);\n                  loading.value = false;\n                });\n              } catch (error) {\n                console.error(\"Erreur lors du chargement des discussions:\", error);\n                loading.value = false;\n              }\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function loadDiscussions() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    // Charger le nom d'un utilisateur\n    var getUserName = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(userId) {\n        var db, userRef, userSnap, userData, fullName, auth, currentUser;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!userNames.value[userId]) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 2:\n              _context3.prev = 2;\n              db = getFirestore();\n              userRef = doc(db, 'users', userId);\n              _context3.next = 7;\n              return getDoc(userRef);\n            case 7:\n              userSnap = _context3.sent;\n              if (userSnap.exists()) {\n                userData = userSnap.data();\n                fullName = \"\".concat(userData.firstName || '', \" \").concat(userData.lastName || '').trim();\n                userNames.value[userId] = fullName || userData.displayName || userData.email || 'Utilisateur';\n              } else {\n                // Vérifier si c'est l'utilisateur actuel\n                auth = getAuth();\n                currentUser = auth.currentUser;\n                if (currentUser && currentUser.uid === userId) {\n                  userNames.value[userId] = currentUser.displayName || currentUser.email || 'Moi';\n                } else {\n                  userNames.value[userId] = 'Utilisateur';\n                }\n              }\n              _context3.next = 15;\n              break;\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](2);\n              console.error(\"Erreur lors du chargement de l'utilisateur \".concat(userId, \":\"), _context3.t0);\n              userNames.value[userId] = 'Utilisateur';\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[2, 11]]);\n      }));\n      return function getUserName(_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    // Formater la date\n    var formatDate = function formatDate(timestamp) {\n      if (!timestamp) return '';\n      try {\n        // Handle both Firestore timestamp objects and raw timestamps\n        var date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);\n\n        // Check if the date is valid\n        if (isNaN(date.getTime())) return '';\n        var today = new Date();\n        var yesterday = new Date(today);\n        yesterday.setDate(yesterday.getDate() - 1);\n        var isToday = date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n        var isYesterday = date.getDate() === yesterday.getDate() && date.getMonth() === yesterday.getMonth() && date.getFullYear() === yesterday.getFullYear();\n        var timeOptions = {\n          hour: '2-digit',\n          minute: '2-digit'\n        };\n        if (isToday) {\n          return \"Aujourd'hui, \".concat(date.toLocaleTimeString('fr-FR', timeOptions));\n        } else if (isYesterday) {\n          return \"Hier, \".concat(date.toLocaleTimeString('fr-FR', timeOptions));\n        } else {\n          var options = {\n            day: '2-digit',\n            month: '2-digit',\n            year: 'numeric'\n          };\n          return date.toLocaleDateString('fr-FR', options) + ', ' + date.toLocaleTimeString('fr-FR', timeOptions);\n        }\n      } catch (e) {\n        console.error(\"Error formatting date:\", e);\n        return '';\n      }\n    };\n\n    // Créer une nouvelle discussion\n    var createNewDiscussion = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var auth, currentUser, title, description, profileImageUrl, db, docRef;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              auth = getAuth();\n              currentUser = auth.currentUser;\n              if (currentUser) {\n                _context4.next = 5;\n                break;\n              }\n              alert(\"Vous devez être connecté pour créer une discussion\");\n              return _context4.abrupt(\"return\");\n            case 5:\n              title = prompt(\"Titre de la discussion:\");\n              if (title) {\n                _context4.next = 8;\n                break;\n              }\n              return _context4.abrupt(\"return\");\n            case 8:\n              description = prompt(\"Description (optionnelle):\"); // Demander l'URL de l'image de profil\n              profileImageUrl = prompt(\"URL de l'image de profil (optionnelle):\");\n              _context4.prev = 10;\n              db = getFirestore();\n              _context4.next = 14;\n              return addDoc(collection(db, 'discussions'), {\n                title: title,\n                description: description || '',\n                createdAt: serverTimestamp(),\n                lastActivity: serverTimestamp(),\n                createdBy: currentUser.uid,\n                participants: [currentUser.uid],\n                profileImageUrl: profileImageUrl || null // Ajouter le profileImageUrl\n              });\n            case 14:\n              docRef = _context4.sent;\n              // Sélectionner la nouvelle discussion\n              selectDiscussion(docRef.id);\n              _context4.next = 22;\n              break;\n            case 18:\n              _context4.prev = 18;\n              _context4.t0 = _context4[\"catch\"](10);\n              console.error(\"Erreur lors de la création de la discussion:\", _context4.t0);\n              alert(\"Une erreur s'est produite lors de la création de la discussion\");\n            case 22:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[10, 18]]);\n      }));\n      return function createNewDiscussion() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    // Sélectionner une discussion\n    var selectDiscussion = function selectDiscussion(discussionId) {\n      selectedDiscussionId.value = discussionId;\n      emit('select-discussion', discussionId);\n    };\n\n    // Mettre à jour les statuts des utilisateurs dans les discussions\n    var updateDiscussionStatuses = function updateDiscussionStatuses(data) {\n      if (data && data.discussionId && data.statuses) {\n        discussionStatuses.value[data.discussionId] = data.statuses;\n      }\n    };\n\n    // Vérifier si un utilisateur est en ligne\n    var isUserOnline = function isUserOnline(discussionId, userId) {\n      return discussionStatuses.value[discussionId] && discussionStatuses.value[discussionId][userId] && discussionStatuses.value[discussionId][userId].isOnline;\n    };\n\n    // Obtenir les n premiers participants\n    var getTopParticipants = function getTopParticipants(discussionId, count) {\n      var discussion = discussions.value.find(function (d) {\n        return d.id === discussionId;\n      });\n      if (!discussion || !discussion.participants) return [];\n      return discussion.participants.slice(0, count);\n    };\n\n    // Obtenir les initiales d'un nom\n    var getInitials = function getInitials(name) {\n      if (!name) return '?';\n      var parts = name.split(' ').filter(Boolean);\n      if (parts.length === 0) return '?';\n      if (parts.length === 1) {\n        return parts[0].charAt(0).toUpperCase();\n      }\n      return (parts[0].charAt(0) + parts[parts.length - 1].charAt(0)).toUpperCase();\n    };\n    onMounted(function () {\n      loadDiscussions();\n    });\n    return {\n      discussions: discussions,\n      loading: loading,\n      selectedDiscussionId: selectedDiscussionId,\n      discussionStatuses: discussionStatuses,\n      userNames: userNames,\n      selectDiscussion: selectDiscussion,\n      createNewDiscussion: createNewDiscussion,\n      formatDate: formatDate,\n      updateDiscussionStatuses: updateDiscussionStatuses,\n      isUserOnline: isUserOnline,\n      getTopParticipants: getTopParticipants,\n      getInitials: getInitials\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","computed","getFirestore","collection","query","orderBy","getDocs","onSnapshot","doc","getDoc","addDoc","serverTimestamp","getAuth","emits","setup","props","_ref","emit","discussions","loading","selectedDiscussionId","discussionStatuses","userNames","loadDiscussions","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","auth","currentUser","db","discussionsQuery","wrap","_callee2$","_context2","prev","next","value","abrupt","_ref3","_callee","snapshot","discussionsList","_iterator","_step","_doc","data","messageCount","messagesQuery","messagesSnapshot","_iterator2","_step2","userId","_callee$","_context","_createForOfIteratorHelper","docs","s","n","done","participants","includes","uid","id","sent","size","t0","console","error","push","title","description","lastActivity","profileImageUrl","getUserName","t1","e","f","finish","t2","stop","_x","apply","arguments","_ref4","_callee3","userRef","userSnap","userData","fullName","_callee3$","_context3","exists","concat","firstName","lastName","trim","displayName","email","_x2","formatDate","timestamp","date","toDate","Date","isNaN","getTime","today","yesterday","setDate","getDate","isToday","getMonth","getFullYear","isYesterday","timeOptions","hour","minute","toLocaleTimeString","options","day","month","year","toLocaleDateString","createNewDiscussion","_ref5","_callee4","docRef","_callee4$","_context4","alert","prompt","createdAt","createdBy","selectDiscussion","discussionId","updateDiscussionStatuses","statuses","isUserOnline","isOnline","getTopParticipants","count","discussion","find","d","slice","getInitials","name","parts","split","filter","Boolean","length","charAt","toUpperCase"],"sources":["/workspaces/Mini_Projects_Js/ChatAPP/src/components/forumPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"discussions-container\">\r\n    <h1 class=\"discussions-title\">Mes discussions</h1>\r\n    \r\n    <div v-if=\"loading\" class=\"loading-indicator\">\r\n      <div class=\"spinner\"></div>\r\n      <span>Chargement des discussions...</span>\r\n    </div>\r\n    \r\n    <div v-else-if=\"discussions.length === 0\" class=\"no-discussions\">\r\n      <p>Vous n'avez pas encore de discussions.</p>\r\n      <button @click=\"createNewDiscussion\" class=\"create-discussion-btn\">\r\n        Créer une nouvelle discussion\r\n      </button>\r\n    </div>\r\n    \r\n    <div v-else class=\"discussions-list\">\r\n      <div \r\n        v-for=\"discussion in discussions\" \r\n        :key=\"discussion.id\" \r\n        class=\"discussion-item\"\r\n        :class=\"{'selected': selectedDiscussionId === discussion.id}\"\r\n        @click=\"selectDiscussion(discussion.id)\"\r\n      >\r\n        <div class=\"discussion-profile-image\" v-if=\"discussion.profileImageUrl\">\r\n          <img :src=\"discussion.profileImageUrl\" alt=\"Profile\" />\r\n        </div>\r\n        <div class=\"discussion-content\">\r\n          <h3 class=\"discussion-title\">{{ discussion.title }}</h3>\r\n          <p class=\"discussion-description\">{{ discussion.description }}</p>\r\n          \r\n          <div class=\"discussion-meta\">\r\n            <span class=\"message-count\">\r\n              {{ discussion.messageCount || 0 }} message{{ discussion.messageCount !== 1 ? 's' : '' }}\r\n            </span>\r\n            <span class=\"discussion-date\" v-if=\"discussion.lastActivity\">\r\n              {{ formatDate(discussion.lastActivity) }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Status indicators -->\r\n        <div class=\"participants-preview\" v-if=\"discussionStatuses[discussion.id]\">\r\n          <div v-for=\"(userId, index) in getTopParticipants(discussion.id, 3)\" \r\n               :key=\"userId\"\r\n               class=\"participant-indicator\"\r\n               :style=\"{ zIndex: 10 - index }\">\r\n            <div class=\"participant-avatar\">\r\n              {{ getInitials(userNames[userId] || '?') }}\r\n              <span \r\n                class=\"status-dot\"\r\n                :class=\"{ 'online': isUserOnline(discussion.id, userId) }\"\r\n              ></span>\r\n            </div>\r\n          </div>\r\n          <div class=\"more-participants\" v-if=\"discussion.participants && discussion.participants.length > 3\">\r\n            +{{ discussion.participants.length - 3 }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <button @click=\"createNewDiscussion\" class=\"new-discussion-btn\">\r\n      <span class=\"plus-icon\">+</span>\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onUnmounted, computed } from 'vue';\r\nimport { \r\n  getFirestore, \r\n  collection, \r\n  query, \r\n  orderBy,\r\n  getDocs,\r\n  onSnapshot, \r\n  doc, \r\n  getDoc, \r\n  addDoc,\r\n  serverTimestamp \r\n} from 'firebase/firestore';\r\nimport { getAuth } from 'firebase/auth';\r\n\r\nexport default {\r\n  emits: ['select-discussion'],\r\n  \r\n  setup(props, { emit }) {\r\n    const discussions = ref([]);\r\n    const loading = ref(true);\r\n    const selectedDiscussionId = ref(null);\r\n    const discussionStatuses = ref({});\r\n    const userNames = ref({});\r\n    \r\n    // Charger les discussions\r\n    const loadDiscussions = async () => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser) {\r\n        loading.value = false;\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const db = getFirestore();\r\n        const discussionsQuery = query(\r\n          collection(db, 'discussions'),\r\n          orderBy('lastActivity', 'desc')\r\n        );\r\n        \r\n        onSnapshot(discussionsQuery, async (snapshot) => {\r\n          const discussionsList = [];\r\n          \r\n          for (const doc of snapshot.docs) {\r\n            const data = doc.data();\r\n            \r\n            // Vérifier si l'utilisateur actuel fait partie de cette discussion\r\n            if (data.participants && data.participants.includes(currentUser.uid)) {\r\n              \r\n              // Compter les messages\r\n              let messageCount = 0;\r\n              try {\r\n                const messagesQuery = collection(db, 'discussions', doc.id, 'messages');\r\n                const messagesSnapshot = await getDocs(messagesQuery);\r\n                messageCount = messagesSnapshot.size;\r\n              } catch (error) {\r\n                console.error(\"Erreur lors du comptage des messages:\", error);\r\n              }\r\n              \r\n              discussionsList.push({\r\n                id: doc.id,\r\n                title: data.title,\r\n                description: data.description,\r\n                participants: data.participants || [],\r\n                lastActivity: data.lastActivity,\r\n                messageCount,\r\n                profileImageUrl: data.profileImageUrl || null  // Ajouter le profileImageUrl\r\n              });\r\n              \r\n              // Charger les noms des participants s'ils ne sont pas déjà chargés\r\n              if (data.participants) {\r\n                for (const userId of data.participants) {\r\n                  if (!userNames.value[userId]) {\r\n                    await getUserName(userId);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          \r\n          discussions.value = discussionsList;\r\n          loading.value = false;\r\n        }, (error) => {\r\n          console.error(\"Erreur lors du chargement des discussions:\", error);\r\n          loading.value = false;\r\n        });\r\n        \r\n      } catch (error) {\r\n        console.error(\"Erreur lors du chargement des discussions:\", error);\r\n        loading.value = false;\r\n      }\r\n    };\r\n    \r\n    // Charger le nom d'un utilisateur\r\n    const getUserName = async (userId) => {\r\n      if (userNames.value[userId]) return;\r\n      \r\n      try {\r\n        const db = getFirestore();\r\n        const userRef = doc(db, 'users', userId);\r\n        const userSnap = await getDoc(userRef);\r\n        \r\n        if (userSnap.exists()) {\r\n          const userData = userSnap.data();\r\n          const fullName = `${userData.firstName || ''} ${userData.lastName || ''}`.trim();\r\n          userNames.value[userId] = fullName || userData.displayName || userData.email || 'Utilisateur';\r\n        } else {\r\n          // Vérifier si c'est l'utilisateur actuel\r\n          const auth = getAuth();\r\n          const currentUser = auth.currentUser;\r\n          \r\n          if (currentUser && currentUser.uid === userId) {\r\n            userNames.value[userId] = currentUser.displayName || currentUser.email || 'Moi';\r\n          } else {\r\n            userNames.value[userId] = 'Utilisateur';\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(`Erreur lors du chargement de l'utilisateur ${userId}:`, error);\r\n        userNames.value[userId] = 'Utilisateur';\r\n      }\r\n    };\r\n    \r\n    // Formater la date\r\n    const formatDate = (timestamp) => {\r\n      if (!timestamp) return '';\r\n      \r\n      try {\r\n        // Handle both Firestore timestamp objects and raw timestamps\r\n        const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);\r\n        \r\n        // Check if the date is valid\r\n        if (isNaN(date.getTime())) return '';\r\n        \r\n        const today = new Date();\r\n        const yesterday = new Date(today);\r\n        yesterday.setDate(yesterday.getDate() - 1);\r\n        \r\n        const isToday = date.getDate() === today.getDate() && \r\n                       date.getMonth() === today.getMonth() && \r\n                       date.getFullYear() === today.getFullYear();\r\n                         \r\n        const isYesterday = date.getDate() === yesterday.getDate() && \r\n                          date.getMonth() === yesterday.getMonth() && \r\n                          date.getFullYear() === yesterday.getFullYear();\r\n        \r\n        const timeOptions = { hour: '2-digit', minute: '2-digit' };\r\n        \r\n        if (isToday) {\r\n          return `Aujourd'hui, ${date.toLocaleTimeString('fr-FR', timeOptions)}`;\r\n        } else if (isYesterday) {\r\n          return `Hier, ${date.toLocaleTimeString('fr-FR', timeOptions)}`;\r\n        } else {\r\n          const options = { day: '2-digit', month: '2-digit', year: 'numeric' };\r\n          return date.toLocaleDateString('fr-FR', options) + ', ' + \r\n                date.toLocaleTimeString('fr-FR', timeOptions);\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error formatting date:\", e);\r\n        return '';\r\n      }\r\n    };\r\n    \r\n    // Créer une nouvelle discussion\r\n    const createNewDiscussion = async () => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser) {\r\n        alert(\"Vous devez être connecté pour créer une discussion\");\r\n        return;\r\n      }\r\n      \r\n      const title = prompt(\"Titre de la discussion:\");\r\n      if (!title) return;\r\n      \r\n      const description = prompt(\"Description (optionnelle):\");\r\n      \r\n      // Demander l'URL de l'image de profil\r\n      const profileImageUrl = prompt(\"URL de l'image de profil (optionnelle):\");\r\n      \r\n      try {\r\n        const db = getFirestore();\r\n        const docRef = await addDoc(collection(db, 'discussions'), {\r\n          title,\r\n          description: description || '',\r\n          createdAt: serverTimestamp(),\r\n          lastActivity: serverTimestamp(),\r\n          createdBy: currentUser.uid,\r\n          participants: [currentUser.uid],\r\n          profileImageUrl: profileImageUrl || null  // Ajouter le profileImageUrl\r\n        });\r\n        \r\n        // Sélectionner la nouvelle discussion\r\n        selectDiscussion(docRef.id);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la création de la discussion:\", error);\r\n        alert(\"Une erreur s'est produite lors de la création de la discussion\");\r\n      }\r\n    };\r\n    \r\n    // Sélectionner une discussion\r\n    const selectDiscussion = (discussionId) => {\r\n      selectedDiscussionId.value = discussionId;\r\n      emit('select-discussion', discussionId);\r\n    };\r\n    \r\n    // Mettre à jour les statuts des utilisateurs dans les discussions\r\n    const updateDiscussionStatuses = (data) => {\r\n      if (data && data.discussionId && data.statuses) {\r\n        discussionStatuses.value[data.discussionId] = data.statuses;\r\n      }\r\n    };\r\n    \r\n    // Vérifier si un utilisateur est en ligne\r\n    const isUserOnline = (discussionId, userId) => {\r\n      return discussionStatuses.value[discussionId] && \r\n             discussionStatuses.value[discussionId][userId] && \r\n             discussionStatuses.value[discussionId][userId].isOnline;\r\n    };\r\n    \r\n    // Obtenir les n premiers participants\r\n    const getTopParticipants = (discussionId, count) => {\r\n      const discussion = discussions.value.find(d => d.id === discussionId);\r\n      if (!discussion || !discussion.participants) return [];\r\n      \r\n      return discussion.participants.slice(0, count);\r\n    };\r\n    \r\n    // Obtenir les initiales d'un nom\r\n    const getInitials = (name) => {\r\n      if (!name) return '?';\r\n      \r\n      const parts = name.split(' ').filter(Boolean);\r\n      if (parts.length === 0) return '?';\r\n      \r\n      if (parts.length === 1) {\r\n        return parts[0].charAt(0).toUpperCase();\r\n      }\r\n      \r\n      return (parts[0].charAt(0) + parts[parts.length - 1].charAt(0)).toUpperCase();\r\n    };\r\n    \r\n    onMounted(() => {\r\n      loadDiscussions();\r\n    });\r\n    \r\n    return {\r\n      discussions,\r\n      loading,\r\n      selectedDiscussionId,\r\n      discussionStatuses,\r\n      userNames,\r\n      selectDiscussion,\r\n      createNewDiscussion,\r\n      formatDate,\r\n      updateDiscussionStatuses,\r\n      isUserOnline,\r\n      getTopParticipants,\r\n      getInitials\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.discussions-container {\r\n  position: relative;\r\n  padding: 16px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\r\n  min-height: 600px;\r\n}\r\n\r\n.discussions-title {\r\n  margin-top: 0;\r\n  margin-bottom: 24px;\r\n  font-size: 24px;\r\n  color: #2c3e50;\r\n  border-bottom: 2px solid #e7e7e7;\r\n  padding-bottom: 12px;\r\n}\r\n\r\n.loading-indicator {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 40px;\r\n}\r\n\r\n.spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid #25d366;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.no-discussions {\r\n  text-align: center;\r\n  padding: 40px;\r\n  color: #666;\r\n}\r\n\r\n.create-discussion-btn {\r\n  margin-top: 16px;\r\n  padding: 10px 20px;\r\n  background-color: #25d366;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 24px;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.create-discussion-btn:hover {\r\n  background-color: #128c7e;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.discussions-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.discussion-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px;\r\n  background-color: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  border-left: 4px solid transparent;\r\n}\r\n\r\n.discussion-item:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.discussion-item.selected {\r\n  border-left-color: #25d366;\r\n  background-color: #f0f9f0;\r\n}\r\n\r\n\r\n.discussion-profile-image {\r\n  width: 48px;\r\n  height: 48px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  margin-right: 16px;\r\n  flex-shrink: 0;\r\n  border: 2px solid #e0e0e0;\r\n}\r\n\r\n.discussion-profile-image img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.discussion-content {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.discussion-title {\r\n  margin: 0 0 8px 0;\r\n  font-size: 18px;\r\n  color: #2c3e50;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.discussion-description {\r\n  margin: 0 0 12px 0;\r\n  color: #666;\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n}\r\n\r\n.discussion-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-size: 12px;\r\n  color: #888;\r\n}\r\n\r\n.participants-preview {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 12px;\r\n}\r\n\r\n.participant-indicator {\r\n  margin-left: -10px;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.participant-indicator:hover {\r\n  transform: translateY(-4px);\r\n}\r\n\r\n.participant-indicator:first-child {\r\n  margin-left: 0;\r\n}\r\n\r\n.participant-avatar {\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 50%;\r\n  background-color: #e0e0e0;\r\n  color: #555;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n  border: 2px solid white;\r\n  position: relative;\r\n}\r\n\r\n.status-dot {\r\n  width: 10px;\r\n  height: 10px;\r\n  border-radius: 50%;\r\n  background-color: #9e9e9e;\r\n  border: 2px solid white;\r\n  position: absolute;\r\n  bottom: -2px;\r\n  right: -2px;\r\n}\r\n\r\n.status-dot.online {\r\n  background-color: #4caf50;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n  animation: pulse 2s infinite;\r\n}\r\n\r\n@keyframes pulse {\r\n  0% {\r\n    box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.4);\r\n  }\r\n  70% {\r\n    box-shadow: 0 0 0 4px rgba(76, 175, 80, 0);\r\n  }\r\n  100% {\r\n    box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);\r\n  }\r\n}\r\n\r\n.more-participants {\r\n  margin-left: 8px;\r\n  font-size: 14px;\r\n  color: #666;\r\n  font-weight: 500;\r\n  background-color: #f0f0f0;\r\n  border-radius: 50%;\r\n  width: 36px;\r\n  height: 36px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: 2px solid white;\r\n}\r\n\r\n.new-discussion-btn {\r\n  position: absolute;\r\n  bottom: 24px;\r\n  right: 24px;\r\n  width: 56px;\r\n  height: 56px;\r\n  border-radius: 50%;\r\n  background-color: #25d366;\r\n  color: white;\r\n  border: none;\r\n  box-shadow: 0 4px 12px rgba(37, 211, 102, 0.3);\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.new-discussion-btn:hover {\r\n  transform: translateY(-4px) rotate(90deg);\r\n  box-shadow: 0 6px 16px rgba(37, 211, 102, 0.4);\r\n  background-color: #128c7e;\r\n}\r\n\r\n.plus-icon {\r\n  line-height: 1;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}