{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode, normalizeStyle as _normalizeStyle } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"discussions-container\"\n};\nvar _hoisted_2 = {\n  key: 0,\n  \"class\": \"loading-indicator\"\n};\nvar _hoisted_3 = {\n  key: 1,\n  \"class\": \"no-discussions\"\n};\nvar _hoisted_4 = {\n  key: 2,\n  \"class\": \"discussions-list\"\n};\nvar _hoisted_5 = [\"onClick\"];\nvar _hoisted_6 = {\n  key: 0,\n  \"class\": \"discussion-profile-image\"\n};\nvar _hoisted_7 = [\"src\"];\nvar _hoisted_8 = {\n  \"class\": \"discussion-content\"\n};\nvar _hoisted_9 = {\n  \"class\": \"discussion-title\"\n};\nvar _hoisted_10 = {\n  \"class\": \"discussion-description\"\n};\nvar _hoisted_11 = {\n  \"class\": \"discussion-meta\"\n};\nvar _hoisted_12 = {\n  \"class\": \"message-count\"\n};\nvar _hoisted_13 = {\n  key: 0,\n  \"class\": \"discussion-date\"\n};\nvar _hoisted_14 = {\n  key: 1,\n  \"class\": \"participants-preview\"\n};\nvar _hoisted_15 = {\n  \"class\": \"participant-avatar\"\n};\nvar _hoisted_16 = {\n  key: 0,\n  \"class\": \"more-participants\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[5] || (_cache[5] = _createElementVNode(\"h1\", {\n    \"class\": \"discussions-title\"\n  }, \"Mes discussions\", -1 /* HOISTED */)), $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[2] || (_cache[2] = [_createElementVNode(\"div\", {\n    \"class\": \"spinner\"\n  }, null, -1 /* HOISTED */), _createElementVNode(\"span\", null, \"Chargement des discussions...\", -1 /* HOISTED */)]))) : $setup.discussions.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[3] || (_cache[3] = _createElementVNode(\"p\", null, \"Vous n'avez pas encore de discussions.\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $setup.createNewDiscussion && $setup.createNewDiscussion.apply($setup, arguments);\n    }),\n    \"class\": \"create-discussion-btn\"\n  }, \" Créer une nouvelle discussion \")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.discussions, function (discussion) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: discussion.id,\n      \"class\": _normalizeClass([\"discussion-item\", {\n        'selected': $setup.selectedDiscussionId === discussion.id\n      }]),\n      onClick: function onClick($event) {\n        return $setup.selectDiscussion(discussion.id);\n      }\n    }, [discussion.profileImageUrl ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"img\", {\n      src: discussion.profileImageUrl,\n      alt: \"Profile\"\n    }, null, 8 /* PROPS */, _hoisted_7)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"h3\", _hoisted_9, _toDisplayString(discussion.title), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_10, _toDisplayString(discussion.description), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"span\", _hoisted_12, _toDisplayString(discussion.messageCount || 0) + \" message\" + _toDisplayString(discussion.messageCount !== 1 ? 's' : ''), 1 /* TEXT */), discussion.lastActivity ? (_openBlock(), _createElementBlock(\"span\", _hoisted_13, _toDisplayString($setup.formatDate(discussion.lastActivity)), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])]), _createCommentVNode(\" Status indicators \"), $setup.discussionStatuses[discussion.id] ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.getTopParticipants(discussion.id, 3), function (userId, index) {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: userId,\n        \"class\": \"participant-indicator\",\n        style: _normalizeStyle({\n          zIndex: 10 - index\n        })\n      }, [_createElementVNode(\"div\", _hoisted_15, [_createTextVNode(_toDisplayString($setup.getInitials($setup.userNames[userId] || '?')) + \" \", 1 /* TEXT */), _createElementVNode(\"span\", {\n        \"class\": _normalizeClass([\"status-dot\", {\n          'online': $setup.isUserOnline(discussion.id, userId)\n        }])\n      }, null, 2 /* CLASS */)])], 4 /* STYLE */);\n    }), 128 /* KEYED_FRAGMENT */)), discussion.participants && discussion.participants.length > 3 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, \" +\" + _toDisplayString(discussion.participants.length - 3), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))])), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $setup.createNewDiscussion && $setup.createNewDiscussion.apply($setup, arguments);\n    }),\n    \"class\": \"new-discussion-btn\"\n  }, _cache[4] || (_cache[4] = [_createElementVNode(\"span\", {\n    \"class\": \"plus-icon\"\n  }, \"+\", -1 /* HOISTED */)]))]);\n}","map":{"version":3,"names":["key","_createElementBlock","_hoisted_1","_createElementVNode","$setup","loading","_hoisted_2","_cache","discussions","length","_hoisted_3","onClick","createNewDiscussion","apply","arguments","_hoisted_4","_Fragment","_renderList","discussion","id","_normalizeClass","selectedDiscussionId","$event","selectDiscussion","profileImageUrl","_hoisted_6","src","alt","_hoisted_7","_createCommentVNode","_hoisted_8","_hoisted_9","_toDisplayString","title","_hoisted_10","description","_hoisted_11","_hoisted_12","messageCount","lastActivity","_hoisted_13","formatDate","discussionStatuses","_hoisted_14","getTopParticipants","userId","index","style","_normalizeStyle","zIndex","_hoisted_15","_createTextVNode","getInitials","userNames","isUserOnline","participants","_hoisted_16","_hoisted_5"],"sources":["/workspaces/Mini_Projects_Js/ChatAPP/src/components/forumPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"discussions-container\">\r\n    <h1 class=\"discussions-title\">Mes discussions</h1>\r\n    \r\n    <div v-if=\"loading\" class=\"loading-indicator\">\r\n      <div class=\"spinner\"></div>\r\n      <span>Chargement des discussions...</span>\r\n    </div>\r\n    \r\n    <div v-else-if=\"discussions.length === 0\" class=\"no-discussions\">\r\n      <p>Vous n'avez pas encore de discussions.</p>\r\n      <button @click=\"createNewDiscussion\" class=\"create-discussion-btn\">\r\n        Créer une nouvelle discussion\r\n      </button>\r\n    </div>\r\n    \r\n    <div v-else class=\"discussions-list\">\r\n      <div \r\n        v-for=\"discussion in discussions\" \r\n        :key=\"discussion.id\" \r\n        class=\"discussion-item\"\r\n        :class=\"{'selected': selectedDiscussionId === discussion.id}\"\r\n        @click=\"selectDiscussion(discussion.id)\"\r\n      >\r\n        <div class=\"discussion-profile-image\" v-if=\"discussion.profileImageUrl\">\r\n          <img :src=\"discussion.profileImageUrl\" alt=\"Profile\" />\r\n        </div>\r\n        <div class=\"discussion-content\">\r\n          <h3 class=\"discussion-title\">{{ discussion.title }}</h3>\r\n          <p class=\"discussion-description\">{{ discussion.description }}</p>\r\n          \r\n          <div class=\"discussion-meta\">\r\n            <span class=\"message-count\">\r\n              {{ discussion.messageCount || 0 }} message{{ discussion.messageCount !== 1 ? 's' : '' }}\r\n            </span>\r\n            <span class=\"discussion-date\" v-if=\"discussion.lastActivity\">\r\n              {{ formatDate(discussion.lastActivity) }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Status indicators -->\r\n        <div class=\"participants-preview\" v-if=\"discussionStatuses[discussion.id]\">\r\n          <div v-for=\"(userId, index) in getTopParticipants(discussion.id, 3)\" \r\n               :key=\"userId\"\r\n               class=\"participant-indicator\"\r\n               :style=\"{ zIndex: 10 - index }\">\r\n            <div class=\"participant-avatar\">\r\n              {{ getInitials(userNames[userId] || '?') }}\r\n              <span \r\n                class=\"status-dot\"\r\n                :class=\"{ 'online': isUserOnline(discussion.id, userId) }\"\r\n              ></span>\r\n            </div>\r\n          </div>\r\n          <div class=\"more-participants\" v-if=\"discussion.participants && discussion.participants.length > 3\">\r\n            +{{ discussion.participants.length - 3 }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <button @click=\"createNewDiscussion\" class=\"new-discussion-btn\">\r\n      <span class=\"plus-icon\">+</span>\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onUnmounted, computed } from 'vue';\r\nimport { \r\n  getFirestore, \r\n  collection, \r\n  query, \r\n  orderBy,\r\n  getDocs,\r\n  onSnapshot, \r\n  doc, \r\n  getDoc, \r\n  addDoc,\r\n  serverTimestamp \r\n} from 'firebase/firestore';\r\nimport { getAuth } from 'firebase/auth';\r\n\r\nexport default {\r\n  emits: ['select-discussion'],\r\n  \r\n  setup(props, { emit }) {\r\n    const discussions = ref([]);\r\n    const loading = ref(true);\r\n    const selectedDiscussionId = ref(null);\r\n    const discussionStatuses = ref({});\r\n    const userNames = ref({});\r\n    \r\n    // Charger les discussions\r\n    const loadDiscussions = async () => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser) {\r\n        loading.value = false;\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        const db = getFirestore();\r\n        const discussionsQuery = query(\r\n          collection(db, 'discussions'),\r\n          orderBy('lastActivity', 'desc')\r\n        );\r\n        \r\n        onSnapshot(discussionsQuery, async (snapshot) => {\r\n          const discussionsList = [];\r\n          \r\n          for (const doc of snapshot.docs) {\r\n            const data = doc.data();\r\n            \r\n            // Vérifier si l'utilisateur actuel fait partie de cette discussion\r\n            if (data.participants && data.participants.includes(currentUser.uid)) {\r\n              \r\n              // Compter les messages\r\n              let messageCount = 0;\r\n              try {\r\n                const messagesQuery = collection(db, 'discussions', doc.id, 'messages');\r\n                const messagesSnapshot = await getDocs(messagesQuery);\r\n                messageCount = messagesSnapshot.size;\r\n              } catch (error) {\r\n                console.error(\"Erreur lors du comptage des messages:\", error);\r\n              }\r\n              \r\n              discussionsList.push({\r\n                id: doc.id,\r\n                title: data.title,\r\n                description: data.description,\r\n                participants: data.participants || [],\r\n                lastActivity: data.lastActivity,\r\n                messageCount,\r\n                profileImageUrl: data.profileImageUrl || null  // Ajouter le profileImageUrl\r\n              });\r\n              \r\n              // Charger les noms des participants s'ils ne sont pas déjà chargés\r\n              if (data.participants) {\r\n                for (const userId of data.participants) {\r\n                  if (!userNames.value[userId]) {\r\n                    await getUserName(userId);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          \r\n          discussions.value = discussionsList;\r\n          loading.value = false;\r\n        }, (error) => {\r\n          console.error(\"Erreur lors du chargement des discussions:\", error);\r\n          loading.value = false;\r\n        });\r\n        \r\n      } catch (error) {\r\n        console.error(\"Erreur lors du chargement des discussions:\", error);\r\n        loading.value = false;\r\n      }\r\n    };\r\n    \r\n    // Charger le nom d'un utilisateur\r\n    const getUserName = async (userId) => {\r\n      if (userNames.value[userId]) return;\r\n      \r\n      try {\r\n        const db = getFirestore();\r\n        const userRef = doc(db, 'users', userId);\r\n        const userSnap = await getDoc(userRef);\r\n        \r\n        if (userSnap.exists()) {\r\n          const userData = userSnap.data();\r\n          const fullName = `${userData.firstName || ''} ${userData.lastName || ''}`.trim();\r\n          userNames.value[userId] = fullName || userData.displayName || userData.email || 'Utilisateur';\r\n        } else {\r\n          // Vérifier si c'est l'utilisateur actuel\r\n          const auth = getAuth();\r\n          const currentUser = auth.currentUser;\r\n          \r\n          if (currentUser && currentUser.uid === userId) {\r\n            userNames.value[userId] = currentUser.displayName || currentUser.email || 'Moi';\r\n          } else {\r\n            userNames.value[userId] = 'Utilisateur';\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(`Erreur lors du chargement de l'utilisateur ${userId}:`, error);\r\n        userNames.value[userId] = 'Utilisateur';\r\n      }\r\n    };\r\n    \r\n    // Formater la date\r\n    const formatDate = (timestamp) => {\r\n      if (!timestamp) return '';\r\n      \r\n      try {\r\n        // Handle both Firestore timestamp objects and raw timestamps\r\n        const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);\r\n        \r\n        // Check if the date is valid\r\n        if (isNaN(date.getTime())) return '';\r\n        \r\n        const today = new Date();\r\n        const yesterday = new Date(today);\r\n        yesterday.setDate(yesterday.getDate() - 1);\r\n        \r\n        const isToday = date.getDate() === today.getDate() && \r\n                       date.getMonth() === today.getMonth() && \r\n                       date.getFullYear() === today.getFullYear();\r\n                         \r\n        const isYesterday = date.getDate() === yesterday.getDate() && \r\n                          date.getMonth() === yesterday.getMonth() && \r\n                          date.getFullYear() === yesterday.getFullYear();\r\n        \r\n        const timeOptions = { hour: '2-digit', minute: '2-digit' };\r\n        \r\n        if (isToday) {\r\n          return `Aujourd'hui, ${date.toLocaleTimeString('fr-FR', timeOptions)}`;\r\n        } else if (isYesterday) {\r\n          return `Hier, ${date.toLocaleTimeString('fr-FR', timeOptions)}`;\r\n        } else {\r\n          const options = { day: '2-digit', month: '2-digit', year: 'numeric' };\r\n          return date.toLocaleDateString('fr-FR', options) + ', ' + \r\n                date.toLocaleTimeString('fr-FR', timeOptions);\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error formatting date:\", e);\r\n        return '';\r\n      }\r\n    };\r\n    \r\n    // Créer une nouvelle discussion\r\n    const createNewDiscussion = async () => {\r\n      const auth = getAuth();\r\n      const currentUser = auth.currentUser;\r\n      \r\n      if (!currentUser) {\r\n        alert(\"Vous devez être connecté pour créer une discussion\");\r\n        return;\r\n      }\r\n      \r\n      const title = prompt(\"Titre de la discussion:\");\r\n      if (!title) return;\r\n      \r\n      const description = prompt(\"Description (optionnelle):\");\r\n      \r\n      // Demander l'URL de l'image de profil\r\n      const profileImageUrl = prompt(\"URL de l'image de profil (optionnelle):\");\r\n      \r\n      try {\r\n        const db = getFirestore();\r\n        const docRef = await addDoc(collection(db, 'discussions'), {\r\n          title,\r\n          description: description || '',\r\n          createdAt: serverTimestamp(),\r\n          lastActivity: serverTimestamp(),\r\n          createdBy: currentUser.uid,\r\n          participants: [currentUser.uid],\r\n          profileImageUrl: profileImageUrl || null  // Ajouter le profileImageUrl\r\n        });\r\n        \r\n        // Sélectionner la nouvelle discussion\r\n        selectDiscussion(docRef.id);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la création de la discussion:\", error);\r\n        alert(\"Une erreur s'est produite lors de la création de la discussion\");\r\n      }\r\n    };\r\n    \r\n    // Sélectionner une discussion\r\n    const selectDiscussion = (discussionId) => {\r\n      selectedDiscussionId.value = discussionId;\r\n      emit('select-discussion', discussionId);\r\n    };\r\n    \r\n    // Mettre à jour les statuts des utilisateurs dans les discussions\r\n    const updateDiscussionStatuses = (data) => {\r\n      if (data && data.discussionId && data.statuses) {\r\n        discussionStatuses.value[data.discussionId] = data.statuses;\r\n      }\r\n    };\r\n    \r\n    // Vérifier si un utilisateur est en ligne\r\n    const isUserOnline = (discussionId, userId) => {\r\n      return discussionStatuses.value[discussionId] && \r\n             discussionStatuses.value[discussionId][userId] && \r\n             discussionStatuses.value[discussionId][userId].isOnline;\r\n    };\r\n    \r\n    // Obtenir les n premiers participants\r\n    const getTopParticipants = (discussionId, count) => {\r\n      const discussion = discussions.value.find(d => d.id === discussionId);\r\n      if (!discussion || !discussion.participants) return [];\r\n      \r\n      return discussion.participants.slice(0, count);\r\n    };\r\n    \r\n    // Obtenir les initiales d'un nom\r\n    const getInitials = (name) => {\r\n      if (!name) return '?';\r\n      \r\n      const parts = name.split(' ').filter(Boolean);\r\n      if (parts.length === 0) return '?';\r\n      \r\n      if (parts.length === 1) {\r\n        return parts[0].charAt(0).toUpperCase();\r\n      }\r\n      \r\n      return (parts[0].charAt(0) + parts[parts.length - 1].charAt(0)).toUpperCase();\r\n    };\r\n    \r\n    onMounted(() => {\r\n      loadDiscussions();\r\n    });\r\n    \r\n    return {\r\n      discussions,\r\n      loading,\r\n      selectedDiscussionId,\r\n      discussionStatuses,\r\n      userNames,\r\n      selectDiscussion,\r\n      createNewDiscussion,\r\n      formatDate,\r\n      updateDiscussionStatuses,\r\n      isUserOnline,\r\n      getTopParticipants,\r\n      getInitials\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.discussions-container {\r\n  position: relative;\r\n  padding: 16px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\r\n  min-height: 600px;\r\n}\r\n\r\n.discussions-title {\r\n  margin-top: 0;\r\n  margin-bottom: 24px;\r\n  font-size: 24px;\r\n  color: #2c3e50;\r\n  border-bottom: 2px solid #e7e7e7;\r\n  padding-bottom: 12px;\r\n}\r\n\r\n.loading-indicator {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 40px;\r\n}\r\n\r\n.spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid #25d366;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.no-discussions {\r\n  text-align: center;\r\n  padding: 40px;\r\n  color: #666;\r\n}\r\n\r\n.create-discussion-btn {\r\n  margin-top: 16px;\r\n  padding: 10px 20px;\r\n  background-color: #25d366;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 24px;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.create-discussion-btn:hover {\r\n  background-color: #128c7e;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.discussions-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.discussion-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px;\r\n  background-color: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  border-left: 4px solid transparent;\r\n}\r\n\r\n.discussion-item:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.discussion-item.selected {\r\n  border-left-color: #25d366;\r\n  background-color: #f0f9f0;\r\n}\r\n\r\n\r\n.discussion-profile-image {\r\n  width: 48px;\r\n  height: 48px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  margin-right: 16px;\r\n  flex-shrink: 0;\r\n  border: 2px solid #e0e0e0;\r\n}\r\n\r\n.discussion-profile-image img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.discussion-content {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.discussion-title {\r\n  margin: 0 0 8px 0;\r\n  font-size: 18px;\r\n  color: #2c3e50;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.discussion-description {\r\n  margin: 0 0 12px 0;\r\n  color: #666;\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n}\r\n\r\n.discussion-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-size: 12px;\r\n  color: #888;\r\n}\r\n\r\n.participants-preview {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 12px;\r\n}\r\n\r\n.participant-indicator {\r\n  margin-left: -10px;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.participant-indicator:hover {\r\n  transform: translateY(-4px);\r\n}\r\n\r\n.participant-indicator:first-child {\r\n  margin-left: 0;\r\n}\r\n\r\n.participant-avatar {\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 50%;\r\n  background-color: #e0e0e0;\r\n  color: #555;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n  border: 2px solid white;\r\n  position: relative;\r\n}\r\n\r\n.status-dot {\r\n  width: 10px;\r\n  height: 10px;\r\n  border-radius: 50%;\r\n  background-color: #9e9e9e;\r\n  border: 2px solid white;\r\n  position: absolute;\r\n  bottom: -2px;\r\n  right: -2px;\r\n}\r\n\r\n.status-dot.online {\r\n  background-color: #4caf50;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n  animation: pulse 2s infinite;\r\n}\r\n\r\n@keyframes pulse {\r\n  0% {\r\n    box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.4);\r\n  }\r\n  70% {\r\n    box-shadow: 0 0 0 4px rgba(76, 175, 80, 0);\r\n  }\r\n  100% {\r\n    box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);\r\n  }\r\n}\r\n\r\n.more-participants {\r\n  margin-left: 8px;\r\n  font-size: 14px;\r\n  color: #666;\r\n  font-weight: 500;\r\n  background-color: #f0f0f0;\r\n  border-radius: 50%;\r\n  width: 36px;\r\n  height: 36px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: 2px solid white;\r\n}\r\n\r\n.new-discussion-btn {\r\n  position: absolute;\r\n  bottom: 24px;\r\n  right: 24px;\r\n  width: 56px;\r\n  height: 56px;\r\n  border-radius: 50%;\r\n  background-color: #25d366;\r\n  color: white;\r\n  border: none;\r\n  box-shadow: 0 4px 12px rgba(37, 211, 102, 0.3);\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.new-discussion-btn:hover {\r\n  transform: translateY(-4px) rotate(90deg);\r\n  box-shadow: 0 6px 16px rgba(37, 211, 102, 0.4);\r\n  background-color: #128c7e;\r\n}\r\n\r\n.plus-icon {\r\n  line-height: 1;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}